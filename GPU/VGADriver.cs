using Disassembler;
using IRB.Collections.Generic;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Drawing;
using System.Drawing.Imaging;
using System.IO;
using System.Threading;
using System.Windows.Forms;

namespace Civilization1
{
	public class VGADriver
	{
		public static ushort ScreenWidth = 320;
		public static ushort ScreenHeight = 200;
		public static ushort ScreenStride = 320; // Stride has to be a multiple of 4 bytes

		private Civilization oParent;
		private CPU oCPU;
		private ushort usSegment = 0;

		private Thread oVGAThread;
		private VGAForm oVGAForm;
		public object VGALock = new object();
		private BDictionary<int, VGABitmap> aScreens = new BDictionary<int, VGABitmap>();
		private Queue<char> aKeys = new Queue<char>();

		private ushort Var_6b3 = 0;
		private ushort Var_6b5 = 0;

		private ushort Var_89e = 0;
		private ushort Var_8a0 = 0;
		private ushort Var_8a2 = 0;
		private ushort Var_8a4 = 0;
		private ushort Var_8a6 = 0;
		private ushort Var_8a8 = 0;
		private ushort Var_8aa = 0;
		private ushort Var_8ac = 0;
		private ushort Var_8ae = 0;
		private ushort Var_8b0 = 0;
		private ushort Var_8b2 = 0;
		private ushort Var_8b4 = 0;
		private ushort Var_8ba = 0;
		private ushort Var_8bc = 0;
		private ushort Var_8c2 = 0;
		private ushort Var_8c4 = 0;
		private ushort Var_8c6 = 0;
		private ushort Var_8c8 = 0;
		private ushort Var_8ca = 0;
		private ushort Var_8cc = 0;
		private ushort Var_8ce = 0;
		private ushort Var_8d0 = 0;

		private ushort Var_10ac = 0x4d2;
		private byte Var_10ae = 0;

		private ushort Var_15c0 = 0;
		private ushort Var_15c2 = 0;
		private ushort Var_15c4 = 0;
		private ushort Var_15c6 = 0;
		private ushort Var_15c8 = 0;
		private ushort Var_15ca_BufferX = 0;
		private ushort Var_15cc_BufferY = 0;
		private ushort Var_15ce_BufferWidth = 0;
		private ushort Var_15d0_BufferHeight = 0;
		private ushort Var_15d2_BufferFlag = 0;
		private ushort Var_15d4_Page = 0;

		private byte[] Var_15d6_Buffer = new byte[512];
		private ushort[] Var_1970 = new ushort[] { 0xa000, 0xa000, 0xa000, 0xa000, 0xa000, 0xa000, 0xa000, 0xa000 };
		private ushort Var_1980_ActiveScreenID = 0;
		private ushort Var_1982_XOffset = 0;
		private ushort Var_1984_YOffset = 0;
		private ushort Var_1986_Width = 319;
		private byte Var_198a_FrontColor = 0;
		private PixelWriteModeEnum Var_198b_PixelMode = PixelWriteModeEnum.Normal;

		private ushort Var_19c2 = 0;
		private ushort Var_19c4 = 50;
		private ushort Var_19c6 = 100;
		private ushort Var_19c8 = 0;
		private ushort Var_19ca = 0;
		private byte Var_19ce = 0;
		private byte Var_19cf = 0;

		#region Fonts
		private byte[] Var_19f0_FontTable = new byte[] {
			0x09, 0x00, 0x7c, 0x00, 0xe4, 0x03, 0x8c, 0x06, 0x2f, 0x0f, 0xac, 0x1b, 0x90, 0x28, 0x38, 0x34,
			0x60, 0x3b, 0x47, 0x43, 0x05, 0x02, 0x03, 0x07, 0x06, 0x06, 0x05, 0x01, 0x03, 0x04, 0x05, 0x05,
			0x02, 0x05, 0x01, 0x04, 0x05, 0x04, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x02, 0x02,
			0x05, 0x05, 0x05, 0x05, 0x05, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x04, 0x06, 0x06,
			0x06, 0x07, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x07, 0x07, 0x06, 0x06, 0x06, 0x03,
			0x07, 0x03, 0x06, 0x09, 0x05, 0x05, 0x05, 0x04, 0x05, 0x05, 0x03, 0x05, 0x04, 0x03, 0x04, 0x04,
			0x03, 0x05, 0x04, 0x05, 0x05, 0x05, 0x05, 0x05, 0x04, 0x05, 0x05, 0x05, 0x04, 0x04, 0x04, 0x07,
			0x05, 0x07, 0x07, 0x04, 0x20, 0x7f, 0x01, 0x00, 0x07, 0x01, 0x01, 0x00, 0x00, 0x00, 0xa0, 0x38,
			0x00, 0x40, 0x20, 0x80, 0x20, 0x40, 0x20, 0x00, 0x00, 0x00, 0x00, 0x10, 0x70, 0x60, 0x70, 0xf0,
			0x30, 0xf8, 0x70, 0xf8, 0x70, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 0x78, 0xf8, 0x78,
			0xf8, 0xfc, 0xfc, 0x78, 0xcc, 0xf0, 0x3c, 0xcc, 0xc0, 0xc6, 0xcc, 0x78, 0xf8, 0x78, 0xf8, 0x78,
			0xfc, 0xcc, 0xc6, 0xc6, 0xcc, 0xcc, 0xfc, 0xe0, 0x10, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00,
			0x08, 0x00, 0x20, 0x00, 0x80, 0x40, 0x10, 0x80, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x38, 0x70, 0x00, 0x00, 0xc0, 0xa0, 0x28,
			0x70, 0xa8, 0x50, 0x80, 0x40, 0x20, 0xa8, 0x20, 0x00, 0x00, 0x00, 0x10, 0xd8, 0xe0, 0xd8, 0x18,
			0xb0, 0xc0, 0xc0, 0x98, 0xd8, 0xd8, 0x00, 0x00, 0x18, 0x00, 0xc0, 0x88, 0x00, 0xcc, 0xcc, 0xcc,
			0xcc, 0xc0, 0xc0, 0xcc, 0xcc, 0x60, 0x18, 0xd8, 0xc0, 0xee, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xc0,
			0x30, 0xcc, 0xc6, 0xc6, 0xcc, 0xcc, 0x18, 0x80, 0x28, 0x20, 0x04, 0x38, 0x00, 0x00, 0x80, 0x00,
			0x08, 0x00, 0x40, 0x00, 0x80, 0x00, 0x00, 0x80, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe6, 0xf8, 0x18, 0x88, 0x00, 0x00, 0xc0, 0x00, 0x7c,
			0xd8, 0x50, 0x20, 0x80, 0x80, 0x10, 0x70, 0x20, 0x00, 0x00, 0x00, 0x20, 0xd8, 0x60, 0x18, 0x70,
			0xb0, 0xf0, 0xf0, 0x30, 0x70, 0xd8, 0xc0, 0x40, 0x60, 0xf8, 0x30, 0x10, 0x00, 0xcc, 0xf8, 0xc0,
			0xcc, 0xf0, 0xc0, 0xc0, 0xfc, 0x60, 0x18, 0xf0, 0xc0, 0xd6, 0xec, 0xcc, 0xcc, 0xcc, 0xcc, 0x78,
			0x30, 0xcc, 0x6c, 0xd6, 0x78, 0x78, 0x30, 0x80, 0x4c, 0x20, 0x0c, 0x7c, 0x00, 0x68, 0xf0, 0x70,
			0x78, 0x70, 0x40, 0x78, 0xe0, 0x40, 0x10, 0xa0, 0x40, 0xd0, 0xe0, 0x70, 0xf0, 0x78, 0xf0, 0x78,
			0xe0, 0x88, 0x88, 0xa8, 0x90, 0x90, 0xf0, 0x6e, 0xf8, 0x2a, 0xa8, 0x00, 0x00, 0xc0, 0x00, 0xba,
			0x88, 0x30, 0x50, 0x00, 0x80, 0x10, 0xa8, 0xf8, 0x00, 0xf8, 0x00, 0x20, 0xd8, 0x60, 0x70, 0x18,
			0xf8, 0x18, 0xd8, 0x30, 0xd8, 0x78, 0x00, 0x00, 0x80, 0x00, 0x08, 0x20, 0x00, 0xcc, 0xcc, 0xc0,
			0xcc, 0xc0, 0xe0, 0xdc, 0xcc, 0x60, 0x18, 0xf0, 0xc0, 0xc6, 0xdc, 0xcc, 0xf8, 0xcc, 0xf8, 0x0c,
			0x30, 0xcc, 0x6c, 0xd6, 0x78, 0x30, 0x60, 0x80, 0x9e, 0x20, 0xd8, 0x7c, 0x00, 0x98, 0x88, 0x80,
			0x88, 0xf8, 0xe0, 0x88, 0x90, 0x40, 0x10, 0xc0, 0x40, 0xa8, 0x90, 0x88, 0x88, 0x88, 0x88, 0xf0,
			0x40, 0x88, 0x88, 0xa8, 0x60, 0x90, 0x20, 0x2c, 0xf8, 0x44, 0xa8, 0x00, 0x00, 0x00, 0x00, 0x38,
			0xd8, 0x68, 0x98, 0x00, 0x40, 0x20, 0x20, 0x20, 0x40, 0x00, 0x00, 0x40, 0xd8, 0x60, 0xc0, 0x18,
			0x30, 0xd8, 0xd8, 0x60, 0xd8, 0x18, 0xc0, 0x40, 0x60, 0xf8, 0x30, 0x00, 0x00, 0xfc, 0xcc, 0xcc,
			0xcc, 0xc0, 0xc0, 0xcc, 0xcc, 0x60, 0xd8, 0xd8, 0xc0, 0xc6, 0xcc, 0xcc, 0xc0, 0xd8, 0xd8, 0xcc,
			0x30, 0xcc, 0x38, 0x6c, 0xcc, 0x30, 0xc0, 0x80, 0x7c, 0x20, 0xf0, 0x38, 0x00, 0x88, 0x88, 0x80,
			0x88, 0x80, 0x40, 0x78, 0x90, 0x40, 0x10, 0xa0, 0x40, 0xa8, 0x90, 0x88, 0x88, 0x88, 0x80, 0x08,
			0x40, 0x88, 0x50, 0x50, 0x60, 0x70, 0x40, 0x28, 0xf8, 0xa8, 0x70, 0x00, 0x00, 0xc0, 0x00, 0x6c,
			0x70, 0x90, 0x68, 0x00, 0x20, 0x40, 0x00, 0x20, 0x40, 0x00, 0x80, 0x40, 0x70, 0xf0, 0xf8, 0xf0,
			0x78, 0x70, 0x70, 0x60, 0x70, 0x70, 0x00, 0x40, 0x18, 0x00, 0xc0, 0x20, 0x00, 0xcc, 0xf8, 0x78,
			0xf8, 0xfc, 0xc0, 0x7c, 0xcc, 0xf0, 0x70, 0xcc, 0xfc, 0xc6, 0xcc, 0x78, 0xc0, 0x6c, 0xcc, 0x78,
			0x30, 0x78, 0x10, 0x6c, 0xcc, 0x30, 0xfc, 0xe0, 0x38, 0xe0, 0x60, 0x00, 0x00, 0x68, 0xf0, 0x70,
			0x70, 0x70, 0x40, 0x08, 0x90, 0x40, 0x90, 0x90, 0xe0, 0xa8, 0x90, 0x70, 0xf0, 0x78, 0x80, 0xf0,
			0x30, 0x70, 0x20, 0x50, 0x90, 0x10, 0xf0, 0x28, 0x70, 0x30, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x08, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x03, 0x03, 0x03,
			0x04, 0x03, 0x03, 0x03, 0x03, 0x03, 0x04, 0x03, 0x03, 0x03, 0x03, 0x03, 0x04, 0x03, 0x04, 0x04,
			0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x03, 0x03, 0x03, 0x03, 0x03, 0x04, 0x03, 0x04, 0x04, 0x04,
			0x04, 0x04, 0x04, 0x04, 0x04, 0x03, 0x04, 0x04, 0x04, 0x05, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04,
			0x03, 0x04, 0x04, 0x05, 0x04, 0x04, 0x04, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x04, 0x04, 0x04,
			0x04, 0x04, 0x04, 0x04, 0x04, 0x03, 0x04, 0x04, 0x04, 0x05, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04,
			0x03, 0x04, 0x04, 0x05, 0x04, 0x04, 0x04, 0x03, 0x03, 0x07, 0x03, 0x03, 0x20, 0x7f, 0x01, 0x00,
			0x05, 0x01, 0x01, 0x00, 0x00, 0x40, 0xa0, 0x00, 0x70, 0x00, 0x00, 0x40, 0x40, 0x40, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x20, 0x60, 0x40, 0xe0, 0xe0, 0xa0, 0xf0, 0x60, 0xf0, 0x60, 0x60, 0x00, 0x00,
			0x20, 0x00, 0x80, 0x60, 0x00, 0x60, 0xe0, 0x70, 0xe0, 0xf0, 0xf0, 0x70, 0x90, 0xe0, 0x70, 0x90,
			0x80, 0x88, 0x90, 0x60, 0xe0, 0x60, 0xe0, 0x70, 0xe0, 0x90, 0x90, 0x88, 0x90, 0x90, 0xf0, 0xe0,
			0x00, 0xe0, 0x00, 0x00, 0x00, 0x60, 0xe0, 0x70, 0xe0, 0xf0, 0xf0, 0x70, 0x90, 0xe0, 0x70, 0x90,
			0x80, 0x88, 0x90, 0x60, 0xe0, 0x60, 0xe0, 0x70, 0xe0, 0x90, 0x90, 0x88, 0x90, 0x90, 0xf0, 0xe0,
			0x00, 0x70, 0x00, 0x00, 0x00, 0x40, 0xa0, 0x00, 0xa0, 0x00, 0x00, 0x00, 0x80, 0x20, 0x50, 0x40,
			0x00, 0x00, 0x00, 0x20, 0x90, 0xc0, 0x10, 0x10, 0xa0, 0x80, 0x80, 0x10, 0x90, 0x90, 0x40, 0x40,
			0x40, 0xe0, 0x40, 0x90, 0x00, 0x90, 0x90, 0x80, 0x90, 0x80, 0x80, 0x80, 0x90, 0x40, 0x20, 0xa0,
			0x80, 0xd8, 0xd0, 0x90, 0x90, 0x90, 0x90, 0x80, 0x40, 0x90, 0x90, 0x88, 0x90, 0x90, 0x20, 0x80,
			0x00, 0x20, 0x00, 0x00, 0x00, 0x90, 0x90, 0x80, 0x90, 0x80, 0x80, 0x80, 0x90, 0x40, 0x20, 0xa0,
			0x80, 0xd8, 0xd0, 0x90, 0x90, 0x90, 0x90, 0x80, 0x40, 0x90, 0x90, 0x88, 0x90, 0x90, 0x20, 0x80,
			0x00, 0x32, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x80, 0x20, 0x20, 0xe0,
			0x00, 0xe0, 0x00, 0x40, 0x90, 0x40, 0x60, 0x60, 0xf0, 0xe0, 0xe0, 0x20, 0x60, 0x70, 0x00, 0x00,
			0x80, 0x00, 0x20, 0x20, 0x00, 0x90, 0xe0, 0x80, 0x90, 0xc0, 0xc0, 0xb0, 0xf0, 0x40, 0x20, 0xc0,
			0x80, 0xa8, 0xb0, 0x90, 0x90, 0x90, 0xe0, 0x60, 0x40, 0x90, 0x90, 0xa8, 0x60, 0x60, 0x40, 0x80,
			0x00, 0x20, 0x00, 0x00, 0x00, 0x90, 0xe0, 0x80, 0x90, 0xc0, 0xc0, 0xb0, 0xf0, 0x40, 0x20, 0xc0,
			0x80, 0xa8, 0xb0, 0x90, 0x90, 0x90, 0xe0, 0x60, 0x40, 0x90, 0x90, 0xa8, 0x60, 0x60, 0x40, 0x80,
			0x00, 0x54, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x80, 0x20, 0x50, 0x40,
			0x40, 0x00, 0x00, 0x80, 0x90, 0x40, 0x80, 0x10, 0x20, 0x10, 0x90, 0x40, 0x90, 0x10, 0x40, 0x40,
			0x40, 0xe0, 0x40, 0x00, 0x00, 0xf0, 0x90, 0x80, 0x90, 0x80, 0x80, 0x90, 0x90, 0x40, 0x20, 0xa0,
			0x80, 0x88, 0x90, 0x90, 0xe0, 0xa0, 0xa0, 0x10, 0x40, 0x90, 0x60, 0xd8, 0x90, 0x20, 0x80, 0x80,
			0x00, 0x20, 0x00, 0x00, 0x00, 0xf0, 0x90, 0x80, 0x90, 0x80, 0x80, 0x90, 0x90, 0x40, 0x20, 0xa0,
			0x80, 0x88, 0x90, 0x90, 0xe0, 0xa0, 0xa0, 0x10, 0x40, 0x90, 0x60, 0xd8, 0x90, 0x20, 0x80, 0x80,
			0x00, 0x98, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x40, 0x40, 0x00, 0x00,
			0x80, 0x00, 0x40, 0x80, 0x60, 0xe0, 0xf0, 0xe0, 0x20, 0xe0, 0x60, 0x40, 0x60, 0x60, 0x00, 0x80,
			0x20, 0x00, 0x80, 0x20, 0x00, 0x90, 0xe0, 0x70, 0xe0, 0xf0, 0x80, 0x70, 0x90, 0xe0, 0xc0, 0x90,
			0xf0, 0x88, 0x90, 0x60, 0x80, 0x50, 0x90, 0xe0, 0x40, 0x60, 0x60, 0x88, 0x90, 0x20, 0xf0, 0xe0,
			0x00, 0xe0, 0x00, 0x00, 0x00, 0x90, 0xe0, 0x70, 0xe0, 0xf0, 0x80, 0x70, 0x90, 0xe0, 0xc0, 0x90,
			0xf0, 0x88, 0x90, 0x60, 0x80, 0x50, 0x90, 0xe0, 0x40, 0x60, 0x60, 0x88, 0x90, 0x20, 0xf0, 0xe0,
			0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x05, 0x02, 0x03, 0x06, 0x06, 0x06, 0x05, 0x01, 0x03, 0x04, 0x05, 0x05,
			0x02, 0x05, 0x01, 0x04, 0x06, 0x04, 0x07, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x02, 0x02,
			0x05, 0x05, 0x05, 0x05, 0x05, 0x08, 0x06, 0x07, 0x07, 0x06, 0x06, 0x08, 0x08, 0x04, 0x07, 0x09,
			0x07, 0x0a, 0x08, 0x08, 0x06, 0x09, 0x07, 0x05, 0x06, 0x08, 0x08, 0x0c, 0x08, 0x08, 0x06, 0x03,
			0x07, 0x03, 0x06, 0x09, 0x05, 0x05, 0x05, 0x04, 0x05, 0x04, 0x05, 0x05, 0x06, 0x03, 0x04, 0x06,
			0x03, 0x09, 0x06, 0x04, 0x05, 0x05, 0x04, 0x05, 0x04, 0x06, 0x06, 0x09, 0x06, 0x06, 0x04, 0x07,
			0x03, 0x05, 0x0e, 0x0b, 0x20, 0x7f, 0x02, 0x00, 0x0a, 0x01, 0x01, 0x00, 0x00, 0x00, 0x40, 0x00,
			0xa0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x20, 0x00, 0x80, 0x00, 0x20, 0x00, 0x40, 0x00,
			0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x78, 0x00, 0x60, 0x00,
			0x78, 0x00, 0x78, 0x00, 0x18, 0x00, 0xfc, 0x00, 0x78, 0x00, 0xfc, 0x00, 0x78, 0x00, 0x78, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x18, 0x00,
			0xf8, 0x00, 0x3c, 0x00, 0xf8, 0x00, 0xfc, 0x00, 0xfc, 0x00, 0x3c, 0x00, 0xf7, 0x00, 0xf0, 0x00,
			0x1e, 0x00, 0xf7, 0x00, 0xf0, 0x00, 0xe1, 0xc0, 0xe7, 0x00, 0x3c, 0x00, 0xf8, 0x00, 0x3c, 0x00,
			0xf8, 0x00, 0x70, 0x00, 0xfc, 0x00, 0xf7, 0x00, 0xf7, 0x00, 0xef, 0x70, 0xf7, 0x00, 0xf7, 0x00,
			0xfc, 0x00, 0xe0, 0x00, 0x10, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0xc0, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x40, 0x00,
			0x10, 0x00, 0xc0, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0xfe, 0x00, 0x80, 0x00, 0x00, 0x00, 0x06, 0x00, 0x14, 0x00, 0x00, 0x00, 0x40, 0x00,
			0xa0, 0x00, 0x50, 0x00, 0x70, 0x00, 0xa8, 0x00, 0x50, 0x00, 0x80, 0x00, 0x40, 0x00, 0x20, 0x00,
			0xa8, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0xcc, 0x00, 0xe0, 0x00,
			0xcc, 0x00, 0xcc, 0x00, 0x38, 0x00, 0xc0, 0x00, 0xc4, 0x00, 0xcc, 0x00, 0xcc, 0x00, 0xcc, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x88, 0x00, 0x00, 0x00, 0x18, 0x00,
			0x64, 0x00, 0x72, 0x00, 0x64, 0x00, 0x64, 0x00, 0x64, 0x00, 0x72, 0x00, 0x62, 0x00, 0x60, 0x00,
			0x0c, 0x00, 0x62, 0x00, 0x60, 0x00, 0x71, 0x80, 0x72, 0x00, 0x72, 0x00, 0x6c, 0x00, 0x72, 0x00,
			0x64, 0x00, 0xc8, 0x00, 0xb4, 0x00, 0x62, 0x00, 0x62, 0x00, 0x66, 0x20, 0x62, 0x00, 0x62, 0x00,
			0x8c, 0x00, 0x80, 0x00, 0x28, 0x00, 0x20, 0x00, 0x04, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x40, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x28, 0x00, 0x08, 0x00, 0x40, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x40, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x92, 0x00, 0xc0, 0x00, 0x20, 0x00, 0xfb, 0x7c, 0x1e, 0x00, 0x00, 0x00, 0x40, 0x00,
			0x00, 0x00, 0xf8, 0x00, 0xd8, 0x00, 0x50, 0x00, 0x20, 0x00, 0x80, 0x00, 0x80, 0x00, 0x10, 0x00,
			0x70, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0xcc, 0x00, 0x60, 0x00,
			0x0c, 0x00, 0x18, 0x00, 0x58, 0x00, 0xc0, 0x00, 0xc0, 0x00, 0x18, 0x00, 0xcc, 0x00, 0xcc, 0x00,
			0xc0, 0x00, 0x40, 0x00, 0x60, 0x00, 0xf8, 0x00, 0x30, 0x00, 0x10, 0x00, 0x00, 0x00, 0x3c, 0x00,
			0x64, 0x00, 0xe0, 0x00, 0x62, 0x00, 0x60, 0x00, 0x60, 0x00, 0xe0, 0x00, 0x62, 0x00, 0x60, 0x00,
			0x0c, 0x00, 0x64, 0x00, 0x60, 0x00, 0x7b, 0x80, 0x7a, 0x00, 0xe1, 0x00, 0x6c, 0x00, 0xe1, 0x00,
			0x64, 0x00, 0xe0, 0x00, 0x30, 0x00, 0x62, 0x00, 0x76, 0x00, 0x77, 0x60, 0x34, 0x00, 0x34, 0x00,
			0x18, 0x00, 0x80, 0x00, 0x4c, 0x00, 0x20, 0x00, 0x0c, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x60, 0x00,
			0x70, 0x00, 0x60, 0x00, 0x70, 0x00, 0x60, 0x00, 0x20, 0x00, 0x30, 0x00, 0x70, 0x00, 0xc0, 0x00,
			0x30, 0x00, 0x4c, 0x00, 0x40, 0x00, 0xb6, 0x00, 0xb0, 0x00, 0x60, 0x00, 0xf0, 0x00, 0x78, 0x00,
			0xb0, 0x00, 0x70, 0x00, 0xf0, 0x00, 0xd8, 0x00, 0xdc, 0x00, 0xdb, 0x80, 0xdc, 0x00, 0xdc, 0x00,
			0xf0, 0x00, 0x38, 0x00, 0x60, 0x00, 0xf8, 0x00, 0x7f, 0xf8, 0xfc, 0x00, 0x00, 0x00, 0x40, 0x00,
			0x00, 0x00, 0x50, 0x00, 0x88, 0x00, 0x30, 0x00, 0x50, 0x00, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00,
			0xa8, 0x00, 0xf8, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x20, 0x00, 0xcc, 0x00, 0x60, 0x00,
			0x38, 0x00, 0x38, 0x00, 0xfc, 0x00, 0x78, 0x00, 0xf8, 0x00, 0x38, 0x00, 0x78, 0x00, 0xcc, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x08, 0x00, 0x20, 0x00, 0x00, 0x00, 0x34, 0x00,
			0x78, 0x00, 0xe0, 0x00, 0x62, 0x00, 0x78, 0x00, 0x78, 0x00, 0xe0, 0x00, 0x7e, 0x00, 0x60, 0x00,
			0x0c, 0x00, 0x6c, 0x00, 0x60, 0x00, 0x5a, 0x80, 0x5e, 0x00, 0xe1, 0x00, 0x78, 0x00, 0xe1, 0x00,
			0x78, 0x00, 0x70, 0x00, 0x30, 0x00, 0x62, 0x00, 0x34, 0x00, 0x33, 0x40, 0x18, 0x00, 0x18, 0x00,
			0x30, 0x00, 0x80, 0x00, 0x9e, 0x00, 0x20, 0x00, 0xd8, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x90, 0x00,
			0x48, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x70, 0x00, 0x48, 0x00, 0x48, 0x00, 0x40, 0x00,
			0x10, 0x00, 0x58, 0x00, 0x40, 0x00, 0x49, 0x00, 0x48, 0x00, 0x90, 0x00, 0x48, 0x00, 0x90, 0x00,
			0x50, 0x00, 0xc8, 0x00, 0x40, 0x00, 0x48, 0x00, 0x48, 0x00, 0x49, 0x00, 0x48, 0x00, 0x48, 0x00,
			0xa0, 0x00, 0x7c, 0x00, 0xe0, 0x00, 0x70, 0x00, 0x0f, 0xe0, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0xf8, 0x00, 0xd8, 0x00, 0x68, 0x00, 0x98, 0x00, 0x00, 0x00, 0x40, 0x00, 0x20, 0x00,
			0x20, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0xcc, 0x00, 0x60, 0x00,
			0x60, 0x00, 0x1c, 0x00, 0x18, 0x00, 0x0c, 0x00, 0xcc, 0x00, 0x30, 0x00, 0xcc, 0x00, 0x7c, 0x00,
			0xc0, 0x00, 0x40, 0x00, 0x60, 0x00, 0xf8, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x00,
			0x64, 0x00, 0xe0, 0x00, 0x62, 0x00, 0x60, 0x00, 0x60, 0x00, 0xe7, 0x00, 0x62, 0x00, 0x60, 0x00,
			0xcc, 0x00, 0x72, 0x00, 0x60, 0x00, 0x5e, 0x80, 0x4e, 0x00, 0xe1, 0x00, 0x60, 0x00, 0xed, 0x00,
			0x6c, 0x00, 0x38, 0x00, 0x30, 0x00, 0x62, 0x00, 0x3c, 0x00, 0x3b, 0xc0, 0x34, 0x00, 0x18, 0x00,
			0x60, 0x00, 0x80, 0x00, 0x7c, 0x00, 0x20, 0x00, 0xf0, 0x00, 0x38, 0x00, 0x00, 0x00, 0x70, 0x00,
			0x48, 0x00, 0x80, 0x00, 0x90, 0x00, 0xe0, 0x00, 0x20, 0x00, 0x48, 0x00, 0x48, 0x00, 0x40, 0x00,
			0x10, 0x00, 0x70, 0x00, 0x40, 0x00, 0x49, 0x00, 0x48, 0x00, 0x90, 0x00, 0x48, 0x00, 0x90, 0x00,
			0x40, 0x00, 0x20, 0x00, 0x40, 0x00, 0x48, 0x00, 0x48, 0x00, 0x49, 0x00, 0x30, 0x00, 0x48, 0x00,
			0x60, 0x00, 0x74, 0x00, 0x60, 0x00, 0x50, 0x00, 0x03, 0x80, 0x33, 0x00, 0x00, 0x00, 0x40, 0x00,
			0x00, 0x00, 0x50, 0x00, 0x70, 0x00, 0x90, 0x00, 0x68, 0x00, 0x00, 0x00, 0x20, 0x00, 0x40, 0x00,
			0x00, 0x00, 0x20, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0xcc, 0x00, 0x60, 0x00,
			0x64, 0x00, 0xcc, 0x00, 0x18, 0x00, 0xcc, 0x00, 0xcc, 0x00, 0x30, 0x00, 0xcc, 0x00, 0x0c, 0x00,
			0x00, 0x00, 0x40, 0x00, 0x18, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x20, 0x00, 0x00, 0x00, 0x62, 0x00,
			0x64, 0x00, 0x72, 0x00, 0x64, 0x00, 0x64, 0x00, 0x60, 0x00, 0x72, 0x00, 0x62, 0x00, 0x60, 0x00,
			0xcc, 0x00, 0x61, 0x00, 0x62, 0x00, 0x4c, 0x80, 0x46, 0x00, 0x72, 0x00, 0x60, 0x00, 0x72, 0x00,
			0x6c, 0x00, 0x98, 0x00, 0x30, 0x00, 0x62, 0x00, 0x18, 0x00, 0x1d, 0x80, 0x62, 0x00, 0x18, 0x00,
			0xc4, 0x00, 0xe0, 0x00, 0x38, 0x00, 0xe0, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 0x00,
			0x48, 0x00, 0x90, 0x00, 0x90, 0x00, 0x80, 0x00, 0x20, 0x00, 0x48, 0x00, 0x48, 0x00, 0x40, 0x00,
			0x10, 0x00, 0x58, 0x00, 0x40, 0x00, 0x49, 0x00, 0x48, 0x00, 0x90, 0x00, 0x48, 0x00, 0x90, 0x00,
			0x40, 0x00, 0x98, 0x00, 0x50, 0x00, 0x48, 0x00, 0x30, 0x00, 0x2a, 0x00, 0x58, 0x00, 0x30, 0x00,
			0x50, 0x00, 0x74, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x05, 0x40, 0x11, 0x80, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x78, 0x00, 0xf0, 0x00,
			0xfc, 0x00, 0x78, 0x00, 0x3c, 0x00, 0x78, 0x00, 0x78, 0x00, 0x30, 0x00, 0x78, 0x00, 0x78, 0x00,
			0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0x00,
			0xf8, 0x00, 0x3c, 0x00, 0xf8, 0x00, 0xfc, 0x00, 0xf0, 0x00, 0x3c, 0x00, 0xf7, 0x00, 0xf0, 0x00,
			0x78, 0x00, 0xf3, 0x80, 0xfe, 0x00, 0xed, 0xc0, 0xe3, 0x00, 0x3c, 0x00, 0xf0, 0x00, 0x3d, 0x80,
			0xf6, 0x00, 0x70, 0x00, 0x78, 0x00, 0x3c, 0x00, 0x18, 0x00, 0x08, 0x80, 0xf7, 0x00, 0x3c, 0x00,
			0xfc, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x00,
			0xf0, 0x00, 0x60, 0x00, 0x78, 0x00, 0x60, 0x00, 0x70, 0x00, 0x38, 0x00, 0xec, 0x00, 0xe0, 0x00,
			0x10, 0x00, 0xcc, 0x00, 0xe0, 0x00, 0xe4, 0x80, 0xe4, 0x00, 0x60, 0x00, 0x70, 0x00, 0x70, 0x00,
			0xe0, 0x00, 0x70, 0x00, 0x20, 0x00, 0x3c, 0x00, 0x10, 0x00, 0x14, 0x00, 0xec, 0x00, 0x10, 0x00,
			0xf0, 0x00, 0xfa, 0x00, 0x60, 0x00, 0x00, 0x00, 0x02, 0x80, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x10, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa0, 0x00,
			0x00, 0x00, 0x10, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x10, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x38, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x06, 0x0a, 0x00,
			0x0b, 0x10, 0x10, 0x07, 0x07, 0x07, 0x00, 0x00, 0x05, 0x06, 0x05, 0x10, 0x0f, 0x0a, 0x0d, 0x0d,
			0x0f, 0x0d, 0x0e, 0x0d, 0x0d, 0x0e, 0x05, 0x05, 0x00, 0x00, 0x00, 0x0d, 0x0e, 0x10, 0x10, 0x10,
			0x10, 0x10, 0x0f, 0x10, 0x10, 0x0a, 0x0d, 0x10, 0x0f, 0x10, 0x10, 0x10, 0x0e, 0x10, 0x10, 0x0d,
			0x0e, 0x10, 0x10, 0x10, 0x10, 0x0f, 0x0f, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x0e, 0x0c,
			0x0f, 0x0d, 0x0b, 0x0c, 0x10, 0x08, 0x0a, 0x10, 0x08, 0x10, 0x10, 0x0c, 0x0f, 0x0e, 0x0c, 0x0c,
			0x09, 0x10, 0x10, 0x10, 0x0f, 0x10, 0x0d, 0x20, 0x7a, 0x02, 0x00, 0x10, 0x01, 0x01, 0x00, 0x00,
			0x00, 0x70, 0x00, 0xe3, 0x80, 0x00, 0x00, 0x0c, 0x00, 0x3c, 0x06, 0x07, 0x00, 0x38, 0x00, 0x1c,
			0x00, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x0f,
			0xc0, 0x0c, 0x00, 0x1f, 0x80, 0x1f, 0x80, 0x00, 0xe0, 0x7f, 0xe0, 0x07, 0xc0, 0xff, 0xf0, 0x0f,
			0x00, 0x0f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x80, 0x00,
			0x00, 0x01, 0x80, 0xff, 0xe0, 0x07, 0xe4, 0xff, 0xc0, 0xff, 0xfc, 0xff, 0xfc, 0x07, 0xe4, 0xf8,
			0x3e, 0xff, 0x80, 0x0f, 0xf0, 0xfc, 0x3e, 0xff, 0x00, 0xf0, 0x0f, 0xf0, 0x1f, 0x07, 0xe0, 0xff,
			0xc0, 0x07, 0xe0, 0xff, 0xe0, 0x1f, 0x90, 0xff, 0xf8, 0xfe, 0x3f, 0xfe, 0x1f, 0xfb, 0xe7, 0xfc,
			0x1e, 0xfc, 0x7c, 0xff, 0xfc, 0x00, 0x00, 0x01, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x01, 0xf0, 0x00, 0x00, 0x0f, 0x80, 0x00, 0x00, 0xf8,
			0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x00, 0xe3, 0x80, 0x00, 0x00, 0x0c, 0x00, 0x66,
			0x0c, 0x1c, 0xc0, 0x38, 0x00, 0x38, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x06, 0x30, 0x30, 0x1c, 0x00, 0x60, 0xe0, 0x60, 0xe0, 0x01, 0xe0, 0x7f,
			0xc0, 0x1c, 0x30, 0xff, 0xe0, 0x30, 0xc0, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x60, 0xe0, 0x00, 0x00, 0x03, 0xc0, 0x38, 0x38, 0x1c, 0x1c, 0x38, 0x38, 0x38,
			0x1c, 0x38, 0x1c, 0x1c, 0x1c, 0x70, 0x1c, 0x1c, 0x00, 0x01, 0xc0, 0x70, 0x18, 0x38, 0x00, 0x78,
			0x0e, 0x78, 0x06, 0x1c, 0x38, 0x38, 0x70, 0x1c, 0x38, 0x38, 0x38, 0x60, 0x70, 0xe7, 0x38, 0x38,
			0x0c, 0x78, 0x06, 0x71, 0xc2, 0x78, 0x0c, 0x38, 0x30, 0xe0, 0x3c, 0x00, 0x00, 0x07, 0xf0, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00,
			0x00, 0x18, 0xc0, 0x00, 0xe0, 0x38, 0x00, 0x38, 0x00, 0x03, 0x80, 0x38, 0x00, 0x38, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x00, 0xc1,
			0x80, 0x00, 0x00, 0x3f, 0x00, 0xc3, 0x18, 0x38, 0x60, 0x18, 0x00, 0x70, 0x00, 0x38, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x60, 0x18, 0xfc, 0x00, 0xc0,
			0x70, 0xc0, 0x70, 0x02, 0xe0, 0x40, 0x00, 0x30, 0x78, 0xc0, 0xc0, 0x60, 0x60, 0x60, 0x30, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x70, 0x1f, 0xc0, 0x03, 0xe0, 0x38,
			0x1c, 0x38, 0x0c, 0x38, 0x1c, 0x38, 0x0c, 0x38, 0x0c, 0x38, 0x0c, 0x70, 0x1c, 0x1c, 0x00, 0x01,
			0xc0, 0x70, 0x30, 0x38, 0x00, 0x78, 0x1e, 0x7c, 0x06, 0x38, 0x1c, 0x38, 0x38, 0x38, 0x1c, 0x38,
			0x1c, 0xc0, 0x30, 0xc7, 0x18, 0x38, 0x0c, 0x38, 0x04, 0x71, 0xc2, 0x3c, 0x18, 0x38, 0x20, 0xc0,
			0x78, 0x00, 0x00, 0x0e, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70,
			0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x39, 0xc0, 0x1f, 0x80, 0x38, 0x00, 0x38, 0x00, 0x03,
			0x80, 0x38, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0xf8, 0x00, 0x41, 0x00, 0x00, 0x00, 0xcc, 0xc0, 0xc3, 0x30, 0x38, 0x60, 0x10,
			0x00, 0x70, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x18, 0xe0, 0x1c, 0x1c, 0x00, 0xf0, 0x70, 0xf0, 0x70, 0x04, 0xe0, 0x40, 0x00, 0x60, 0x70, 0x81,
			0x80, 0x70, 0x60, 0xe0, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0,
			0x70, 0x60, 0x30, 0x06, 0xe0, 0x38, 0x1c, 0x78, 0x04, 0x38, 0x1e, 0x38, 0x04, 0x38, 0x04, 0x78,
			0x04, 0x70, 0x1c, 0x1c, 0x00, 0x01, 0xc0, 0x70, 0x60, 0x38, 0x00, 0x7c, 0x1e, 0x7e, 0x06, 0x78,
			0x1e, 0x38, 0x38, 0x78, 0x1e, 0x38, 0x1c, 0xe0, 0x10, 0x87, 0x08, 0x38, 0x0c, 0x3c, 0x0c, 0x79,
			0xe6, 0x1e, 0x30, 0x1c, 0x60, 0x80, 0xf0, 0x00, 0x00, 0x0c, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x38, 0x00, 0x71,
			0xc0, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0xfb, 0xc0, 0x1e, 0x60, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x22, 0x00, 0x00, 0x00, 0xcc,
			0xc0, 0x66, 0x60, 0x3c, 0xc0, 0x20, 0x00, 0xe0, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0xe0, 0x1c, 0x1c, 0x00, 0x70, 0x70, 0x70, 0x70, 0x08,
			0xe0, 0x40, 0x00, 0xe0, 0x00, 0x03, 0x00, 0x7c, 0xc0, 0xe0, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x70, 0xcf, 0x98, 0x04, 0x70, 0x38, 0x1c, 0x70, 0x00, 0x38,
			0x0e, 0x38, 0x40, 0x38, 0x40, 0x70, 0x00, 0x70, 0x1c, 0x1c, 0x00, 0x01, 0xc0, 0x70, 0xc0, 0x38,
			0x00, 0x7c, 0x3e, 0x6f, 0x06, 0x70, 0x0e, 0x38, 0x38, 0x70, 0x0e, 0x38, 0x1c, 0xf8, 0x00, 0x07,
			0x00, 0x38, 0x0c, 0x1c, 0x08, 0x38, 0xe6, 0x0f, 0x60, 0x1c, 0x40, 0x01, 0xe0, 0x00, 0x00, 0x0c,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x77, 0x80, 0x0f, 0x80, 0x0f,
			0x70, 0x0f, 0x80, 0xff, 0x00, 0xe0, 0xe0, 0x3b, 0xc0, 0xf8, 0x00, 0x0f, 0x80, 0x39, 0xfc, 0x38,
			0x00, 0xfb, 0x38, 0xf9, 0xe0, 0x1f, 0x00, 0x3c, 0x70, 0x71, 0xe0, 0xfb, 0x80, 0x1e, 0x80, 0xff,
			0x00, 0xf8, 0xf8, 0xfc, 0x1e, 0xf3, 0xcf, 0xfc, 0x78, 0xfe, 0x3f, 0x7f, 0xf0, 0x00, 0x00, 0xf8,
			0x00, 0x00, 0x00, 0x00, 0x00, 0xec, 0x00, 0x3c, 0xc0, 0x1f, 0x80, 0x00, 0x00, 0xe0, 0x00, 0x1c,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0xe0, 0x1c, 0x1c,
			0x00, 0x00, 0xe0, 0x00, 0xe0, 0x10, 0xe0, 0x5f, 0x00, 0xe7, 0x80, 0x06, 0x00, 0x3f, 0x80, 0xe0,
			0x38, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xd9, 0x98, 0x0c,
			0x70, 0x38, 0x38, 0xf0, 0x00, 0x38, 0x0f, 0x38, 0xc0, 0x38, 0xc0, 0xf0, 0x00, 0x70, 0x1c, 0x1c,
			0x00, 0x01, 0xc0, 0x71, 0x80, 0x38, 0x00, 0x6e, 0x2e, 0x67, 0x86, 0xf0, 0x0f, 0x38, 0x38, 0xf0,
			0x0f, 0x38, 0x1c, 0x7f, 0x00, 0x07, 0x00, 0x38, 0x0c, 0x1e, 0x18, 0x3c, 0xe4, 0x07, 0xc0, 0x0e,
			0xc0, 0x03, 0xc0, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60,
			0xc0, 0x78, 0xe0, 0x38, 0x60, 0x38, 0xf0, 0x30, 0x60, 0x38, 0x00, 0xe0, 0xe0, 0x3c, 0x70, 0x38,
			0x00, 0x03, 0x80, 0x38, 0x60, 0x38, 0x00, 0x3f, 0xbc, 0x3e, 0x30, 0x71, 0xc0, 0x38, 0x38, 0xe0,
			0xe0, 0x3e, 0x60, 0x61, 0x80, 0x38, 0x00, 0x38, 0x38, 0x38, 0x0c, 0xe1, 0x87, 0x38, 0x20, 0x1c,
			0x08, 0x60, 0xe0, 0x00, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x01, 0x80, 0x0f,
			0x3f, 0x00, 0x00, 0xe0, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x00,
			0x00, 0x00, 0xc0, 0xe0, 0x1c, 0x1c, 0x00, 0x01, 0xc0, 0x07, 0xc0, 0x20, 0xe0, 0x60, 0xc0, 0xf8,
			0x60, 0x0e, 0x00, 0x1f, 0xc0, 0x60, 0x78, 0x70, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x03, 0xc0, 0xd9, 0x98, 0x08, 0x38, 0x3f, 0xf0, 0xf0, 0x00, 0x38, 0x0f, 0x3f, 0xc0, 0x3f,
			0xc0, 0xf0, 0x00, 0x7f, 0xfc, 0x1c, 0x00, 0x01, 0xc0, 0x73, 0x80, 0x38, 0x00, 0x6e, 0x6e, 0x63,
			0xc6, 0xf0, 0x0f, 0x38, 0x70, 0xf0, 0x0f, 0x38, 0x38, 0x1f, 0xe0, 0x07, 0x00, 0x38, 0x0c, 0x0e,
			0x10, 0x3c, 0xe4, 0x03, 0x80, 0x0e, 0x80, 0x07, 0x80, 0x00, 0x00, 0x7f, 0x80, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0xe0, 0x70, 0x70, 0x70, 0xe0, 0x70, 0x70, 0x60, 0x70, 0x38,
			0x00, 0xe0, 0xe0, 0x38, 0x38, 0x38, 0x00, 0x03, 0x80, 0x38, 0xc0, 0x38, 0x00, 0x3d, 0xee, 0x3c,
			0x38, 0xe0, 0xe0, 0x38, 0x1c, 0xc0, 0xe0, 0x3c, 0xe0, 0xe0, 0x80, 0x38, 0x00, 0x38, 0x38, 0x1c,
			0x18, 0x71, 0x8e, 0x1c, 0x40, 0x1c, 0x10, 0x41, 0xc0, 0x00, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x3f, 0x00, 0x03, 0x00, 0x1f, 0x8e, 0x00, 0x00, 0xe0, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x01, 0x80, 0xe0, 0x1c, 0x1c, 0x00, 0x07, 0x00, 0x00,
			0xf0, 0x40, 0xe0, 0x40, 0x60, 0xf0, 0x30, 0x0c, 0x00, 0x73, 0xe0, 0x30, 0xf8, 0x00, 0x00, 0x70,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0xd9, 0x98, 0x18, 0x38, 0x38, 0x1c, 0xf0,
			0x00, 0x38, 0x0f, 0x38, 0xc0, 0x38, 0xc0, 0xf0, 0x00, 0x70, 0x1c, 0x1c, 0x00, 0x01, 0xc0, 0x77,
			0xc0, 0x38, 0x00, 0x67, 0x4e, 0x61, 0xe6, 0xf0, 0x0f, 0x3f, 0xc0, 0xf0, 0x0f, 0x3f, 0xe0, 0x03,
			0xf0, 0x07, 0x00, 0x38, 0x0c, 0x0f, 0x30, 0x1e, 0xf4, 0x03, 0xc0, 0x07, 0x00, 0x0f, 0x00, 0x00,
			0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x70, 0x38, 0xe0,
			0x00, 0xe0, 0x70, 0xe0, 0x70, 0x38, 0x00, 0x71, 0xc0, 0x38, 0x38, 0x38, 0x00, 0x03, 0x80, 0x39,
			0x80, 0x38, 0x00, 0x39, 0xce, 0x38, 0x38, 0xe0, 0xe0, 0x38, 0x1c, 0xc0, 0xe0, 0x38, 0x00, 0xf0,
			0x00, 0x38, 0x00, 0x38, 0x38, 0x1c, 0x10, 0x73, 0xce, 0x0e, 0x80, 0x0e, 0x10, 0x03, 0x80, 0x00,
			0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xc0, 0x06, 0x78, 0x7b, 0xcc, 0x00, 0x00, 0xe0,
			0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0xe0,
			0x1c, 0x1c, 0x00, 0x1c, 0x00, 0x00, 0x78, 0x80, 0xe0, 0x00, 0x70, 0xe0, 0x38, 0x1c, 0x00, 0xe0,
			0xf0, 0x0f, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0xd9,
			0x98, 0x1f, 0xfc, 0x38, 0x0e, 0xf0, 0x00, 0x38, 0x0f, 0x38, 0x40, 0x38, 0x40, 0xf0, 0x7f, 0x70,
			0x1c, 0x1c, 0x00, 0x01, 0xc0, 0x7d, 0xe0, 0x38, 0x00, 0x67, 0xce, 0x60, 0xf6, 0xf0, 0x0f, 0x38,
			0x00, 0xf0, 0x0f, 0x38, 0x38, 0x00, 0x78, 0x07, 0x00, 0x38, 0x0c, 0x07, 0x20, 0x1e, 0xfc, 0x07,
			0xe0, 0x07, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x0f, 0xe0, 0x70, 0x38, 0xe0, 0x00, 0xe0, 0x70, 0xff, 0xf0, 0x38, 0x00, 0x3f, 0x00, 0x38,
			0x38, 0x38, 0x00, 0x03, 0x80, 0x3b, 0x80, 0x38, 0x00, 0x39, 0xce, 0x38, 0x38, 0xe0, 0xe0, 0x38,
			0x1c, 0xc0, 0xe0, 0x38, 0x00, 0x7e, 0x00, 0x38, 0x00, 0x38, 0x38, 0x0e, 0x30, 0x3b, 0xdc, 0x07,
			0x00, 0x0e, 0x20, 0x07, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0xe0, 0x0c,
			0xcc, 0xf1, 0xe8, 0x00, 0x00, 0xe0, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x06, 0x00, 0xe0, 0x1c, 0x1c, 0x00, 0x30, 0x00, 0x70, 0x38, 0xff, 0xfc, 0x70,
			0x70, 0xe0, 0x38, 0x1c, 0x00, 0xc0, 0x70, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x08, 0x00, 0xce, 0xf0, 0x30, 0x1c, 0x38, 0x0e, 0x70, 0x00, 0x38, 0x0e, 0x38,
			0x00, 0x38, 0x00, 0x70, 0x1c, 0x70, 0x1c, 0x1c, 0x00, 0x71, 0xc0, 0x78, 0xf0, 0x38, 0x00, 0x63,
			0x8e, 0x60, 0x7e, 0x70, 0x0e, 0x38, 0x00, 0x70, 0x0e, 0x38, 0x1c, 0x80, 0x38, 0x07, 0x00, 0x38,
			0x0c, 0x07, 0xe0, 0x1f, 0x78, 0x0c, 0xf0, 0x07, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x7c, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0xe0, 0x70, 0x38, 0xe0, 0x00, 0xe0, 0x70, 0xe0,
			0x00, 0x38, 0x00, 0x70, 0x00, 0x38, 0x38, 0x38, 0x00, 0x03, 0x80, 0x3d, 0xc0, 0x38, 0x00, 0x39,
			0xce, 0x38, 0x38, 0xe0, 0xe0, 0x38, 0x1c, 0xc0, 0xe0, 0x38, 0x00, 0x1f, 0x80, 0x38, 0x00, 0x38,
			0x38, 0x0e, 0x20, 0x3e, 0x7c, 0x07, 0x80, 0x07, 0x20, 0x0e, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00,
			0x00, 0x00, 0x00, 0xcc, 0xe0, 0x19, 0x86, 0xf0, 0xf8, 0x00, 0x00, 0xe0, 0x00, 0x1c, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0xe0, 0x1c, 0x1c, 0x00, 0x60,
			0x10, 0xf0, 0x38, 0x00, 0xe0, 0xf0, 0x70, 0x60, 0x38, 0x1c, 0x00, 0xc0, 0x70, 0x70, 0x30, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x60, 0x00, 0x20, 0x0e, 0x38,
			0x0e, 0x78, 0x00, 0x38, 0x1e, 0x38, 0x04, 0x38, 0x00, 0x78, 0x1c, 0x70, 0x1c, 0x1c, 0x00, 0xf1,
			0xc0, 0x70, 0x78, 0x38, 0x04, 0x63, 0x8e, 0x60, 0x3e, 0x78, 0x1e, 0x38, 0x00, 0x73, 0x9e, 0x38,
			0x1c, 0x80, 0x18, 0x07, 0x00, 0x38, 0x0c, 0x03, 0xc0, 0x0f, 0x78, 0x18, 0x78, 0x07, 0x00, 0x78,
			0x04, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xe0, 0x70,
			0x38, 0xe0, 0x00, 0xe0, 0x70, 0xe0, 0x00, 0x38, 0x00, 0x3f, 0x80, 0x38, 0x38, 0x38, 0x00, 0x03,
			0x80, 0x38, 0xe0, 0x38, 0x00, 0x39, 0xce, 0x38, 0x38, 0xe0, 0xe0, 0x38, 0x38, 0xe0, 0xe0, 0x38,
			0x00, 0x83, 0xc0, 0x38, 0x00, 0x38, 0x38, 0x07, 0x60, 0x1e, 0x78, 0x09, 0xc0, 0x07, 0x40, 0x1c,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xcc, 0xc0, 0x31, 0x86, 0xf0, 0x79, 0x00,
			0x00, 0xe0, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18,
			0x00, 0x60, 0x18, 0x1c, 0x00, 0xc0, 0x30, 0xc0, 0x30, 0x00, 0xe0, 0xc0, 0x60, 0x70, 0x30, 0x1c,
			0x00, 0xe0, 0x60, 0xf0, 0x60, 0x70, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x1f, 0xc0, 0x60, 0x0e, 0x38, 0x0e, 0x38, 0x04, 0x38, 0x1c, 0x38, 0x0c, 0x38, 0x00, 0x38,
			0x1c, 0x70, 0x1c, 0x1c, 0x00, 0x81, 0xc0, 0x70, 0x3c, 0x38, 0x0c, 0x61, 0x0e, 0x60, 0x1e, 0x38,
			0x1c, 0x38, 0x00, 0x3c, 0x5c, 0x38, 0x1c, 0xc0, 0x10, 0x07, 0x00, 0x38, 0x0c, 0x03, 0xc0, 0x0f,
			0x70, 0x30, 0x3c, 0x07, 0x00, 0xf0, 0x0c, 0x00, 0x00, 0xcf, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0xe0, 0xe0, 0x70, 0x70, 0x70, 0x00, 0x70, 0x70, 0x60, 0x30, 0x38, 0x00, 0xe0,
			0xe0, 0x38, 0x38, 0x38, 0x00, 0x03, 0x80, 0x38, 0x70, 0x38, 0x00, 0x39, 0xce, 0x38, 0x38, 0xe0,
			0xe0, 0x3c, 0x70, 0x71, 0xe0, 0x38, 0x00, 0xc1, 0xc0, 0x38, 0x00, 0x38, 0x38, 0x07, 0xc0, 0x1e,
			0x78, 0x10, 0xe0, 0x03, 0xc0, 0x38, 0x10, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f,
			0x00, 0x60, 0xcc, 0x78, 0x3f, 0x00, 0x00, 0x70, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70,
			0x00, 0x00, 0x00, 0xe0, 0x00, 0x30, 0x00, 0x30, 0x30, 0x1c, 0x00, 0xff, 0xf0, 0x60, 0x60, 0x00,
			0xe0, 0x60, 0xc0, 0x38, 0x60, 0x1c, 0x00, 0x70, 0xc0, 0x60, 0xc0, 0x70, 0x00, 0x70, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0xe0, 0x0f, 0x38, 0x1c, 0x1c, 0x18, 0x38,
			0x38, 0x38, 0x1c, 0x38, 0x00, 0x1c, 0x3c, 0x70, 0x1c, 0x1c, 0x00, 0xc3, 0x80, 0x70, 0x1e, 0x38,
			0x1c, 0x60, 0x0e, 0x60, 0x0e, 0x1c, 0x38, 0x38, 0x00, 0x1c, 0x78, 0x38, 0x1c, 0xf0, 0x60, 0x07,
			0x00, 0x1c, 0x18, 0x01, 0x80, 0x06, 0x30, 0x70, 0x1e, 0x07, 0x00, 0xe0, 0x1c, 0x00, 0x00, 0xcd,
			0xe4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x71, 0x68, 0x78, 0xe0, 0x38, 0x60, 0x38,
			0xb0, 0x30, 0x60, 0x38, 0x00, 0xc0, 0x70, 0x38, 0x38, 0x38, 0x00, 0xe3, 0x80, 0x38, 0x38, 0x38,
			0x00, 0x39, 0xce, 0x38, 0x38, 0x71, 0xc0, 0x3b, 0xc0, 0x1e, 0xe0, 0x38, 0x00, 0xe1, 0x80, 0x39,
			0x00, 0x1c, 0x78, 0x03, 0xc0, 0x0c, 0x30, 0x20, 0x70, 0x03, 0x80, 0x70, 0x30, 0x00, 0x00, 0x70,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0xc0, 0x78, 0x1f, 0xce, 0x00, 0x00, 0x70, 0x00, 0x38,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x60, 0x00, 0x0f, 0xc0, 0xff,
			0x80, 0xff, 0xf0, 0x1f, 0x80, 0x03, 0xf8, 0x1f, 0x00, 0x0f, 0x80, 0x0c, 0x00, 0x1f, 0x00, 0x1f,
			0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0xf8,
			0x3f, 0xff, 0xf0, 0x07, 0xe0, 0xff, 0xc0, 0xff, 0xfc, 0xff, 0x00, 0x07, 0xcc, 0xf8, 0x3e, 0xff,
			0x80, 0x3e, 0x00, 0xfc, 0x7f, 0xff, 0xfc, 0xf8, 0x3f, 0xf8, 0x06, 0x07, 0xe0, 0xff, 0x00, 0x07,
			0xe0, 0xfe, 0x0f, 0x8f, 0x80, 0x3f, 0xe0, 0x07, 0xe0, 0x01, 0x80, 0x06, 0x30, 0xf8, 0x3f, 0x1f,
			0xc0, 0xff, 0xfc, 0x00, 0x00, 0x78, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e,
			0x30, 0x67, 0x80, 0x0f, 0x80, 0x0f, 0x3c, 0x0f, 0x80, 0xfe, 0x00, 0xc0, 0x70, 0xfe, 0x3e, 0xfe,
			0x00, 0xc3, 0x80, 0xfe, 0x7e, 0xfe, 0x00, 0xfd, 0xef, 0xfe, 0x3e, 0x1f, 0x00, 0x38, 0x00, 0x00,
			0xe0, 0xfe, 0x00, 0x9e, 0x00, 0x1e, 0x00, 0x07, 0x9e, 0x01, 0x80, 0x0c, 0x30, 0xf8, 0xfc, 0xe3,
			0x80, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x38, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00,
			0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0xe0, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0xe7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x00,
			0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x03, 0xf8, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x02, 0x03, 0x06, 0x06, 0x03, 0x05, 0x02, 0x10, 0x10,
			0x10, 0x04, 0x10, 0x10, 0x0e, 0x00, 0x0a, 0x0a, 0x09, 0x0a, 0x09, 0x08, 0x0a, 0x09, 0x08, 0x09,
			0x02, 0x02, 0x05, 0x05, 0x05, 0x05, 0x05, 0x09, 0x08, 0x07, 0x08, 0x07, 0x07, 0x07, 0x09, 0x04,
			0x08, 0x09, 0x07, 0x0d, 0x09, 0x07, 0x09, 0x07, 0x09, 0x07, 0x08, 0x09, 0x09, 0x0d, 0x09, 0x0a,
			0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x06, 0x08, 0x06, 0x07, 0x07, 0x09, 0x04,
			0x03, 0x08, 0x04, 0x0e, 0x09, 0x07, 0x08, 0x08, 0x08, 0x07, 0x07, 0x09, 0x09, 0x0d, 0x09, 0x09,
			0x09, 0x03, 0x03, 0x03, 0x20, 0x7d, 0x02, 0x00, 0x10, 0x01, 0x01, 0x00, 0x00, 0x00, 0x40, 0x00,
			0xa0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x80,
			0x1c, 0x00, 0x17, 0x00, 0x01, 0x00, 0x1f, 0x00, 0x01, 0x80, 0x3f, 0x80, 0x3c, 0x00, 0x1e, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x18, 0x00,
			0xfc, 0x00, 0x3a, 0x00, 0xfc, 0x00, 0xfe, 0x00, 0xfe, 0x00, 0x3a, 0x00, 0xf7, 0x80, 0xf0, 0x00,
			0x0f, 0x00, 0xf6, 0x00, 0xf0, 0x00, 0xe0, 0x38, 0xc3, 0x80, 0x38, 0x00, 0x7e, 0x00, 0x38, 0x00,
			0xfc, 0x00, 0x3a, 0x00, 0xff, 0x00, 0xf3, 0x80, 0xf3, 0x80, 0xe3, 0x38, 0xf3, 0x80, 0xf1, 0xc0,
			0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0xe0, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00,
			0x00, 0x00, 0xe0, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0xa0, 0x00, 0x50, 0x00,
			0x70, 0x00, 0x00, 0x00, 0x50, 0x00, 0xc0, 0x00, 0x07, 0xf0, 0x01, 0xf8, 0x00, 0x7f, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x80, 0x01, 0x80, 0x36, 0x00, 0x19, 0x80,
			0x03, 0x00, 0x30, 0x00, 0x07, 0x00, 0x3f, 0x80, 0x66, 0x00, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x18, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x88, 0x00, 0x00, 0x00, 0x18, 0x00, 0x66, 0x00, 0x66, 0x00,
			0x66, 0x00, 0x66, 0x00, 0x66, 0x00, 0x66, 0x00, 0x63, 0x00, 0x60, 0x00, 0x06, 0x00, 0x66, 0x00,
			0x60, 0x00, 0x60, 0x30, 0xc1, 0x00, 0x6c, 0x00, 0x33, 0x00, 0x6c, 0x00, 0x66, 0x00, 0x66, 0x00,
			0xdb, 0x00, 0x61, 0x00, 0x61, 0x00, 0x63, 0x10, 0x63, 0x00, 0x60, 0x80, 0xc3, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00,
			0x06, 0x00, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00,
			0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0xf8, 0x00, 0xd8, 0x00, 0x00, 0x00,
			0x20, 0x00, 0x40, 0x00, 0x38, 0x0e, 0x0e, 0x03, 0x83, 0x80, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x18, 0xc0, 0x03, 0x80, 0x23, 0x00, 0x10, 0xc0, 0x07, 0x00, 0x30, 0x00,
			0x0c, 0x00, 0x21, 0x00, 0xc3, 0x00, 0x61, 0x80, 0xc0, 0x00, 0x40, 0x00, 0x60, 0x00, 0xf8, 0x00,
			0x30, 0x00, 0x10, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x63, 0x00, 0xc2, 0x00, 0x63, 0x00, 0x62, 0x00,
			0x62, 0x00, 0xc6, 0x00, 0x63, 0x00, 0x60, 0x00, 0x06, 0x00, 0x6c, 0x00, 0x60, 0x00, 0x70, 0x70,
			0x61, 0x00, 0xc6, 0x00, 0x31, 0x80, 0xc6, 0x00, 0x63, 0x00, 0xc2, 0x00, 0x99, 0x00, 0x61, 0x00,
			0x61, 0x00, 0x63, 0x10, 0x62, 0x00, 0x31, 0x00, 0x86, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00,
			0x6e, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x60, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x50, 0x00, 0x88, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00,
			0x40, 0x01, 0x10, 0x00, 0x44, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x18, 0xc0, 0x01, 0x80, 0x73, 0x00, 0x10, 0xc0, 0x07, 0x00, 0x60, 0x00, 0x18, 0x00, 0x21, 0x00,
			0xc3, 0x00, 0x61, 0x80, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x08, 0x00, 0x20, 0x00,
			0x00, 0x00, 0x2c, 0x00, 0x63, 0x00, 0xc2, 0x00, 0x63, 0x00, 0x62, 0x00, 0x62, 0x00, 0xc2, 0x00,
			0x63, 0x00, 0x60, 0x00, 0x06, 0x00, 0x6c, 0x00, 0x60, 0x00, 0x70, 0x70, 0x61, 0x00, 0xc6, 0x00,
			0x31, 0x80, 0xc6, 0x00, 0x63, 0x00, 0xe2, 0x00, 0x99, 0x00, 0x61, 0x00, 0x61, 0x00, 0x63, 0x10,
			0x34, 0x00, 0x31, 0x00, 0x86, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00,
			0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0xf8, 0x00, 0xd8, 0x00, 0x00, 0x00, 0x98, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x18, 0xc0, 0x01, 0x80,
			0x23, 0x00, 0x00, 0xc0, 0x0b, 0x00, 0x60, 0x00, 0x18, 0x00, 0x02, 0x00, 0xc3, 0x00, 0x61, 0x80,
			0xc0, 0x00, 0x40, 0x00, 0x60, 0x00, 0xf8, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2c, 0x00,
			0x63, 0x00, 0xc0, 0x00, 0x63, 0x00, 0x60, 0x00, 0x60, 0x00, 0xc2, 0x00, 0x63, 0x00, 0x60, 0x00,
			0x06, 0x00, 0x78, 0x00, 0x60, 0x00, 0x58, 0xb0, 0x71, 0x00, 0xc6, 0x00, 0x31, 0x80, 0xc6, 0x00,
			0x63, 0x00, 0x60, 0x00, 0x18, 0x00, 0x61, 0x00, 0x62, 0x00, 0x33, 0x10, 0x34, 0x00, 0x1a, 0x00,
			0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x60, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x60, 0x00, 0x0c, 0x00, 0x60, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x60, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x50, 0x00,
			0x70, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00, 0x07, 0xf7, 0x0e, 0xff, 0x7e, 0x0c, 0x00, 0x00,
			0x4f, 0xe0, 0x03, 0x00, 0x1f, 0xc8, 0x00, 0x00, 0x18, 0xc0, 0x01, 0x80, 0x06, 0x00, 0x01, 0x80,
			0x0b, 0x00, 0xfc, 0x00, 0x30, 0x00, 0x02, 0x00, 0x66, 0x00, 0x61, 0x80, 0x00, 0x00, 0x40, 0x00,
			0x18, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x20, 0x00, 0x00, 0x00, 0x2c, 0x00, 0x66, 0x00, 0xc0, 0x00,
			0x63, 0x00, 0x64, 0x00, 0x64, 0x00, 0xc0, 0x00, 0x63, 0x00, 0x60, 0x00, 0x06, 0x00, 0x78, 0x00,
			0x60, 0x00, 0x58, 0xb0, 0x71, 0x00, 0xc6, 0x00, 0x31, 0x80, 0xc6, 0x00, 0x63, 0x00, 0x70, 0x00,
			0x18, 0x00, 0x61, 0x00, 0x36, 0x00, 0x35, 0xa0, 0x18, 0x00, 0x1e, 0x00, 0x0c, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x7c, 0x00, 0x34, 0x00,
			0x3e, 0x00, 0x30, 0x00, 0x60, 0x00, 0x38, 0x00, 0x7c, 0x00, 0xe0, 0x00, 0xe0, 0x00, 0x6e, 0x00,
			0x60, 0x00, 0xec, 0x60, 0xec, 0x00, 0x38, 0x00, 0xfc, 0x00, 0x3f, 0x00, 0xee, 0x00, 0x7a, 0x00,
			0xf8, 0x00, 0xe7, 0x80, 0xf3, 0x80, 0xf7, 0x38, 0xf3, 0x80, 0xf3, 0x80, 0xff, 0x80, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x07, 0xf3, 0x9c, 0xff, 0x7f, 0x0c, 0x00, 0x00, 0x30, 0x1f, 0x84, 0xc7,
			0xe0, 0x30, 0x00, 0x00, 0x18, 0xc0, 0x01, 0x80, 0x0e, 0x00, 0x07, 0x00, 0x13, 0x00, 0x06, 0x00,
			0x37, 0x00, 0x0f, 0x00, 0x3c, 0x00, 0x33, 0x80, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x26, 0x00, 0x7c, 0x00, 0xc0, 0x00, 0x63, 0x00, 0x7c, 0x00,
			0x7c, 0x00, 0xc0, 0x00, 0x7f, 0x00, 0x60, 0x00, 0x06, 0x00, 0x78, 0x00, 0x60, 0x00, 0x4d, 0x30,
			0x59, 0x00, 0xc6, 0x00, 0x31, 0x80, 0xc6, 0x00, 0x66, 0x00, 0x38, 0x00, 0x18, 0x00, 0x61, 0x00,
			0x32, 0x00, 0x35, 0xa0, 0x18, 0x00, 0x0c, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x00, 0x76, 0x00, 0x6c, 0x00, 0x6e, 0x00, 0x68, 0x00,
			0x60, 0x00, 0x6c, 0x00, 0x76, 0x00, 0x60, 0x00, 0x60, 0x00, 0x64, 0x00, 0x60, 0x00, 0x76, 0xb0,
			0x76, 0x00, 0x6c, 0x00, 0x66, 0x00, 0x66, 0x00, 0x77, 0x00, 0xc6, 0x00, 0x60, 0x00, 0x63, 0x00,
			0x61, 0x00, 0x66, 0x10, 0x61, 0x00, 0x61, 0x00, 0x83, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x06, 0x01, 0xf8, 0x18, 0x63, 0x1e, 0x00, 0x00, 0x0f, 0xe0, 0x64, 0x58, 0x1f, 0xc0, 0x00, 0x00,
			0x18, 0xc0, 0x01, 0x80, 0x1c, 0x00, 0x01, 0x80, 0x13, 0x00, 0x03, 0x00, 0x39, 0x80, 0x04, 0x00,
			0x66, 0x00, 0x1d, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x26, 0x00, 0x66, 0x00, 0xc0, 0x00, 0x63, 0x00, 0x64, 0x00, 0x64, 0x00, 0xce, 0x00,
			0x63, 0x00, 0x60, 0x00, 0x06, 0x00, 0x7c, 0x00, 0x60, 0x00, 0x4d, 0x30, 0x59, 0x00, 0xc6, 0x00,
			0x33, 0x00, 0xc6, 0x00, 0x7c, 0x00, 0x1c, 0x00, 0x18, 0x00, 0x61, 0x00, 0x32, 0x00, 0x35, 0xa0,
			0x1c, 0x00, 0x0c, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x06, 0x00, 0x63, 0x00, 0xc4, 0x00, 0xc6, 0x00, 0xc4, 0x00, 0x60, 0x00, 0xc6, 0x00,
			0x63, 0x00, 0x60, 0x00, 0x60, 0x00, 0x68, 0x00, 0x60, 0x00, 0x63, 0x18, 0x63, 0x00, 0xc6, 0x00,
			0x63, 0x00, 0xc6, 0x00, 0x62, 0x00, 0xe2, 0x00, 0x60, 0x00, 0x63, 0x00, 0x61, 0x00, 0x66, 0x10,
			0x32, 0x00, 0x61, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xf0, 0xf0, 0x18,
			0x7f, 0x1e, 0x00, 0x00, 0x04, 0x1f, 0x14, 0xa3, 0xe0, 0x80, 0x00, 0x00, 0x18, 0xc0, 0x01, 0x80,
			0x18, 0x00, 0x00, 0xc0, 0x23, 0x00, 0x03, 0x00, 0x30, 0xc0, 0x08, 0x00, 0xc3, 0x00, 0x01, 0x80,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x00,
			0x63, 0x00, 0xc0, 0x00, 0x63, 0x00, 0x60, 0x00, 0x60, 0x00, 0xc6, 0x00, 0x63, 0x00, 0x60, 0x00,
			0x06, 0x00, 0x6c, 0x00, 0x60, 0x00, 0x46, 0x30, 0x4d, 0x00, 0xc6, 0x00, 0x3e, 0x00, 0xc6, 0x00,
			0x7c, 0x00, 0x0c, 0x00, 0x18, 0x00, 0x61, 0x00, 0x34, 0x00, 0x35, 0xa0, 0x1c, 0x00, 0x0c, 0x00,
			0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x00,
			0x63, 0x00, 0xc0, 0x00, 0xc6, 0x00, 0xfc, 0x00, 0x70, 0x00, 0xc6, 0x00, 0x63, 0x00, 0x60, 0x00,
			0x60, 0x00, 0x70, 0x00, 0x60, 0x00, 0x63, 0x18, 0x63, 0x00, 0xc6, 0x00, 0x63, 0x00, 0xc6, 0x00,
			0x60, 0x00, 0x70, 0x00, 0x60, 0x00, 0x63, 0x00, 0x32, 0x00, 0x33, 0x20, 0x1c, 0x00, 0x32, 0x00,
			0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xf0, 0xf0, 0x18, 0x7e, 0x33, 0x00, 0x00,
			0x02, 0x00, 0x88, 0x44, 0x01, 0x00, 0x00, 0x00, 0x18, 0xc0, 0x01, 0x80, 0x30, 0x00, 0x00, 0xc0,
			0x3f, 0x80, 0x03, 0x00, 0x30, 0xc0, 0x08, 0x00, 0xc3, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x00, 0x63, 0x00, 0xc0, 0x00,
			0x63, 0x00, 0x60, 0x00, 0x60, 0x00, 0xc6, 0x00, 0x63, 0x00, 0x60, 0x00, 0x46, 0x00, 0x66, 0x00,
			0x60, 0x00, 0x46, 0x30, 0x4d, 0x00, 0xc6, 0x00, 0x30, 0x00, 0xc6, 0x00, 0x6e, 0x00, 0x8e, 0x00,
			0x18, 0x00, 0x61, 0x00, 0x34, 0x00, 0x1d, 0xa0, 0x26, 0x00, 0x0c, 0x00, 0x30, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x00, 0x63, 0x00, 0xc0, 0x00,
			0xc6, 0x00, 0xc0, 0x00, 0x60, 0x00, 0x6c, 0x00, 0x63, 0x00, 0x60, 0x00, 0x60, 0x00, 0x70, 0x00,
			0x60, 0x00, 0x63, 0x18, 0x63, 0x00, 0xc6, 0x00, 0x63, 0x00, 0xc6, 0x00, 0x60, 0x00, 0x38, 0x00,
			0x60, 0x00, 0x63, 0x00, 0x32, 0x00, 0x33, 0x20, 0x08, 0x00, 0x32, 0x00, 0x18, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x06, 0x01, 0xf8, 0x18, 0x7c, 0x3f, 0x00, 0x00, 0x01, 0x80, 0x08, 0x40,
			0x06, 0x00, 0x00, 0x00, 0x18, 0xc0, 0x01, 0x80, 0x30, 0x80, 0x00, 0xc0, 0x03, 0x00, 0x03, 0x00,
			0x30, 0xc0, 0x10, 0x00, 0xc3, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x63, 0x00, 0xc0, 0x00, 0x63, 0x00, 0x62, 0x00,
			0x60, 0x00, 0xc6, 0x00, 0x63, 0x00, 0x60, 0x00, 0xe6, 0x00, 0x66, 0x00, 0x62, 0x00, 0x40, 0x30,
			0x47, 0x00, 0xc6, 0x00, 0x30, 0x00, 0xc6, 0x00, 0x66, 0x00, 0x86, 0x00, 0x18, 0x00, 0x61, 0x00,
			0x1c, 0x00, 0x1c, 0xe0, 0x26, 0x00, 0x0c, 0x00, 0x61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0x00, 0x63, 0x00, 0xc0, 0x00, 0xc6, 0x00, 0xc0, 0x00,
			0x60, 0x00, 0x78, 0x00, 0x63, 0x00, 0x60, 0x00, 0x60, 0x00, 0x78, 0x00, 0x60, 0x00, 0x63, 0x18,
			0x63, 0x00, 0xc6, 0x00, 0x63, 0x00, 0xc6, 0x00, 0x60, 0x00, 0x1c, 0x00, 0x60, 0x00, 0x63, 0x00,
			0x1c, 0x00, 0x1d, 0xc0, 0x1c, 0x00, 0x1c, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x07, 0xf3, 0x9c, 0x18, 0x6e, 0x7f, 0x80, 0x00, 0x00, 0x70, 0x18, 0x60, 0x38, 0x00, 0x00, 0x00,
			0x18, 0xc0, 0x01, 0x80, 0x60, 0x80, 0x10, 0xc0, 0x03, 0x00, 0x83, 0x00, 0x30, 0xc0, 0x10, 0x00,
			0xc3, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x43, 0x00, 0x63, 0x00, 0xc2, 0x00, 0x63, 0x00, 0x62, 0x00, 0x60, 0x00, 0xc4, 0x00,
			0x63, 0x00, 0x60, 0x00, 0x46, 0x00, 0x63, 0x00, 0x62, 0x00, 0x40, 0x30, 0x47, 0x00, 0xc6, 0x00,
			0x30, 0x00, 0xce, 0x00, 0x67, 0x00, 0xc6, 0x00, 0x18, 0x00, 0x61, 0x00, 0x1c, 0x00, 0x18, 0xc0,
			0x43, 0x00, 0x0c, 0x00, 0x61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0xc6, 0x00, 0x63, 0x00, 0xc0, 0x00, 0xc6, 0x00, 0xc0, 0x00, 0x60, 0x00, 0x80, 0x00,
			0x63, 0x00, 0x60, 0x00, 0x60, 0x00, 0x6c, 0x00, 0x60, 0x00, 0x63, 0x18, 0x63, 0x00, 0xc6, 0x00,
			0x63, 0x00, 0xc6, 0x00, 0x60, 0x00, 0x0e, 0x00, 0x64, 0x00, 0x63, 0x00, 0x1c, 0x00, 0x1d, 0xc0,
			0x26, 0x00, 0x1c, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xf7, 0x0e, 0x18,
			0x67, 0x61, 0x80, 0x00, 0x00, 0x0f, 0xeb, 0x5f, 0xc0, 0x00, 0x00, 0x00, 0x0d, 0x80, 0x01, 0x80,
			0x61, 0x80, 0x19, 0x80, 0x03, 0x00, 0xc6, 0x00, 0x19, 0x80, 0x20, 0x00, 0x66, 0x00, 0x1c, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x00,
			0x66, 0x00, 0x66, 0x00, 0x66, 0x00, 0x66, 0x00, 0x60, 0x00, 0x6c, 0x00, 0x63, 0x00, 0x60, 0x00,
			0x6c, 0x00, 0x63, 0x00, 0x66, 0x00, 0x40, 0x30, 0x43, 0x00, 0x6c, 0x00, 0x30, 0x00, 0x6c, 0x00,
			0x63, 0x00, 0xcc, 0x00, 0x18, 0x00, 0x32, 0x00, 0x18, 0x00, 0x18, 0xc0, 0x43, 0x00, 0x0c, 0x00,
			0xc3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xce, 0x00,
			0x76, 0x00, 0x64, 0x00, 0x6e, 0x00, 0x64, 0x00, 0x60, 0x00, 0x7c, 0x00, 0x63, 0x00, 0x60, 0x00,
			0x60, 0x00, 0x66, 0x00, 0x60, 0x00, 0x63, 0x18, 0x63, 0x00, 0x6c, 0x00, 0x66, 0x00, 0x66, 0x00,
			0x60, 0x00, 0x86, 0x00, 0x2e, 0x00, 0x37, 0x00, 0x08, 0x00, 0x08, 0x80, 0x43, 0x00, 0x08, 0x00,
			0xc0, 0x80, 0x00, 0x00, 0x40, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x01, 0x10, 0x00, 0x44, 0x00, 0x10, 0x00,
			0x00, 0x00, 0x04, 0x80, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x03, 0xc0, 0x7f, 0x80, 0x0f, 0x00,
			0x07, 0x80, 0x7c, 0x00, 0x0f, 0x00, 0x20, 0x00, 0x3c, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe7, 0x80, 0xfc, 0x00, 0x3c, 0x00,
			0xfc, 0x00, 0xfe, 0x00, 0xf0, 0x00, 0x38, 0x00, 0xf7, 0x80, 0xf0, 0x00, 0x38, 0x00, 0xf1, 0x80,
			0xfe, 0x00, 0xe0, 0x78, 0xe3, 0x00, 0x38, 0x00, 0x78, 0x00, 0x3a, 0x00, 0xf3, 0x80, 0xb8, 0x00,
			0x3c, 0x00, 0x1c, 0x00, 0x18, 0x00, 0x18, 0xc0, 0xe7, 0x80, 0x1e, 0x00, 0xff, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7b, 0x00, 0xdc, 0x00, 0x38, 0x00,
			0x3b, 0x00, 0x38, 0x00, 0xf0, 0x00, 0x3e, 0x00, 0xf7, 0x80, 0xf0, 0x00, 0x60, 0x00, 0xf3, 0x00,
			0xf0, 0x00, 0xf7, 0xbc, 0xf7, 0x80, 0x38, 0x00, 0x7c, 0x00, 0x3e, 0x00, 0xf0, 0x00, 0x7c, 0x00,
			0x1c, 0x00, 0x1b, 0x80, 0x08, 0x00, 0x08, 0x80, 0xe7, 0x80, 0x08, 0x00, 0xff, 0x80, 0x00, 0x00,
			0xe0, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x38, 0x0e, 0x0e, 0x03, 0x83, 0x80, 0xe0, 0x00, 0x00, 0x00, 0xfb, 0x7c,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x40, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x07, 0xf0, 0x01, 0xfc, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x00,
			0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0xf0, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x05, 0x03, 0x06, 0x06, 0x06, 0x05, 0x02,
			0x03, 0x04, 0x05, 0x05, 0x04, 0x05, 0x04, 0x04, 0x08, 0x06, 0x0a, 0x09, 0x0b, 0x09, 0x09, 0x0a,
			0x09, 0x09, 0x02, 0x02, 0x05, 0x05, 0x05, 0x05, 0x07, 0x0d, 0x0b, 0x0a, 0x0b, 0x0b, 0x0b, 0x0c,
			0x0c, 0x06, 0x0a, 0x0c, 0x09, 0x0e, 0x0d, 0x0b, 0x0b, 0x0b, 0x0c, 0x09, 0x0a, 0x0c, 0x0d, 0x10,
			0x0c, 0x0c, 0x09, 0x03, 0x07, 0x03, 0x06, 0x09, 0x07, 0x09, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
			0x09, 0x05, 0x05, 0x09, 0x05, 0x0d, 0x09, 0x07, 0x08, 0x08, 0x08, 0x07, 0x06, 0x09, 0x0a, 0x0e,
			0x09, 0x0a, 0x08, 0x07, 0x03, 0x05, 0x0e, 0x0b, 0x20, 0x7f, 0x02, 0x00, 0x0e, 0x01, 0x01, 0x00,
			0x00, 0x00, 0x70, 0x00, 0xa0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x20, 0x00, 0x40, 0x00,
			0x20, 0x00, 0x40, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,
			0x3c, 0x00, 0x08, 0x00, 0x3e, 0x00, 0x3c, 0x00, 0x18, 0x80, 0xff, 0x80, 0x1c, 0x00, 0x3f, 0x80,
			0x1e, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00,
			0x00, 0x00, 0x01, 0x00, 0xff, 0x80, 0x0e, 0x40, 0xff, 0x00, 0xff, 0xe0, 0xff, 0xe0, 0x0e, 0x40,
			0xff, 0xf0, 0xfc, 0x00, 0x0f, 0xc0, 0xfd, 0xf0, 0xfc, 0x00, 0xfc, 0x7c, 0xfe, 0xf8, 0x1f, 0x00,
			0xff, 0x80, 0x1f, 0x00, 0xff, 0x80, 0x3c, 0x80, 0xff, 0xc0, 0xfd, 0xf0, 0xfe, 0xf8, 0xff, 0xff,
			0xff, 0xf0, 0xff, 0xf0, 0x7f, 0x80, 0xe0, 0x00, 0x10, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00,
			0x10, 0x00, 0x70, 0x00, 0x70, 0x00, 0x20, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x80, 0x00, 0x00, 0x00, 0x06, 0x00, 0x14, 0x00,
			0x00, 0x00, 0xf8, 0x00, 0xa0, 0x00, 0x50, 0x00, 0x70, 0x00, 0xa8, 0x00, 0x50, 0x00, 0xc0, 0x00,
			0x40, 0x00, 0x20, 0x00, 0xa8, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,
			0x66, 0x00, 0x38, 0x00, 0x7f, 0x80, 0xcf, 0x00, 0x1b, 0x80, 0x7f, 0x00, 0x73, 0x00, 0x7f, 0xc0,
			0x33, 0x00, 0x77, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x88, 0x00,
			0x00, 0x00, 0x07, 0x00, 0x7b, 0xc0, 0x3d, 0xc0, 0x7b, 0xc0, 0x78, 0x60, 0x78, 0x60, 0x39, 0xc0,
			0x79, 0xe0, 0x78, 0x00, 0x07, 0x80, 0x78, 0xe0, 0x78, 0x00, 0x7c, 0x78, 0x7c, 0x70, 0x7b, 0xc0,
			0x7b, 0xc0, 0x7b, 0xc0, 0x79, 0xe0, 0x73, 0x80, 0xde, 0xc0, 0x78, 0xe0, 0x7c, 0x70, 0x7b, 0xce,
			0x7c, 0xe0, 0x78, 0xe0, 0x67, 0x80, 0x80, 0x00, 0x28, 0x00, 0x20, 0x00, 0x04, 0x00, 0x38, 0x00,
			0x00, 0x00, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x00, 0x00,
			0xf0, 0x00, 0xf8, 0x00, 0xf8, 0x01, 0xe0, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x92, 0x00, 0xc0, 0x00, 0x20, 0x00, 0xfb, 0x7c, 0x1e, 0x00,
			0x00, 0x00, 0xf8, 0x00, 0x00, 0x00, 0xf8, 0x00, 0xd8, 0x00, 0x50, 0x00, 0x20, 0x00, 0xc0, 0x00,
			0x80, 0x00, 0x10, 0x00, 0x70, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00,
			0xe7, 0x00, 0xf8, 0x00, 0x47, 0xc0, 0xe7, 0x80, 0x17, 0x80, 0x7f, 0x00, 0x77, 0x80, 0x7f, 0x80,
			0x71, 0x80, 0xf7, 0x80, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0xf8, 0x00, 0x30, 0x00, 0x10, 0x00,
			0x00, 0x00, 0x1f, 0x00, 0x79, 0xe0, 0x78, 0xc0, 0x79, 0xe0, 0x78, 0x20, 0x78, 0x20, 0x70, 0xc0,
			0x79, 0xe0, 0x78, 0x00, 0x07, 0x80, 0x78, 0xc0, 0x78, 0x00, 0x3e, 0xf8, 0x3e, 0x20, 0xf1, 0xe0,
			0x79, 0xe0, 0xf1, 0xe0, 0x79, 0xe0, 0xf9, 0x80, 0x9e, 0x40, 0x78, 0x40, 0x3c, 0x30, 0x39, 0xc6,
			0x3e, 0x40, 0x3c, 0x40, 0x4f, 0x80, 0x80, 0x00, 0x4c, 0x00, 0x20, 0x00, 0x0c, 0x00, 0x7c, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x03, 0x00,
			0x70, 0x00, 0x70, 0x00, 0x70, 0x00, 0xe0, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x60, 0x00, 0xf8, 0x00, 0x7f, 0xf8, 0xfc, 0x00,
			0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x50, 0x00, 0x88, 0x00, 0x30, 0x00, 0x50, 0x00, 0x00, 0x00,
			0x80, 0x00, 0x10, 0x00, 0xa8, 0x00, 0xf8, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x20, 0x00,
			0xe7, 0x00, 0x78, 0x00, 0x77, 0xc0, 0x67, 0x80, 0x17, 0x80, 0x40, 0x00, 0xf3, 0x00, 0x81, 0x80,
			0xfb, 0x00, 0xf7, 0x80, 0xc0, 0x00, 0xc0, 0x00, 0x80, 0x00, 0x00, 0x00, 0x08, 0x00, 0x20, 0x00,
			0x00, 0x00, 0x0f, 0x80, 0x7b, 0xc0, 0xf0, 0x40, 0x79, 0xe0, 0x78, 0xa0, 0x78, 0xa0, 0xf0, 0x40,
			0x79, 0xe0, 0x78, 0x00, 0x07, 0x80, 0x79, 0x80, 0x78, 0x00, 0x3f, 0x78, 0x3f, 0x20, 0xf1, 0xe0,
			0x79, 0xe0, 0xf1, 0xe0, 0x79, 0xe0, 0xfc, 0x80, 0x1e, 0x00, 0x78, 0x40, 0x3e, 0x20, 0x3d, 0xe4,
			0x1e, 0x40, 0x1e, 0x80, 0x0f, 0x00, 0x80, 0x00, 0x9e, 0x00, 0x20, 0x00, 0xd8, 0x00, 0x7c, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x38, 0x00, 0x05, 0x00,
			0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x70, 0x00, 0x10, 0x00, 0x10, 0x00, 0x00, 0x00,
			0x10, 0x00, 0x02, 0x00, 0x16, 0x00, 0x00, 0x00, 0x70, 0x00, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x7c, 0x00, 0xe0, 0x00, 0x70, 0x00, 0x0f, 0xe0, 0x76, 0x00,
			0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0xf8, 0x00, 0xd8, 0x00, 0x68, 0x00, 0x98, 0x00, 0x00, 0x00,
			0x40, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00,
			0xe7, 0x00, 0x78, 0x00, 0x27, 0x80, 0x1f, 0x00, 0x27, 0x80, 0x7c, 0x00, 0xf0, 0x00, 0x03, 0x00,
			0xfe, 0x00, 0xf7, 0x80, 0xc0, 0x00, 0xc0, 0x00, 0x60, 0x00, 0xf8, 0x00, 0x30, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x17, 0x80, 0x7f, 0x80, 0xf0, 0x40, 0x79, 0xe0, 0x79, 0x80, 0x79, 0x80, 0xf0, 0x40,
			0x79, 0xe0, 0x78, 0x00, 0x07, 0x80, 0x7a, 0x00, 0x78, 0x00, 0x3f, 0x78, 0x2f, 0x20, 0xf1, 0xe0,
			0x7b, 0xc0, 0xf1, 0xe0, 0x79, 0xe0, 0x7e, 0x00, 0x1e, 0x00, 0x78, 0x40, 0x1e, 0x20, 0x1c, 0xe4,
			0x1f, 0x80, 0x0f, 0x00, 0x1f, 0x00, 0x80, 0x00, 0x7c, 0x00, 0x20, 0x00, 0xf0, 0x00, 0x38, 0x00,
			0x00, 0x00, 0x3e, 0x00, 0x7e, 0x00, 0x3e, 0x00, 0x7e, 0x00, 0x3e, 0x00, 0x7c, 0x00, 0x3e, 0x00,
			0x7e, 0x00, 0xf0, 0x00, 0xf0, 0x00, 0xef, 0x00, 0x70, 0x00, 0xf6, 0x60, 0xf6, 0x00, 0x7c, 0x00,
			0xfe, 0x00, 0x7e, 0x00, 0xff, 0x00, 0x7e, 0x00, 0xf8, 0x00, 0xff, 0x00, 0xff, 0xc0, 0xff, 0xfc,
			0xff, 0x80, 0xff, 0xc0, 0x7f, 0x00, 0x74, 0x00, 0x60, 0x00, 0x50, 0x00, 0x03, 0x80, 0x33, 0x00,
			0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x50, 0x00, 0x70, 0x00, 0x90, 0x00, 0x68, 0x00, 0x00, 0x00,
			0x20, 0x00, 0x40, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00,
			0xe7, 0x00, 0x78, 0x00, 0x0e, 0x00, 0x0c, 0x00, 0x27, 0x80, 0x7f, 0x00, 0xff, 0x00, 0x07, 0x00,
			0x7f, 0x00, 0x77, 0x80, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x20, 0x00,
			0x00, 0x00, 0x17, 0xc0, 0x7b, 0xc0, 0xf0, 0x00, 0x79, 0xe0, 0x7f, 0x80, 0x7f, 0x80, 0xf0, 0x00,
			0x7f, 0xe0, 0x78, 0x00, 0x67, 0x80, 0x7f, 0xc0, 0x78, 0x00, 0x2f, 0xf8, 0x2f, 0xa0, 0xf1, 0xe0,
			0x7f, 0x80, 0xf1, 0xe0, 0x7f, 0x80, 0x3f, 0x00, 0x1e, 0x00, 0x78, 0x40, 0x1f, 0x40, 0x1e, 0xf8,
			0x0f, 0x00, 0x0f, 0x00, 0x1e, 0x00, 0xe0, 0x00, 0x38, 0x00, 0xe0, 0x00, 0x60, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x67, 0x00, 0x77, 0x00, 0x73, 0x00, 0xee, 0x00, 0x67, 0x00, 0x38, 0x00, 0x77, 0x00,
			0x77, 0x00, 0x70, 0x00, 0x70, 0x00, 0xe6, 0x00, 0x70, 0x00, 0x7f, 0xf0, 0x7f, 0x00, 0xee, 0x00,
			0x77, 0x00, 0xee, 0x00, 0x76, 0x00, 0xe2, 0x00, 0x70, 0x00, 0x77, 0x00, 0x79, 0x80, 0x7b, 0xcc,
			0x7b, 0x00, 0x79, 0x80, 0xde, 0x00, 0x74, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x05, 0x40, 0x11, 0x80,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0xe7, 0x00, 0x78, 0x00, 0x30, 0x80, 0x67, 0x00, 0x47, 0x80, 0x7f, 0x80, 0xf7, 0x80, 0x0e, 0x00,
			0x3f, 0x80, 0x1f, 0x80, 0xc0, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x13, 0xc0, 0x79, 0xe0, 0xf0, 0x00, 0x79, 0xe0, 0x79, 0x80, 0x79, 0x80, 0xf3, 0xf0,
			0x79, 0xe0, 0x78, 0x00, 0xf7, 0x80, 0x7b, 0xc0, 0x78, 0x00, 0x2f, 0x78, 0x27, 0xe0, 0xf1, 0xe0,
			0x78, 0x00, 0xf1, 0xe0, 0x7b, 0xc0, 0x1f, 0x80, 0x1e, 0x00, 0x78, 0x40, 0x0f, 0x40, 0x0f, 0xf8,
			0x1f, 0x80, 0x0f, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x07, 0x00, 0x77, 0x00, 0xe3, 0x00, 0xee, 0x00, 0xfe, 0x00, 0x38, 0x00, 0x77, 0x00,
			0x77, 0x00, 0x70, 0x00, 0x70, 0x00, 0xec, 0x00, 0x70, 0x00, 0x77, 0x70, 0x77, 0x00, 0xee, 0x00,
			0x77, 0x00, 0xee, 0x00, 0x70, 0x00, 0xf8, 0x00, 0x70, 0x00, 0x77, 0x00, 0x39, 0x00, 0x39, 0xc8,
			0x3a, 0x00, 0x39, 0x80, 0xbc, 0x00, 0xfa, 0x00, 0x60, 0x00, 0x00, 0x00, 0x02, 0x80, 0x00, 0xc0,
			0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00,
			0xe7, 0x00, 0x78, 0x00, 0x76, 0x40, 0xf7, 0x80, 0xff, 0xe0, 0x0f, 0x80, 0xf7, 0x80, 0x0e, 0x00,
			0x4f, 0x80, 0x67, 0x80, 0xc0, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x3f, 0xe0, 0x79, 0xe0, 0xf0, 0x00, 0x79, 0xe0, 0x78, 0xa0, 0x78, 0x80, 0xf1, 0xe0,
			0x79, 0xe0, 0x78, 0x00, 0xf7, 0x80, 0x79, 0xe0, 0x78, 0x80, 0x26, 0x78, 0x23, 0xe0, 0xf1, 0xe0,
			0x78, 0x00, 0xf1, 0xe0, 0x7b, 0xc0, 0x87, 0x80, 0x1e, 0x00, 0x78, 0x40, 0x0f, 0x80, 0x0f, 0x78,
			0x17, 0x80, 0x0f, 0x00, 0x3c, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x7f, 0x00, 0x77, 0x00, 0xe0, 0x00, 0xee, 0x00, 0xe0, 0x00, 0x38, 0x00, 0x3e, 0x00,
			0x77, 0x00, 0x70, 0x00, 0x70, 0x00, 0xfe, 0x00, 0x70, 0x00, 0x77, 0x70, 0x77, 0x00, 0xee, 0x00,
			0x77, 0x00, 0xee, 0x00, 0x70, 0x00, 0x7c, 0x00, 0x70, 0x00, 0x77, 0x00, 0x3e, 0x00, 0x3d, 0xe8,
			0x1e, 0x00, 0x3d, 0x00, 0x3d, 0x00, 0x10, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60,
			0x00, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x00,
			0xe7, 0x00, 0x78, 0x00, 0xff, 0xc0, 0xc7, 0x80, 0x07, 0x80, 0x67, 0x80, 0x77, 0x80, 0x1e, 0x00,
			0xc3, 0x80, 0xf7, 0x80, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x21, 0xe0, 0x79, 0xe0, 0x78, 0x40, 0x79, 0xe0, 0x78, 0x20, 0x78, 0x00, 0xf1, 0xe0,
			0x79, 0xe0, 0x78, 0x00, 0xf7, 0x80, 0x79, 0xe0, 0x78, 0x80, 0x24, 0x78, 0x21, 0xf0, 0xf1, 0xe0,
			0x78, 0x00, 0xf1, 0xe0, 0x79, 0xe0, 0xc3, 0x80, 0x1e, 0x00, 0x78, 0x40, 0x07, 0x80, 0x07, 0x38,
			0x27, 0xc0, 0x0f, 0x00, 0x7c, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0xe7, 0x00, 0x77, 0x00, 0xf1, 0x00, 0xee, 0x00, 0xf1, 0x00, 0x38, 0x00, 0x18, 0x00,
			0x77, 0x00, 0x70, 0x00, 0x70, 0x00, 0xee, 0x00, 0x70, 0x00, 0x77, 0x70, 0x77, 0x00, 0xee, 0x00,
			0x77, 0x00, 0xee, 0x00, 0x70, 0x00, 0x1e, 0x00, 0x70, 0x00, 0x77, 0x00, 0x1e, 0x00, 0x1d, 0xf0,
			0x3e, 0x00, 0x1f, 0x00, 0x79, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x00,
			0x66, 0x00, 0x78, 0x00, 0xff, 0xc0, 0xef, 0x00, 0x07, 0x80, 0xc7, 0x00, 0x77, 0x00, 0x1f, 0x00,
			0xe3, 0x00, 0xe7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x60, 0xf0, 0x7b, 0xc0, 0x3c, 0x80, 0x7b, 0xc0, 0x78, 0x60, 0x78, 0x00, 0x79, 0xe0,
			0x79, 0xe0, 0x78, 0x00, 0xc7, 0x80, 0x79, 0xe0, 0x79, 0x80, 0x70, 0x78, 0x71, 0xf8, 0x7b, 0xc0,
			0x78, 0x00, 0x7b, 0xc0, 0x79, 0xe0, 0xe3, 0x00, 0x1e, 0x00, 0x3c, 0x80, 0x07, 0xc0, 0x07, 0xbc,
			0x73, 0xe0, 0x0f, 0x00, 0x79, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0xe7, 0x00, 0x77, 0x00, 0x7f, 0x00, 0xee, 0x00, 0x7e, 0x00, 0x38, 0x00, 0x7c, 0x00,
			0x77, 0x00, 0x70, 0x00, 0x70, 0x00, 0xe7, 0x00, 0x70, 0x00, 0x77, 0x70, 0x77, 0x00, 0xee, 0x00,
			0x77, 0x00, 0xee, 0x00, 0x70, 0x00, 0x8e, 0x00, 0x74, 0x00, 0x7f, 0x00, 0x1f, 0x00, 0x1e, 0xf8,
			0x6f, 0x00, 0x0f, 0x00, 0xf3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00,
			0x3c, 0x00, 0xfc, 0x00, 0x87, 0x80, 0x7e, 0x00, 0x1f, 0xc0, 0x7e, 0x00, 0x1e, 0x00, 0x3f, 0x80,
			0x7e, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0xf9, 0xf8, 0xff, 0x80, 0x0f, 0x00, 0xff, 0x00, 0xff, 0xe0, 0xfc, 0x00, 0x1f, 0x20,
			0xff, 0xf0, 0xfc, 0x00, 0x7e, 0x00, 0xff, 0xf0, 0xff, 0x80, 0xf8, 0xfc, 0xf8, 0xf0, 0x1f, 0x00,
			0xfc, 0x00, 0x1f, 0x00, 0xfc, 0xf0, 0xbe, 0x00, 0x3f, 0x00, 0x1f, 0x00, 0x03, 0x80, 0x03, 0x18,
			0xff, 0xf0, 0x1f, 0x80, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x7b, 0x80, 0xfe, 0x00, 0x3e, 0x00, 0x7f, 0x00, 0x3c, 0x00, 0x7c, 0x00, 0x7f, 0x00,
			0xff, 0x80, 0xf8, 0x00, 0x70, 0x01, 0xef, 0x80, 0xf8, 0x00, 0xff, 0xf8, 0xff, 0x80, 0x7c, 0x00,
			0x7e, 0x00, 0x7e, 0x00, 0xf8, 0x00, 0xfc, 0x00, 0x38, 0x00, 0x33, 0x80, 0x0c, 0x00, 0x0c, 0x60,
			0xff, 0x80, 0x0e, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00,
			0x00, 0x00, 0x0b, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x02, 0x10,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00,
			0x00, 0x00, 0x00, 0x03, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x70, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x08, 0x40,
			0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x1d, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x63, 0x00,
			0x00, 0x00, 0x00, 0x03, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x70, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x08, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x00,
			0x00, 0x00, 0x00, 0x01, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0xf8, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x05, 0x02, 0x03, 0x06, 0x06, 0x06, 0x05, 0x01, 0x03, 0x04, 0x05, 0x05, 0x02, 0x05, 0x01, 0x04,
			0x05, 0x04, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x02, 0x02, 0x05, 0x05, 0x05, 0x05,
			0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x02, 0x02, 0x05, 0x05, 0x07, 0x05, 0x05,
			0x05, 0x05, 0x05, 0x05, 0x06, 0x05, 0x05, 0x07, 0x05, 0x05, 0x05, 0x03, 0x07, 0x03, 0x06, 0x03,
			0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x04, 0x05, 0x05, 0x02, 0x02, 0x05, 0x02, 0x07, 0x04, 0x05,
			0x05, 0x05, 0x05, 0x05, 0x03, 0x05, 0x04, 0x07, 0x05, 0x05, 0x05, 0x07, 0x05, 0x07, 0x07, 0x04,
			0x20, 0x7f, 0x02, 0x00, 0x08, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa0, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x40, 0x00, 0x20, 0x00, 0x80, 0x00, 0x20, 0x00, 0x40, 0x00, 0x20, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x70, 0x00, 0x30, 0x00, 0x70, 0x00, 0x70, 0x00,
			0x30, 0x00, 0xf0, 0x00, 0x70, 0x00, 0x78, 0x00, 0x70, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x70, 0x00, 0xf0, 0x00, 0x70, 0x00,
			0xf0, 0x00, 0xf8, 0x00, 0xf8, 0x00, 0x70, 0x00, 0xd8, 0x00, 0xc0, 0x00, 0xc0, 0x00, 0xd8, 0x00,
			0xc0, 0x00, 0xec, 0x00, 0xf0, 0x00, 0x70, 0x00, 0xf0, 0x00, 0x70, 0x00, 0xf0, 0x00, 0x70, 0x00,
			0xfc, 0x00, 0xd8, 0x00, 0xd8, 0x00, 0xd6, 0x00, 0xd8, 0x00, 0xd8, 0x00, 0xf8, 0x00, 0xe0, 0x00,
			0x10, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
			0x08, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x40, 0x00, 0x40, 0x00, 0x40, 0x00, 0x40, 0x00,
			0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00,
			0x00, 0x00, 0x38, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0xa0, 0x00, 0x50, 0x00,
			0x70, 0x00, 0xa8, 0x00, 0x50, 0x00, 0x80, 0x00, 0x40, 0x00, 0x20, 0x00, 0xa8, 0x00, 0x20, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0xd8, 0x00, 0x70, 0x00, 0x98, 0x00, 0xd8, 0x00,
			0x70, 0x00, 0xc0, 0x00, 0xc0, 0x00, 0x08, 0x00, 0xd8, 0x00, 0xd8, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x18, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x88, 0x00, 0x00, 0x00, 0xf8, 0x00, 0xd8, 0x00, 0xc8, 0x00,
			0xd8, 0x00, 0xc0, 0x00, 0xc0, 0x00, 0xc8, 0x00, 0xd8, 0x00, 0xc0, 0x00, 0xc0, 0x00, 0xd8, 0x00,
			0xc0, 0x00, 0xfe, 0x00, 0xd8, 0x00, 0xd8, 0x00, 0xd8, 0x00, 0xd8, 0x00, 0xd8, 0x00, 0xc8, 0x00,
			0x30, 0x00, 0xd8, 0x00, 0xd8, 0x00, 0xd6, 0x00, 0xd8, 0x00, 0xd8, 0x00, 0x18, 0x00, 0x80, 0x00,
			0x28, 0x00, 0x20, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00,
			0x18, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00,
			0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe6, 0x00,
			0xf8, 0x00, 0x18, 0x00, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0xf8, 0x00,
			0xd8, 0x00, 0x50, 0x00, 0x20, 0x00, 0x80, 0x00, 0xc0, 0x00, 0x30, 0x00, 0x70, 0x00, 0x20, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0xd8, 0x00, 0x30, 0x00, 0x18, 0x00, 0x18, 0x00,
			0xb0, 0x00, 0xc0, 0x00, 0xc0, 0x00, 0x18, 0x00, 0xd8, 0x00, 0xd8, 0x00, 0xc0, 0x00, 0xc0, 0x00,
			0x60, 0x00, 0xf8, 0x00, 0x30, 0x00, 0x10, 0x00, 0x00, 0x00, 0xd8, 0x00, 0xd8, 0x00, 0xc0, 0x00,
			0xd8, 0x00, 0xc0, 0x00, 0xc0, 0x00, 0xc0, 0x00, 0xd8, 0x00, 0xc0, 0x00, 0xc0, 0x00, 0xd8, 0x00,
			0xc0, 0x00, 0xd6, 0x00, 0xd8, 0x00, 0xd8, 0x00, 0xd8, 0x00, 0xd8, 0x00, 0xd8, 0x00, 0xc0, 0x00,
			0x30, 0x00, 0xd8, 0x00, 0xd8, 0x00, 0xd6, 0x00, 0x60, 0x00, 0xd8, 0x00, 0x30, 0x00, 0x80, 0x00,
			0x4c, 0x00, 0x20, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 0xf0, 0x00, 0x78, 0x00,
			0x78, 0x00, 0x70, 0x00, 0xc0, 0x00, 0x70, 0x00, 0xf0, 0x00, 0xc0, 0x00, 0xc0, 0x00, 0xd0, 0x00,
			0xc0, 0x00, 0x74, 0x00, 0xe0, 0x00, 0x70, 0x00, 0xf0, 0x00, 0x78, 0x00, 0xf0, 0x00, 0x78, 0x00,
			0xe0, 0x00, 0xd8, 0x01, 0xb0, 0x00, 0x56, 0x00, 0xd8, 0x00, 0xd8, 0x00, 0xf8, 0x00, 0x6e, 0x00,
			0xf8, 0x00, 0x2a, 0x00, 0xa8, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x50, 0x00,
			0x88, 0x00, 0x30, 0x00, 0x50, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x30, 0x00, 0xa8, 0x00, 0xf8, 0x00,
			0x00, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x20, 0x00, 0xd8, 0x00, 0x30, 0x00, 0x18, 0x00, 0x30, 0x00,
			0xb0, 0x00, 0xf0, 0x00, 0xf0, 0x00, 0x30, 0x00, 0x70, 0x00, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x80, 0x00, 0x00, 0x00, 0x08, 0x00, 0x20, 0x00, 0x00, 0x00, 0xd8, 0x00, 0xf0, 0x00, 0xc0, 0x00,
			0xd8, 0x00, 0xe0, 0x00, 0xe0, 0x00, 0xc0, 0x00, 0xf8, 0x00, 0xc0, 0x00, 0xc0, 0x00, 0xf0, 0x00,
			0xc0, 0x00, 0xd6, 0x00, 0xd8, 0x00, 0xd8, 0x00, 0xd8, 0x00, 0xd8, 0x00, 0xd8, 0x00, 0x70, 0x00,
			0x30, 0x00, 0xd8, 0x00, 0xd8, 0x00, 0xd6, 0x00, 0x30, 0x00, 0x78, 0x00, 0x60, 0x00, 0x80, 0x00,
			0x9e, 0x00, 0x20, 0x00, 0xd8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0xd8, 0x00, 0xc0, 0x00,
			0xd8, 0x00, 0xd8, 0x00, 0xc0, 0x00, 0xd8, 0x00, 0xd8, 0x00, 0xc0, 0x00, 0xc0, 0x00, 0xe0, 0x00,
			0xc0, 0x00, 0x6a, 0x00, 0xd0, 0x00, 0xd8, 0x00, 0xd8, 0x00, 0xd8, 0x00, 0xc8, 0x00, 0xc0, 0x00,
			0xc0, 0x00, 0xd8, 0x01, 0xb0, 0x00, 0x56, 0x00, 0xf8, 0x00, 0xd8, 0x00, 0x30, 0x00, 0x2c, 0x00,
			0xf8, 0x00, 0x44, 0x00, 0xa8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x00,
			0xd8, 0x00, 0x68, 0x00, 0x98, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x30, 0x00, 0x20, 0x00, 0x20, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0xd8, 0x00, 0x30, 0x00, 0x30, 0x00, 0x18, 0x00,
			0xf8, 0x00, 0x18, 0x00, 0xd8, 0x00, 0x30, 0x00, 0xd8, 0x00, 0x18, 0x00, 0xc0, 0x00, 0x00, 0x00,
			0x60, 0x00, 0xf8, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x00, 0xd8, 0x00, 0xc0, 0x00,
			0xd8, 0x00, 0xc0, 0x00, 0xc0, 0x00, 0xd8, 0x00, 0xd8, 0x00, 0xc0, 0x00, 0xc0, 0x00, 0xf8, 0x00,
			0xc0, 0x00, 0xd6, 0x00, 0xd8, 0x00, 0xd8, 0x00, 0xf0, 0x00, 0xd8, 0x00, 0xf0, 0x00, 0x18, 0x00,
			0x30, 0x00, 0xd8, 0x00, 0xd8, 0x00, 0xd6, 0x00, 0xd8, 0x00, 0x18, 0x00, 0xc0, 0x00, 0x80, 0x00,
			0x7c, 0x00, 0x20, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x00, 0xd8, 0x00, 0xc0, 0x00,
			0xd8, 0x00, 0xf8, 0x00, 0xf0, 0x00, 0xd8, 0x00, 0xd8, 0x00, 0xc0, 0x00, 0xc0, 0x00, 0xe0, 0x00,
			0xc0, 0x00, 0x6a, 0x00, 0xd0, 0x00, 0xd8, 0x00, 0xd8, 0x00, 0xd8, 0x00, 0xc0, 0x00, 0xf8, 0x00,
			0xc0, 0x00, 0xd8, 0x01, 0xb0, 0x00, 0x56, 0x00, 0x70, 0x00, 0xd8, 0x00, 0x60, 0x00, 0x28, 0x00,
			0xf8, 0x00, 0xa8, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x50, 0x00,
			0x70, 0x00, 0x90, 0x00, 0x68, 0x00, 0x00, 0x00, 0x40, 0x00, 0x20, 0x00, 0x00, 0x00, 0x20, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0xd8, 0x00, 0x30, 0x00, 0x60, 0x00, 0xd8, 0x00,
			0x30, 0x00, 0x18, 0x00, 0xd8, 0x00, 0x30, 0x00, 0xd8, 0x00, 0x18, 0x00, 0x00, 0x00, 0x40, 0x00,
			0x18, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x20, 0x00, 0x00, 0x00, 0xd8, 0x00, 0xd8, 0x00, 0xc8, 0x00,
			0xd8, 0x00, 0xc0, 0x00, 0xc0, 0x00, 0xd8, 0x00, 0xd8, 0x00, 0xc0, 0x00, 0xc0, 0x00, 0xd8, 0x00,
			0xc0, 0x00, 0xd6, 0x00, 0xd8, 0x00, 0xd8, 0x00, 0xc0, 0x00, 0xd8, 0x00, 0xd8, 0x00, 0x98, 0x00,
			0x30, 0x00, 0xd8, 0x00, 0x70, 0x00, 0xfe, 0x00, 0xd8, 0x00, 0x18, 0x00, 0xf8, 0x00, 0xe0, 0x00,
			0x38, 0x00, 0xe0, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x98, 0x00, 0xd8, 0x00, 0xc0, 0x00,
			0xd8, 0x00, 0xc0, 0x00, 0xc0, 0x00, 0x78, 0x00, 0xd8, 0x00, 0xc0, 0x00, 0xc0, 0x00, 0xf0, 0x00,
			0xc0, 0x00, 0x6a, 0x00, 0xd0, 0x00, 0xd8, 0x00, 0xd8, 0x00, 0xd8, 0x00, 0xc0, 0x00, 0x18, 0x00,
			0xc0, 0x00, 0xd8, 0x01, 0xb0, 0x00, 0x56, 0x00, 0xf8, 0x00, 0x78, 0x00, 0xc0, 0x00, 0x28, 0x00,
			0x70, 0x00, 0x30, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x40, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x70, 0x00, 0x30, 0x00, 0xf8, 0x00, 0x70, 0x00,
			0x30, 0x00, 0xf0, 0x00, 0x70, 0x00, 0x30, 0x00, 0x70, 0x00, 0x70, 0x00, 0x00, 0x00, 0x40, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd8, 0x00, 0xf0, 0x00, 0x70, 0x00,
			0xf0, 0x00, 0xf8, 0x00, 0xc0, 0x00, 0x70, 0x00, 0xd8, 0x00, 0xc0, 0x00, 0xc0, 0x00, 0xd8, 0x00,
			0xf8, 0x00, 0xd6, 0x00, 0xd8, 0x00, 0x70, 0x00, 0xc0, 0x00, 0x70, 0x00, 0xd8, 0x00, 0x70, 0x00,
			0x30, 0x00, 0x70, 0x00, 0x20, 0x00, 0x6c, 0x00, 0xd8, 0x00, 0x70, 0x00, 0xf8, 0x00, 0x00, 0x00,
			0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x00, 0xf0, 0x00, 0x78, 0x00,
			0x78, 0x00, 0x78, 0x00, 0xc0, 0x00, 0x18, 0x00, 0xd8, 0x00, 0xc0, 0x00, 0xc0, 0x00, 0xd8, 0x00,
			0xc0, 0x00, 0x6a, 0x00, 0xd0, 0x00, 0x70, 0x00, 0xf0, 0x00, 0x78, 0x00, 0xc0, 0x00, 0xf0, 0x00,
			0x70, 0x00, 0x78, 0x00, 0xe0, 0x00, 0x2e, 0x00, 0xd8, 0x00, 0x18, 0x00, 0xf8, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x02, 0x03, 0x06, 0x06, 0x06, 0x05, 0x01,
			0x03, 0x04, 0x05, 0x05, 0x02, 0x05, 0x02, 0x04, 0x06, 0x05, 0x05, 0x05, 0x06, 0x05, 0x05, 0x05,
			0x05, 0x05, 0x02, 0x02, 0x05, 0x05, 0x05, 0x05, 0x03, 0x08, 0x07, 0x07, 0x07, 0x07, 0x07, 0x08,
			0x07, 0x02, 0x06, 0x08, 0x07, 0x08, 0x07, 0x08, 0x07, 0x09, 0x07, 0x08, 0x07, 0x07, 0x08, 0x0c,
			0x08, 0x08, 0x08, 0x03, 0x07, 0x03, 0x06, 0x09, 0x03, 0x06, 0x06, 0x06, 0x06, 0x05, 0x05, 0x06,
			0x06, 0x02, 0x05, 0x05, 0x03, 0x08, 0x06, 0x07, 0x06, 0x08, 0x05, 0x06, 0x05, 0x06, 0x06, 0x08,
			0x06, 0x06, 0x06, 0x07, 0x05, 0x07, 0x07, 0x04, 0x20, 0x7f, 0x02, 0x00, 0x09, 0x01, 0x01, 0x00,
			0x00, 0x00, 0x00, 0x00, 0xa0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x20, 0x00, 0x80, 0x00,
			0x20, 0x00, 0x40, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,
			0x30, 0x00, 0x70, 0x00, 0x70, 0x00, 0xf8, 0x00, 0x1c, 0x00, 0xf8, 0x00, 0x78, 0x00, 0xf8, 0x00,
			0x70, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00,
			0x00, 0x00, 0x18, 0x00, 0xf8, 0x00, 0x06, 0x00, 0xc0, 0x00, 0x3e, 0x00, 0x3e, 0x00, 0x06, 0x00,
			0xc6, 0x00, 0xc0, 0x00, 0x0c, 0x00, 0xc3, 0x00, 0xc0, 0x00, 0xc3, 0x00, 0xc6, 0x00, 0x18, 0x00,
			0xf8, 0x00, 0x18, 0x00, 0xf8, 0x00, 0x3e, 0x00, 0xfe, 0x00, 0xc6, 0x00, 0xc3, 0x00, 0xc0, 0x30,
			0xc3, 0x00, 0xc3, 0x00, 0xff, 0x00, 0x20, 0x00, 0x10, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00,
			0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x38, 0x00, 0x70, 0x00, 0x00, 0x00,
			0x00, 0x00, 0xc0, 0x00, 0xa0, 0x00, 0x50, 0x00, 0x70, 0x00, 0xa8, 0x00, 0x50, 0x00, 0x80, 0x00,
			0x40, 0x00, 0x20, 0x00, 0xa8, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,
			0x78, 0x00, 0x30, 0x00, 0xf8, 0x00, 0x18, 0x00, 0x38, 0x00, 0x80, 0x00, 0x80, 0x00, 0x98, 0x00,
			0x88, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x88, 0x00,
			0x00, 0x00, 0x18, 0x00, 0xce, 0x00, 0x1c, 0x00, 0xf0, 0x00, 0xe0, 0x00, 0xe0, 0x00, 0x1c, 0x00,
			0xc6, 0x00, 0xc0, 0x00, 0x0c, 0x00, 0xce, 0x00, 0xc0, 0x00, 0xe7, 0x00, 0xe6, 0x00, 0x3c, 0x00,
			0xce, 0x00, 0x3c, 0x00, 0xce, 0x00, 0xe0, 0x00, 0x18, 0x00, 0xc6, 0x00, 0x66, 0x00, 0x60, 0x60,
			0x66, 0x00, 0x66, 0x00, 0x06, 0x00, 0x00, 0x00, 0x28, 0x00, 0x20, 0x00, 0x04, 0x00, 0x38, 0x00,
			0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00,
			0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe6, 0x00, 0xf8, 0x00, 0x18, 0x00, 0x88, 0x00, 0x00, 0x00,
			0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0xf8, 0x00, 0xd8, 0x00, 0x50, 0x00, 0x20, 0x00, 0x80, 0x00,
			0x80, 0x00, 0x10, 0x00, 0x70, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00,
			0xcc, 0x00, 0x30, 0x00, 0x18, 0x00, 0x70, 0x00, 0x58, 0x00, 0xf8, 0x00, 0xf0, 0x00, 0x30, 0x00,
			0x70, 0x00, 0xd8, 0x00, 0xc0, 0x00, 0x40, 0x00, 0x60, 0x00, 0xf8, 0x00, 0x30, 0x00, 0x18, 0x00,
			0x00, 0x00, 0x3c, 0x00, 0xdc, 0x00, 0x70, 0x00, 0xdc, 0x00, 0x70, 0x00, 0xc0, 0x00, 0x70, 0x00,
			0xc6, 0x00, 0xc0, 0x00, 0x0c, 0x00, 0xf8, 0x00, 0xc0, 0x00, 0xff, 0x00, 0xf6, 0x00, 0x66, 0x00,
			0xdc, 0x00, 0x66, 0x00, 0xdc, 0x00, 0x70, 0x00, 0x18, 0x00, 0xc6, 0x00, 0x66, 0x00, 0x60, 0x60,
			0x3c, 0x00, 0x3c, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x4c, 0x00, 0x20, 0x00, 0x0c, 0x00, 0x7c, 0x00,
			0x00, 0x00, 0xf0, 0x00, 0xc0, 0x00, 0x1c, 0x00, 0x0c, 0x00, 0x18, 0x00, 0xc0, 0x00, 0x1c, 0x00,
			0xc0, 0x00, 0xc0, 0x00, 0x18, 0x00, 0xd8, 0x00, 0x60, 0x00, 0xfe, 0x00, 0xd8, 0x00, 0x38, 0x00,
			0xe0, 0x00, 0x1c, 0x00, 0xd8, 0x00, 0x70, 0x00, 0xf8, 0x00, 0xcc, 0x00, 0xcc, 0x00, 0xdb, 0x00,
			0xcc, 0x00, 0xcc, 0x00, 0xfc, 0x00, 0x6e, 0x00, 0xf8, 0x00, 0x2a, 0x00, 0xa8, 0x00, 0x00, 0x00,
			0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x50, 0x00, 0x88, 0x00, 0x30, 0x00, 0x50, 0x00, 0x00, 0x00,
			0x80, 0x00, 0x10, 0x00, 0xa8, 0x00, 0xf8, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x20, 0x00,
			0xcc, 0x00, 0x30, 0x00, 0x30, 0x00, 0x18, 0x00, 0xd8, 0x00, 0x08, 0x00, 0x88, 0x00, 0x30, 0x00,
			0x88, 0x00, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x08, 0x00, 0x30, 0x00,
			0x00, 0x00, 0x3c, 0x00, 0xf0, 0x00, 0xc0, 0x00, 0xc6, 0x00, 0x18, 0x00, 0xfc, 0x00, 0xc3, 0x00,
			0xf6, 0x00, 0xc0, 0x00, 0x0c, 0x00, 0xe0, 0x00, 0xc0, 0x00, 0xdb, 0x00, 0xde, 0x00, 0xc3, 0x00,
			0xf0, 0x00, 0xc3, 0x00, 0xf0, 0x00, 0x18, 0x00, 0x18, 0x00, 0xc6, 0x00, 0x3c, 0x00, 0x36, 0xc0,
			0x18, 0x00, 0x18, 0x00, 0x18, 0x00, 0x00, 0x00, 0x9e, 0x00, 0x20, 0x00, 0xd8, 0x00, 0x7c, 0x00,
			0x00, 0x00, 0x18, 0x00, 0xe0, 0x00, 0x70, 0x00, 0x1c, 0x00, 0x78, 0x00, 0xf0, 0x00, 0x7c, 0x00,
			0xf0, 0x00, 0xc0, 0x00, 0x18, 0x00, 0xf0, 0x00, 0x60, 0x00, 0xff, 0x00, 0xfc, 0x00, 0x6c, 0x00,
			0xf8, 0x00, 0x7c, 0x00, 0xf0, 0x00, 0xe0, 0x00, 0xc0, 0x00, 0xcc, 0x00, 0xcc, 0x00, 0xdb, 0x00,
			0x78, 0x00, 0xcc, 0x00, 0x18, 0x00, 0x2c, 0x00, 0xf8, 0x00, 0x44, 0x00, 0xa8, 0x00, 0x00, 0x00,
			0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0xf8, 0x00, 0xd8, 0x00, 0x68, 0x00, 0x98, 0x00, 0x00, 0x00,
			0x40, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00,
			0xcc, 0x00, 0x30, 0x00, 0x60, 0x00, 0x18, 0x00, 0xf8, 0x00, 0x98, 0x00, 0xd8, 0x00, 0x60, 0x00,
			0xd8, 0x00, 0x78, 0x00, 0xc0, 0x00, 0x40, 0x00, 0x60, 0x00, 0xf8, 0x00, 0x30, 0x00, 0x30, 0x00,
			0x00, 0x00, 0x66, 0x00, 0xdc, 0x00, 0x70, 0x00, 0xdc, 0x00, 0x70, 0x00, 0xc0, 0x00, 0x73, 0x00,
			0xde, 0x00, 0xc0, 0x00, 0x0c, 0x00, 0xf8, 0x00, 0xc0, 0x00, 0xc3, 0x00, 0xce, 0x00, 0x66, 0x00,
			0xc0, 0x00, 0x66, 0x00, 0xd8, 0x00, 0x0e, 0x00, 0x18, 0x00, 0xc6, 0x00, 0x3c, 0x00, 0x3f, 0xc0,
			0x3c, 0x00, 0x18, 0x00, 0x30, 0x00, 0x00, 0x00, 0x7c, 0x00, 0x20, 0x00, 0xf0, 0x00, 0x38, 0x00,
			0x00, 0x00, 0x3c, 0x00, 0xf0, 0x00, 0xc0, 0x00, 0x7c, 0x00, 0xf8, 0x00, 0xc0, 0x00, 0xcc, 0x00,
			0xd8, 0x00, 0xc0, 0x00, 0x18, 0x00, 0xc0, 0x00, 0x60, 0x00, 0xdb, 0x00, 0xec, 0x00, 0xc6, 0x00,
			0xcc, 0x00, 0xcc, 0x00, 0xe0, 0x00, 0x78, 0x00, 0xc0, 0x00, 0xdc, 0x00, 0xd8, 0x00, 0xfe, 0x00,
			0x30, 0x00, 0xdc, 0x00, 0x30, 0x00, 0x28, 0x00, 0xf8, 0x00, 0xa8, 0x00, 0x70, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x00, 0x70, 0x00, 0x90, 0x00, 0x68, 0x00, 0x00, 0x00,
			0x20, 0x00, 0x40, 0x00, 0x00, 0x00, 0x20, 0x00, 0x40, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x40, 0x00,
			0x78, 0x00, 0x78, 0x00, 0xc0, 0x00, 0xf0, 0x00, 0x18, 0x00, 0xf0, 0x00, 0x70, 0x00, 0x60, 0x00,
			0x70, 0x00, 0x08, 0x00, 0x00, 0x00, 0x40, 0x00, 0x18, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x66, 0x00, 0xce, 0x00, 0x1c, 0x00, 0xf0, 0x00, 0xe0, 0x00, 0xc0, 0x00, 0x1f, 0x00,
			0xc6, 0x00, 0xc0, 0x00, 0xec, 0x00, 0xce, 0x00, 0xc0, 0x00, 0xc3, 0x00, 0xc6, 0x00, 0x3c, 0x00,
			0xc0, 0x00, 0x3e, 0x00, 0xcc, 0x00, 0x07, 0x00, 0x18, 0x00, 0xde, 0x00, 0x18, 0x00, 0x19, 0x80,
			0x66, 0x00, 0x18, 0x00, 0x60, 0x00, 0x00, 0x00, 0x38, 0x00, 0xe0, 0x00, 0x60, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x6c, 0x00, 0xd8, 0x00, 0x70, 0x00, 0xcc, 0x00, 0xc0, 0x00, 0xc0, 0x00, 0x7c, 0x00,
			0xd8, 0x00, 0xc0, 0x00, 0x18, 0x00, 0xf0, 0x00, 0x60, 0x00, 0xdb, 0x00, 0xcc, 0x00, 0x6c, 0x00,
			0xf8, 0x00, 0x7c, 0x00, 0xc0, 0x00, 0x0c, 0x00, 0xf8, 0x00, 0xfc, 0x00, 0xf0, 0x00, 0xfc, 0x00,
			0x78, 0x00, 0xfc, 0x00, 0x60, 0x00, 0x28, 0x00, 0x70, 0x00, 0x30, 0x00, 0x70, 0x00, 0x00, 0x00,
			0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00,
			0x30, 0x00, 0x78, 0x00, 0xf8, 0x00, 0xe0, 0x00, 0x3c, 0x00, 0x60, 0x00, 0x20, 0x00, 0x60, 0x00,
			0x20, 0x00, 0x70, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00,
			0x00, 0x00, 0xc3, 0x00, 0xf8, 0x00, 0x06, 0x00, 0xc0, 0x00, 0x3e, 0x00, 0xc0, 0x00, 0x07, 0x00,
			0xc6, 0x00, 0xc0, 0x00, 0x3c, 0x00, 0xc3, 0x00, 0xfe, 0x00, 0xc3, 0x00, 0xc6, 0x00, 0x18, 0x00,
			0xc0, 0x00, 0x1b, 0x80, 0xc6, 0x00, 0x7c, 0x00, 0x18, 0x00, 0xf6, 0x00, 0x18, 0x00, 0x19, 0x80,
			0xc3, 0x00, 0x18, 0x00, 0xff, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0xfc, 0x00, 0xfc, 0x00, 0x1c, 0x00, 0x7c, 0x00, 0xf8, 0x00, 0xc0, 0x00, 0x1c, 0x00,
			0xcc, 0x00, 0xc0, 0x00, 0x18, 0x00, 0xd8, 0x00, 0x60, 0x00, 0xdb, 0x00, 0xcc, 0x00, 0x38, 0x00,
			0xe0, 0x00, 0x1c, 0x00, 0xc0, 0x00, 0x78, 0x00, 0xe0, 0x00, 0xec, 0x00, 0xe0, 0x00, 0xd8, 0x00,
			0xcc, 0x00, 0xec, 0x00, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0xc0, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00,
			0x00, 0x00, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0xc0, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x03, 0x02, 0x03, 0x06, 0x06, 0x06, 0x05, 0x01, 0x03, 0x04, 0x05, 0x05, 0x02, 0x05, 0x01, 0x04,
			0x05, 0x03, 0x06, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x02, 0x02, 0x05, 0x05, 0x05, 0x05,
			0x03, 0x08, 0x08, 0x06, 0x08, 0x05, 0x05, 0x07, 0x08, 0x05, 0x05, 0x0a, 0x08, 0x0b, 0x07, 0x07,
			0x08, 0x08, 0x09, 0x05, 0x07, 0x0a, 0x09, 0x0a, 0x09, 0x07, 0x07, 0x03, 0x07, 0x03, 0x06, 0x09,
			0x03, 0x06, 0x06, 0x04, 0x06, 0x04, 0x05, 0x06, 0x08, 0x04, 0x04, 0x06, 0x04, 0x0a, 0x07, 0x04,
			0x07, 0x06, 0x06, 0x04, 0x05, 0x06, 0x08, 0x0a, 0x07, 0x07, 0x04, 0x05, 0x04, 0x09, 0x0c, 0x20,
			0x7e, 0x02, 0x00, 0x09, 0x01, 0x01, 0x00, 0x00, 0x00, 0x40, 0x00, 0xa0, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x40, 0x00, 0x20, 0x00, 0x80, 0x00, 0x20, 0x00, 0x40, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x20, 0x00, 0x7c, 0x00, 0x30, 0x00, 0x7c,
			0x00, 0x70, 0x00, 0x70, 0x00, 0x38, 0x00, 0x71, 0x00, 0x78, 0x00, 0x38, 0x00, 0x71, 0x00, 0x70,
			0x00, 0x6d, 0x80, 0xd8, 0x00, 0x38, 0x00, 0x7c, 0x00, 0x38, 0x00, 0x7c, 0x00, 0x70, 0x00, 0x7e,
			0x00, 0x72, 0x00, 0x30, 0x80, 0x76, 0xc0, 0x71, 0x80, 0x72, 0x00, 0x7e, 0x00, 0xe0, 0x00, 0x10,
			0x00, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x0c,
			0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x60, 0x00, 0x20, 0x00, 0x10, 0x00, 0x60, 0x00, 0x60,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x40, 0x00, 0xa0, 0x00, 0x50, 0x00, 0x70, 0x00, 0xa8,
			0x00, 0x50, 0x00, 0x80, 0x00, 0x40, 0x00, 0x20, 0x00, 0xa8, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x10, 0x00, 0x70, 0x00, 0x40, 0x00, 0x70, 0x00, 0x70, 0x00, 0x10, 0x00, 0xf8,
			0x00, 0x70, 0x00, 0xf8, 0x00, 0x70, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00,
			0x00, 0xc0, 0x00, 0x88, 0x00, 0x00, 0x00, 0x50, 0x00, 0x92, 0x00, 0x48, 0x00, 0x92, 0x00, 0x88,
			0x00, 0x88, 0x00, 0x44, 0x00, 0x91, 0x00, 0x90, 0x00, 0x48, 0x00, 0x92, 0x00, 0x90, 0x00, 0x92,
			0x41, 0x24, 0x00, 0x44, 0x00, 0x92, 0x00, 0x44, 0x00, 0x92, 0x00, 0x88, 0x00, 0x90, 0x00, 0x92,
			0x00, 0x48, 0x80, 0x92, 0x40, 0x91, 0x00, 0x92, 0x00, 0x84, 0x00, 0x80, 0x00, 0x28, 0x00, 0x20,
			0x00, 0x04, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00,
			0x00, 0x48, 0x00, 0x00, 0x00, 0xa0, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa0, 0x00, 0xa0, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0xb0, 0x00, 0x03,
			0x00, 0x07, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0xf8, 0x00, 0xd8, 0x00, 0x50, 0x00, 0x20,
			0x00, 0x80, 0x00, 0x80, 0x00, 0x10, 0x00, 0x70, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x20, 0x00, 0x88, 0x00, 0xc0, 0x00, 0x88, 0x00, 0x98, 0x00, 0x30, 0x00, 0x80, 0x00, 0x80,
			0x00, 0x88, 0x00, 0x88, 0x00, 0x88, 0x00, 0xc0, 0x00, 0x40, 0x00, 0x60, 0x00, 0xf8, 0x00, 0x30,
			0x00, 0x08, 0x00, 0x00, 0x00, 0x88, 0x00, 0x1e, 0x00, 0x84, 0x00, 0x11, 0x00, 0x88, 0x00, 0x88,
			0x00, 0x80, 0x00, 0x17, 0x00, 0x10, 0x00, 0x08, 0x00, 0x14, 0x00, 0x10, 0x00, 0x12, 0x20, 0x22,
			0x00, 0x82, 0x00, 0x11, 0x00, 0x82, 0x00, 0x11, 0x00, 0x88, 0x00, 0x10, 0x00, 0x22, 0x00, 0x08,
			0x80, 0x24, 0x40, 0x0a, 0x00, 0x26, 0x00, 0x08, 0x00, 0x80, 0x00, 0x4c, 0x00, 0x20, 0x00, 0x0c,
			0x00, 0x7c, 0x00, 0x00, 0x00, 0x60, 0x00, 0x38, 0x00, 0x60, 0x00, 0x70, 0x00, 0x60, 0x00, 0x40,
			0x00, 0x78, 0x00, 0x2c, 0x00, 0x60, 0x00, 0x70, 0x00, 0x28, 0x00, 0x20, 0x00, 0x69, 0x80, 0xd8,
			0x00, 0x60, 0x00, 0x68, 0x00, 0x68, 0x00, 0x68, 0x00, 0x70, 0x00, 0xf0, 0x00, 0xec, 0x00, 0x77,
			0x00, 0x71, 0xc0, 0x66, 0x00, 0x66, 0x00, 0xf0, 0x00, 0x50, 0x00, 0x50, 0x01, 0x04, 0x80, 0x0f,
			0x80, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x50, 0x00, 0x88, 0x00, 0x30, 0x00, 0x50, 0x00, 0x00,
			0x00, 0x80, 0x00, 0x10, 0x00, 0xa8, 0x00, 0xf8, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x20,
			0x00, 0x88, 0x00, 0x40, 0x00, 0x08, 0x00, 0x30, 0x00, 0x50, 0x00, 0x70, 0x00, 0xf0, 0x00, 0x10,
			0x00, 0x70, 0x00, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x08, 0x00, 0x10,
			0x00, 0x00, 0x00, 0x88, 0x00, 0x12, 0x00, 0x80, 0x00, 0x11, 0x00, 0x80, 0x00, 0x80, 0x00, 0x9c,
			0x00, 0x19, 0x00, 0x10, 0x00, 0x08, 0x00, 0x1c, 0x00, 0x10, 0x00, 0x12, 0x20, 0x22, 0x00, 0x82,
			0x00, 0x12, 0x00, 0x82, 0x00, 0x12, 0x00, 0x60, 0x00, 0x10, 0x00, 0x42, 0x00, 0x08, 0x80, 0x24,
			0x40, 0x04, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x80, 0x00, 0x9e, 0x00, 0x20, 0x00, 0xd8, 0x00, 0x7c,
			0x00, 0x00, 0x00, 0x90, 0x00, 0x24, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0xe0, 0x00, 0x94,
			0x00, 0x32, 0x00, 0xa0, 0x00, 0x90, 0x00, 0x34, 0x00, 0x20, 0x00, 0xb6, 0x40, 0x64, 0x00, 0x90,
			0x00, 0xb4, 0x00, 0x94, 0x00, 0xb4, 0x00, 0x80, 0x00, 0x40, 0x00, 0x24, 0x00, 0xa2, 0x00, 0xa4,
			0x80, 0xa4, 0x00, 0xa4, 0x00, 0x90, 0x00, 0x88, 0x00, 0xa0, 0x01, 0xfe, 0x80, 0x2f, 0xa0, 0x00,
			0x00, 0x40, 0x00, 0x00, 0x00, 0xf8, 0x00, 0xd8, 0x00, 0x68, 0x00, 0x98, 0x00, 0x00, 0x00, 0x40,
			0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x88,
			0x00, 0x40, 0x00, 0x30, 0x00, 0x18, 0x00, 0xf8, 0x00, 0x08, 0x00, 0x88, 0x00, 0x30, 0x00, 0x88,
			0x00, 0x78, 0x00, 0xc0, 0x00, 0x40, 0x00, 0x60, 0x00, 0xf8, 0x00, 0x30, 0x00, 0x20, 0x00, 0x00,
			0x00, 0xf8, 0x00, 0x11, 0x00, 0x84, 0x00, 0x11, 0x00, 0xf0, 0x00, 0xf0, 0x00, 0x84, 0x00, 0x11,
			0x00, 0x10, 0x00, 0x88, 0x00, 0x12, 0x00, 0x10, 0x00, 0x12, 0x40, 0x24, 0x00, 0x82, 0x00, 0x1c,
			0x00, 0x82, 0x00, 0x1c, 0x00, 0x10, 0x00, 0x10, 0x00, 0x42, 0x00, 0x08, 0x80, 0x24, 0x40, 0x0a,
			0x00, 0x02, 0x00, 0x20, 0x00, 0x80, 0x00, 0x7c, 0x00, 0x20, 0x00, 0xf0, 0x00, 0x38, 0x00, 0x00,
			0x00, 0x90, 0x00, 0x24, 0x00, 0x80, 0x00, 0x90, 0x00, 0xf0, 0x00, 0x40, 0x00, 0x90, 0x00, 0x22,
			0x00, 0x20, 0x00, 0x10, 0x00, 0x30, 0x00, 0x20, 0x00, 0x24, 0x40, 0x44, 0x00, 0x90, 0x00, 0x24,
			0x00, 0x90, 0x00, 0x20, 0x00, 0x60, 0x00, 0x40, 0x00, 0x44, 0x00, 0x36, 0x00, 0x24, 0x80, 0x18,
			0x00, 0x24, 0x00, 0x20, 0x00, 0x50, 0x00, 0xd0, 0x00, 0xff, 0x00, 0x25, 0x20, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x50, 0x00, 0x70, 0x00, 0x90, 0x00, 0x68, 0x00, 0x00, 0x00, 0x20, 0x00, 0x40,
			0x00, 0x00, 0x00, 0x20, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x88, 0x00, 0x40,
			0x00, 0x44, 0x00, 0x88, 0x00, 0x10, 0x00, 0x88, 0x00, 0x88, 0x00, 0x20, 0x00, 0x88, 0x00, 0x08,
			0x00, 0x00, 0x00, 0x40, 0x00, 0x18, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89,
			0x00, 0x12, 0x00, 0x48, 0x00, 0x12, 0x00, 0x80, 0x00, 0x80, 0x00, 0x4c, 0x00, 0x11, 0x00, 0x10,
			0x00, 0x48, 0x00, 0x12, 0x40, 0x11, 0x00, 0x12, 0x80, 0x28, 0x00, 0x44, 0x00, 0x10, 0x00, 0x54,
			0x00, 0x14, 0x80, 0x88, 0x00, 0x10, 0x00, 0x26, 0x40, 0x05, 0x00, 0x16, 0x80, 0x11, 0x00, 0x22,
			0x00, 0x42, 0x00, 0xe0, 0x00, 0x38, 0x00, 0xe0, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb4,
			0x00, 0xa4, 0x00, 0x90, 0x00, 0x94, 0x00, 0x80, 0x00, 0x40, 0x00, 0x90, 0x00, 0xa4, 0x00, 0x20,
			0x00, 0x10, 0x00, 0x28, 0x00, 0x20, 0x00, 0x24, 0x80, 0x48, 0x00, 0x90, 0x00, 0x24, 0x00, 0x90,
			0x00, 0x20, 0x00, 0x10, 0x00, 0x48, 0x00, 0x4d, 0x00, 0x14, 0x00, 0x2a, 0x80, 0x24, 0x00, 0x28,
			0x00, 0x50, 0x00, 0x20, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x57, 0x50, 0x00, 0x00, 0x40, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x70, 0x00, 0xe0, 0x00, 0xf8,
			0x00, 0x70, 0x00, 0x38, 0x00, 0x70, 0x00, 0x70, 0x00, 0x20, 0x00, 0x70, 0x00, 0x70, 0x00, 0x00,
			0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x86, 0x00, 0x1c,
			0x00, 0x30, 0x00, 0x1c, 0x00, 0x78, 0x00, 0x80, 0x00, 0x34, 0x00, 0x11, 0x00, 0x78, 0x00, 0x30,
			0x00, 0x11, 0x80, 0x1f, 0x00, 0x12, 0xe0, 0x2e, 0x00, 0x38, 0x00, 0x10, 0x00, 0x39, 0x00, 0x13,
			0x00, 0x70, 0x00, 0x10, 0x00, 0x19, 0x80, 0x02, 0x00, 0x09, 0x00, 0x31, 0x80, 0x1c, 0x00, 0xfc,
			0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x58,
			0x00, 0x60, 0x00, 0x68, 0x00, 0x70, 0x00, 0xe0, 0x00, 0x70, 0x00, 0x67, 0x00, 0x70, 0x00, 0x10,
			0x00, 0x64, 0x00, 0x70, 0x00, 0x35, 0xc0, 0x6e, 0x00, 0x60, 0x00, 0x38, 0x00, 0x70, 0x00, 0x70,
			0x00, 0xe0, 0x00, 0x30, 0x00, 0x36, 0x00, 0x08, 0x00, 0x11, 0x00, 0x66, 0x00, 0x18, 0x00, 0xf0,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfd, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa0, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00
		};
		#endregion

		public VGADriver(Civilization parent)
		{
			this.oParent = parent;
			this.oCPU = parent.CPU;

			this.aScreens.Add(0, new VGABitmap()); // our Main screen

			// start our VGAForm thread
			this.oVGAThread = new Thread(VGAFormThread);
			this.oVGAThread.Start();
		}

		private void VGAFormThread()
		{
			Application.EnableVisualStyles();
			Application.SetCompatibleTextRenderingDefault(false);
			this.oVGAForm = new VGAForm(this);
			Application.Run(this.oVGAForm);
		}

		public ushort Segment
		{
			get { return this.usSegment; }
			set
			{
				this.usSegment = value;
				this.oCPU.WriteWord(this.usSegment, 0x28, this.usSegment);
				this.oCPU.WriteWord(this.usSegment, 0x2a, (ushort)(this.usSegment + 0x13c));
				this.oCPU.WriteWord(this.usSegment, 0x1988, (ushort)(this.usSegment + 0x13c));

				/*this.oCPU.Log.EnterBlock("Color block 1");

				for (int i = 0; i < 16; i++)
				{
					ushort usTemp = (ushort)(0x1410 + i * 3);
					Color color = VGAScreen.GetColor18(this.oCPU.ReadByte(this.usSegment, usTemp),
						this.oCPU.ReadByte(this.usSegment, (ushort)(usTemp + 1)),
						this.oCPU.ReadByte(this.usSegment, (ushort)(usTemp + 2)));

					this.oCPU.Log.WriteLine($"Palette index {i}, #{color.ToArgb():x6}");
				}

				this.oCPU.Log.ExitBlock("Color block 1");*/
			}
		}

		public BDictionary<int, VGABitmap> Screens
		{
			get { return this.aScreens; }
		}

		public Queue<char> Keys
		{
			get { return this.aKeys; }
		}

		public void F0_VGA_009a_ReplaceColor(ushort struct1, ushort xPos, ushort yPos, ushort width, ushort height, byte oldColor, byte newColor)
		{
			LogWrapper oTempLog = this.oCPU.Log;
			this.oCPU.Log.WriteLine($"// Calling 'F0_VGA_009a_ReplaceColor'(0x{struct1:x4}, {xPos}, {yPos}, {width}, {height}, {oldColor}, {newColor})");
			this.oCPU.Log = this.oParent.VGADriverLog;
			this.oCPU.Log.EnterBlock($"'F0_VGA_009a_ReplaceColor'(0x{struct1:x4}, {xPos}, {yPos}, {width}, {height}, {oldColor}, {newColor})");

			// function body
			lock (this.VGALock)
			{
				ushort usScreenID = this.oCPU.ReadWord(this.oCPU.DS.Word, struct1);
				int iTop = this.oCPU.ReadWord(this.oCPU.DS.Word, (ushort)(struct1 + 0x2)) + xPos;
				int iLeft = this.oCPU.ReadWord(this.oCPU.DS.Word, (ushort)(struct1 + 0x4)) + yPos;

				if (this.aScreens.ContainsKey(usScreenID))
				{
					this.aScreens.GetValueByKey(usScreenID).ReplaceColor(new Rectangle(iTop, iLeft, width, height), oldColor, newColor);
				}
				else
				{
					throw new Exception($"The page {usScreenID} is not allocated");
				}
			}

			// Far return
			this.oCPU.Log.ExitBlock("'F0_VGA_009a_ReplaceColor'");
			this.oCPU.Log = oTempLog;
		}

		public void F0_VGA_010c_SetColorsByIndexArray(ushort indexArrayPtr)
		{
			LogWrapper oTempLog = this.oCPU.Log;
			this.oCPU.Log.WriteLine($"// Calling 'F0_VGA_010c_SetColorsByIndexArray'");
			this.oCPU.Log = this.oParent.VGADriverLog;
			this.oCPU.Log.EnterBlock("'F0_VGA_010c_SetColorsByIndexArray'");

			// function body
			lock (this.VGALock)
			{
				Color[] aColors = new Color[16];

				for (int i = 0; i < 16; i++)
				{
					aColors[i] = VGABitmap.Palette1[this.oCPU.ReadByte(this.oCPU.DS.Word, indexArrayPtr)];

					indexArrayPtr++;
				}

				// set colors to all planes, as this is what original code does
				for (int i = 0; i < this.aScreens.Count; i++)
				{
					this.aScreens[i].Value.SetColorsFromArray(aColors, 0, 0, 16);
				}
			}

			// Far return
			this.oCPU.Log.ExitBlock("'F0_VGA_010c_SetColorsByIndexArray'");
			this.oCPU.Log = oTempLog;
		}

		public void F0_VGA_0162_SetColorsFromStruct(ushort structPtr)
		{
			LogWrapper oTempLog = this.oCPU.Log;
			this.oCPU.Log.WriteLine($"// Calling 'F0_VGA_0162_SetColorsFromStruct'(0x{structPtr:x4})");
			this.oCPU.Log = this.oParent.VGADriverLog;
			this.oCPU.Log.EnterBlock($"'F0_VGA_0162_SetColorsFromStruct'(0x{structPtr:x4})");

			// function body
			if (this.oCPU.ReadWord(this.oCPU.DS.Word, structPtr) == 0x304d)
			{
				ushort usFromIndex = this.oCPU.ReadByte(this.oCPU.DS.Word, (ushort)(structPtr + 0x4));
				ushort usToIndex = this.oCPU.ReadByte(this.oCPU.DS.Word, (ushort)(structPtr + 0x5));

				usToIndex -= usFromIndex;
				usToIndex++;

				F0_VGA_01a1_SetColorBlock(this.oCPU.DS.Word, (ushort)(structPtr + 6), usFromIndex, usToIndex);
			}

			// Far return
			this.oCPU.Log.ExitBlock("'F0_VGA_0162_SetColorsFromStruct'");
			this.oCPU.Log = oTempLog;
		}

		public void F0_VGA_01a1_SetColorBlock(ushort segment, ushort offset, ushort index, ushort count)
		{
			// function body
			lock (this.VGALock)
			{
				Color[] aColors = new Color[count];

				for (int i = 0; i < count; i++)
				{
					aColors[i] = VGABitmap.GetColor18(this.oCPU.Memory.ReadByte(segment, (ushort)(offset + (i * 3))),
						this.oCPU.Memory.ReadByte(segment, (ushort)(offset + (i * 3) + 1)),
						this.oCPU.Memory.ReadByte(segment, (ushort)(offset + (i * 3) + 2)));

					this.oCPU.Log.WriteLine($"Setting palette index {index + i}, #{aColors[i].A:x2}{aColors[i].R:x2}{aColors[i].G:x2}{aColors[i].B:x2}");
				}

				// set colors to all planes, as this is what original code does
				for (int i = 0; i < this.aScreens.Count; i++)
				{
					this.aScreens[i].Value.SetColorsFromArray(aColors, 0, index, count);
				}
			}
		}

		public void F0_VGA_020c_SetFrontColorAndPixelMode(byte frontColor, byte pixelMode)
		{
			LogWrapper oTempLog = this.oCPU.Log;
			this.oCPU.Log.WriteLine($"// Calling 'F0_VGA_020c_SetFrontColorAndPixelMode'({frontColor}, {(PixelWriteModeEnum)pixelMode})");
			this.oCPU.Log = this.oParent.VGADriverLog;
			this.oCPU.Log.EnterBlock($"'F0_VGA_020c_SetFrontColorAndPixelMode'({frontColor}, {(PixelWriteModeEnum)pixelMode})");

			// function body
			this.Var_198a_FrontColor = frontColor;
			this.Var_198b_PixelMode = (PixelWriteModeEnum)(pixelMode & 3);

			// Far return
			this.oCPU.Log.ExitBlock("'F0_VGA_020c_SetFrontColorAndPixelMode'");
			this.oCPU.Log = oTempLog;
		}

		public void F0_VGA_0224_DrawBufferToScreen()
		{
			LogWrapper oTempLog = this.oCPU.Log;
			this.oCPU.Log.WriteLine($"// Calling 'F0_VGA_0224_DrawBufferToScreen'");
			this.oCPU.Log = this.oParent.VGADriverLog;
			this.oCPU.Log.EnterBlock("'F0_VGA_0224_DrawBufferToScreen'");
			this.oCPU.CS.Word = this.usSegment; // set this function segment

			// function body
			if (this.Var_15d2_BufferFlag != 0)
			{
				lock (this.VGALock)
				{
					int iBufferPos = 0;
					VGABitmap mainScreen = this.aScreens.GetValueByKey(0);

					for (int i = 0; i < this.Var_15d0_BufferHeight; i++) // height
					{
						for (int j = 0; j < this.Var_15ce_BufferWidth; j++) // width
						{
							mainScreen.SetPixel(this.Var_15ca_BufferX + j, this.Var_15cc_BufferY + i, this.Var_15d6_Buffer[iBufferPos]);
							iBufferPos++;
						}
					}
				}
			}
			this.Var_15d2_BufferFlag = 0x0;

			// Far return
			this.oCPU.Log.ExitBlock("'F0_VGA_0224_DrawBufferToScreen'");
			this.oCPU.Log = oTempLog;
		}

		public void F0_VGA_0270()
		{
			LogWrapper oTempLog = this.oCPU.Log;
			this.oCPU.Log.WriteLine($"// Calling 'F0_VGA_0270'");
			this.oCPU.Log = this.oParent.VGADriverLog;
			this.oCPU.Log.EnterBlock("'F0_VGA_0270'");
			this.oCPU.CS.Word = this.usSegment; // set this function segment

			// function body
			ushort param1 = this.oCPU.Memory.ReadWord(this.oCPU.SS.Word, (ushort)(this.oCPU.SP.Word + 4));
			ushort param2 = this.oCPU.Memory.ReadWord(this.oCPU.SS.Word, (ushort)(this.oCPU.SP.Word + 6));
			ushort param3 = this.oCPU.Memory.ReadWord(this.oCPU.SS.Word, (ushort)(this.oCPU.SP.Word + 8));

			this.Var_15c0 = param3;
			this.oCPU.AX.Word = param1;
			this.Var_15c2 = this.oCPU.AX.Word;
			this.oCPU.BX.Word = this.oCPU.ReadWord(param3, 0x0);
			this.Var_15c6 = this.oCPU.BX.Word;
			if (this.oCPU.BX.Word == 0) goto L0306;
			this.oCPU.AX.Word = this.oCPU.ORWord(this.oCPU.AX.Word, this.oCPU.AX.Word);
			if (this.oCPU.Flags.NS) goto L02a0;
			this.oCPU.AX.Word = this.oCPU.NEGWord(this.oCPU.AX.Word);
			this.oCPU.BX.Word = this.oCPU.SUBWord(this.oCPU.BX.Word, this.oCPU.AX.Word);
			if (this.oCPU.Flags.BE) goto L0306;
			this.oCPU.AX.Word = 0x0;

		L02a0:
			this.oCPU.CX.Word = 320;
			this.oCPU.CX.Word = this.oCPU.SUBWord(this.oCPU.CX.Word, this.oCPU.AX.Word);
			if (this.oCPU.Flags.BE) goto L0306;
			this.oCPU.CMPWord(this.oCPU.BX.Word, this.oCPU.CX.Word);
			if (this.oCPU.Flags.BE) goto L02ad;
			this.oCPU.BX.Word = this.oCPU.CX.Word;

		L02ad:
			this.Var_15ce_BufferWidth = this.oCPU.BX.Word;
			this.Var_15ca_BufferX = this.oCPU.AX.Word;
			this.oCPU.AX.Word = 0x200;
			this.oCPU.CWD(this.oCPU.AX, this.oCPU.DX);
			this.oCPU.DIVWord(this.oCPU.AX, this.oCPU.DX, this.oCPU.BX.Word);
			this.oCPU.DX.Word = this.oCPU.AX.Word;
			this.oCPU.AX.Word = param2;
			this.Var_15c4 = this.oCPU.AX.Word;
			this.oCPU.BX.Word = this.oCPU.ReadWord(param3, 0x2);
			this.Var_15c8 = this.oCPU.BX.Word;
			this.oCPU.BX.Word = this.oCPU.ORWord(this.oCPU.BX.Word, this.oCPU.BX.Word);
			if (this.oCPU.Flags.E) goto L0306;
			this.oCPU.AX.Word = this.oCPU.ORWord(this.oCPU.AX.Word, this.oCPU.AX.Word);
			if (this.oCPU.Flags.NS) goto L02db;
			this.oCPU.AX.Word = this.oCPU.NEGWord(this.oCPU.AX.Word);
			this.oCPU.BX.Word = this.oCPU.SUBWord(this.oCPU.BX.Word, this.oCPU.AX.Word);
			if (this.oCPU.Flags.BE) goto L0306;
			this.oCPU.AX.Word = 0x0;

		L02db:
			this.oCPU.CX.Word = 0xc8;
			this.oCPU.CX.Word = this.oCPU.SUBWord(this.oCPU.CX.Word, this.oCPU.AX.Word);
			if (this.oCPU.Flags.BE) goto L0306;
			this.oCPU.CMPWord(this.oCPU.BX.Word, this.oCPU.CX.Word);
			if (this.oCPU.Flags.BE) goto L02e8;
			this.oCPU.BX.Word = this.oCPU.CX.Word;

		L02e8:
			this.oCPU.CMPWord(this.oCPU.BX.Word, this.oCPU.DX.Word);
			if (this.oCPU.Flags.BE) goto L02ee;
			this.oCPU.BX.Word = this.oCPU.DX.Word;

		L02ee:
			this.Var_15d0_BufferHeight = this.oCPU.BX.Word;
			this.Var_15cc_BufferY = this.oCPU.AX.Word;
			this.Var_15d2_BufferFlag = 1;
			
			this.oCPU.PushWord(this.oCPU.CS.Word); // stack management - push return segment
			this.oCPU.PushWord(0x0303); // stack management - push return offset
			// Instruction address 0x0000:0x0300, size: 3
			F0_VGA_030e_FillBuffer(0);
			this.oCPU.PopDWord(); // stack management - pop return offset and segment
			this.oCPU.CS.Word = this.usSegment; // restore this function segment

		L0303:
			// Far return
			this.oCPU.Log.ExitBlock("'F0_VGA_0270'");
			this.oCPU.Log = oTempLog;
			return;

		L0306:
			this.Var_15d2_BufferFlag = 0;
			goto L0303;
		}

		public void F0_VGA_030e_FillBuffer(ushort screenID)
		{
			LogWrapper oTempLog = this.oCPU.Log;
			this.oCPU.Log.WriteLine($"// Calling 'F0_VGA_030e_FillBuffer'({screenID})");
			this.oCPU.Log = this.oParent.VGADriverLog;
			this.oCPU.Log.EnterBlock($"'F0_VGA_030e_FillBuffer'({screenID})");
			this.oCPU.CS.Word = this.usSegment; // set this function segment

			// function body
			this.oCPU.PushWord(this.oCPU.SI.Word);
			this.oCPU.PushWord(this.oCPU.DI.Word);
			this.oCPU.PushWord(this.oCPU.DS.Word);
			this.oCPU.PushWord(this.oCPU.ES.Word);

			this.Var_15d4_Page = screenID;

			if (this.Var_15d2_BufferFlag != 0)
			{
				if (this.aScreens.ContainsKey(screenID))
				{
					lock (this.VGALock)
					{
						VGABitmap plane = this.aScreens.GetValueByKey(screenID);

						int iBufferPos = 0;

						for (int i = 0; i < this.Var_15d0_BufferHeight; i++)
						{
							for (int j = 0; j < this.Var_15ce_BufferWidth; j++)
							{
								this.Var_15d6_Buffer[iBufferPos] = plane.GetPixel(this.Var_15ca_BufferX + j, this.Var_15cc_BufferY + i);
								iBufferPos++;
							}
						}

						this.oCPU.PushWord(0xc7);
						this.oCPU.PushWord(0x13f);
						this.oCPU.PushWord(0);
						this.oCPU.PushWord(0);
						this.oCPU.PushWord(this.Var_15d4_Page);
						this.oCPU.PushWord(this.Var_15c0);
						this.oCPU.PushWord(this.Var_15c4);
						this.oCPU.PushWord(this.Var_15c2);
						this.oCPU.PushWord(this.oCPU.SP.Word);

						this.oCPU.PushWord(this.oCPU.CS.Word); // stack management - push return segment
						this.oCPU.PushWord(0x0383); // stack management - push return offset
													// Instruction address 0x0000:0x0380, size: 3
						F0_VGA_0c3e();
						this.oCPU.PopDWord(); // stack management - pop return offset and segment
						this.oCPU.CS.Word = this.usSegment; // restore this function segment
						this.oCPU.SP.Word = this.oCPU.ADDWord(this.oCPU.SP.Word, 0x12);
					}
				}
			}
			else
			{
				throw new Exception($"The page {screenID} is not allocated");
			}

			this.oCPU.ES.Word = this.oCPU.PopWord();
			this.oCPU.DS.Word = this.oCPU.PopWord();
			this.oCPU.DI.Word = this.oCPU.PopWord();
			this.oCPU.SI.Word = this.oCPU.PopWord();
			// Far return
			this.oCPU.Log.ExitBlock("'F0_VGA_030e_FillBuffer'");
			this.oCPU.Log = oTempLog;
		}

		public void F0_VGA_038c_GetPixel(ushort screenID, ushort xPos, ushort yPos)
		{
			LogWrapper oTempLog = this.oCPU.Log;
			this.oCPU.Log.WriteLine($"// Calling 'F0_VGA_038c_GetPixel'({screenID}, {xPos}, {yPos})");
			this.oCPU.Log = this.oParent.VGADriverLog;
			this.oCPU.Log.EnterBlock($"'F0_VGA_038c_GetPixel'({screenID}, {xPos}, {yPos})");

			// function body
			if (this.aScreens.ContainsKey(screenID))
			{
				this.oCPU.AX.Word = this.aScreens.GetValueByKey(screenID).GetPixel(xPos, yPos);
			}
			else
			{
				throw new Exception($"The page {screenID} is not allocated");
			}

			// Far return
			this.oCPU.Log.ExitBlock("'F0_VGA_038c_GetPixel'");
			this.oCPU.Log = oTempLog;
		}

		public void F0_VGA_03b1()
		{
			LogWrapper oTempLog = this.oCPU.Log;
			this.oCPU.Log.WriteLine($"// Calling 'F0_VGA_03b1'");
			this.oCPU.Log = this.oParent.VGADriverLog;
			this.oCPU.Log.EnterBlock("'F0_VGA_03b1'");
			this.oCPU.CS.Word = this.usSegment; // set this function segment

			// function body
			this.oCPU.PushWord(this.oCPU.BP.Word);
			this.oCPU.BP.Word = this.oCPU.SP.Word;
			this.oCPU.PushWord(this.oCPU.SI.Word);
			this.oCPU.PushWord(this.oCPU.DI.Word);
			this.oCPU.PushWord(this.oCPU.DS.Word);
			this.oCPU.AX.Word = this.oCPU.DS.Word;
			this.oCPU.ES.Word = this.oCPU.AX.Word;
			this.oCPU.DI.Word = this.oCPU.ReadWord(this.oCPU.SS.Word, (ushort)(this.oCPU.BP.Word + 0x6));
			this.oCPU.SI.Word = this.oCPU.ReadWord(this.oCPU.SS.Word, (ushort)(this.oCPU.BP.Word + 0xc));
			//this.oCPU.SI.Word = this.oCPU.SHLWord(this.oCPU.SI.Word, 0x1);
			//this.oCPU.SI.Word = this.oCPU.ReadWord(this.oCPU.CS.Word, (ushort)(this.oCPU.SI.Word + 0x17d6));
			this.oCPU.SI.Word = (ushort)(VGADriver.ScreenWidth * this.oCPU.SI.Word);
			this.oCPU.SI.Word = this.oCPU.ADDWord(this.oCPU.SI.Word, this.oCPU.ReadWord(this.oCPU.SS.Word, (ushort)(this.oCPU.BP.Word + 0xa)));
			this.oCPU.CX.Word = this.oCPU.ReadWord(this.oCPU.SS.Word, (ushort)(this.oCPU.BP.Word + 0xe));
			this.oCPU.BX.Word = this.oCPU.ReadWord(this.oCPU.SS.Word, (ushort)(this.oCPU.BP.Word + 0x8));
			//this.oCPU.BX.Word <<= 1;
			//this.oCPU.DS.Word = this.oCPU.ReadWord(this.oCPU.CS.Word, (ushort)(this.oCPU.BX.Word + 0x1970));
			this.oCPU.DS.Word = this.Var_1970[this.oCPU.BX.Word];

			this.oCPU.REPEMOVSByte(this.oCPU.DS, this.oCPU.SI, this.oCPU.ES, this.oCPU.DI, this.oCPU.CX);
			this.oCPU.DS.Word = this.oCPU.PopWord();
			this.oCPU.DI.Word = this.oCPU.PopWord();
			this.oCPU.SI.Word = this.oCPU.PopWord();
			this.oCPU.BP.Word = this.oCPU.PopWord();
			// Far return
			this.oCPU.Log.ExitBlock("'F0_VGA_03b1'");
			this.oCPU.Log = oTempLog;
		}

		public void F0_VGA_03df_CopyLine(ushort bufferPtr, ushort screenID, ushort xPos, ushort yPos, ushort width)
		{
			LogWrapper oTempLog = this.oCPU.Log;
			this.oCPU.Log.WriteLine($"// Calling 'F0_VGA_03df_CopyLine'(0x{bufferPtr:x4}, {screenID}, {xPos}, {yPos}, {width})");
			this.oCPU.Log = this.oParent.VGADriverLog;
			this.oCPU.Log.EnterBlock($"'F0_VGA_03df_CopyLine'(0x{bufferPtr:x4}, {screenID}, {xPos}, {yPos}, {width})");

			// function body
			ushort usDestinationAddress = (ushort)((yPos * VGADriver.ScreenWidth) + xPos);
			//ushort usDestinationSegment = this.oCPU.Memory.ReadWord(this.usSegment, (ushort)(0x1970 + (screenID << 1)));
			ushort usDestinationSegment = this.Var_1970[screenID];

			for (int i = 0; i < width; i++)
			{
				this.oCPU.Memory.WriteByte(usDestinationSegment, (ushort)(usDestinationAddress + i),
					this.oCPU.Memory.ReadByte(this.oCPU.DS.Word, (ushort)(bufferPtr + i)));
			}

			// Far return
			this.oCPU.Log.ExitBlock("'F0_VGA_03df_CopyLine'");
			this.oCPU.Log = oTempLog;
		}

		public void F0_VGA_03df_CopyLine(ushort screenID, byte[] buffer, ushort xPos, ushort yPos, ushort width)
		{
			LogWrapper oTempLog = this.oCPU.Log;
			this.oCPU.Log.WriteLine($"// Calling 'F0_VGA_03df_CopyLine'(buffer, {screenID}, {xPos}, {yPos}, {width})");
			this.oCPU.Log = this.oParent.VGADriverLog;
			this.oCPU.Log.EnterBlock($"'F0_VGA_03df_CopyLine'(buffer, {screenID}, {xPos}, {yPos}, {width})");

			// function body
			ushort usDestinationAddress = (ushort)((yPos * VGADriver.ScreenWidth) + xPos);
			//ushort usDestinationSegment = this.oCPU.Memory.ReadWord(this.usSegment, (ushort)(0x1970 + (screenID << 1)));
			ushort usDestinationSegment = this.Var_1970[screenID];

			for (int i = 0; i < width; i++)
			{
				this.oCPU.Memory.WriteByte(usDestinationSegment, (ushort)(usDestinationAddress + i), buffer[i]);
			}

			// Far return
			this.oCPU.Log.ExitBlock("'F0_VGA_03df_CopyLine'");
			this.oCPU.Log = oTempLog;
		}

		public void F0_VGA_040a_FillRectangle(int screenID, Rectangle rect)
		{
			LogWrapper oTempLog = this.oCPU.Log;
			this.oCPU.Log.WriteLine($"// Calling 'F0_VGA_040a_FillRectangle'({screenID}, {rect.X}, {rect.Y}, {rect.Width}, {rect.Height})");
			this.oCPU.Log = this.oParent.VGADriverLog;
			this.oCPU.Log.EnterBlock($"'F0_VGA_040a_FillRectangle'({screenID}, {rect.X}, {rect.Y}, {rect.Width}, {rect.Height})");

			// function body
			if (this.aScreens.ContainsKey(screenID))
			{
				this.aScreens.GetValueByKey(screenID).FillRectangle(rect, this.Var_198a_FrontColor, Var_198b_PixelMode);
			}
			else
			{
				throw new Exception($"The page {screenID} is not allocated");
			}

			// Far return
			this.oCPU.Log.ExitBlock("'F0_VGA_040a_FillRectangle'");
			this.oCPU.Log = oTempLog;
		}

		public void F0_VGA_046d_SetPositionWidthScreenID(ushort structAAPtr)
		{
			LogWrapper oTempLog = this.oCPU.Log;
			this.oCPU.Log.WriteLine($"// Calling 'F0_VGA_046d_SetPositionWidthScreenID'");
			this.oCPU.Log = this.oParent.VGADriverLog;
			this.oCPU.Log.EnterBlock("'F0_VGA_046d_SetPositionWidthScreenID'");
			this.oCPU.CS.Word = this.usSegment; // set this function segment

			// function body
			this.Var_1980_ActiveScreenID = this.oCPU.ReadWord(this.oCPU.DS.Word, structAAPtr);
			this.Var_1982_XOffset = this.oCPU.ReadWord(this.oCPU.DS.Word, (ushort)(structAAPtr + 0x2));
			this.Var_1984_YOffset = this.oCPU.ReadWord(this.oCPU.DS.Word, (ushort)(structAAPtr + 0x4));
			this.Var_1986_Width = this.oCPU.ReadWord(this.oCPU.DS.Word, (ushort)(structAAPtr + 0x6));

			// Far return
			this.oCPU.Log.ExitBlock("'F0_VGA_046d_SetPositionWidthScreenID'");
			this.oCPU.Log = oTempLog;
		}

		public void F0_VGA_0484_SetActiveScreen(ushort screenID)
		{
			LogWrapper oTempLog = this.oCPU.Log;
			this.oCPU.Log.WriteLine($"// Calling 'F0_VGA_0484_SetActiveScreen'({screenID})");
			this.oCPU.Log = this.oParent.VGADriverLog;
			this.oCPU.Log.EnterBlock($"'F0_VGA_0484_SetActiveScreen'({screenID})");

			// function body
			this.Var_1980_ActiveScreenID = screenID;

			// Far return
			this.oCPU.Log.ExitBlock("'F0_VGA_0484_SetActiveScreen'");
			this.oCPU.Log = oTempLog;
		}

		public void F0_VGA_0492_GetFreeMemory()
		{
			LogWrapper oTempLog = this.oCPU.Log;
			this.oCPU.Log.WriteLine($"// Calling 'F0_VGA_0492_GetFreeMemory'()");
			this.oCPU.Log = this.oParent.VGADriverLog;
			this.oCPU.Log.EnterBlock("'F0_VGA_0492_GetFreeMemory'()");
			this.oCPU.CS.Word = this.usSegment; // set this function segment

			// function body
			this.oCPU.AX.High = 0x48;
			this.oCPU.BX.Word = 0xffff;
			this.oCPU.INT(0x21);
			this.oCPU.AX.Word = this.oCPU.BX.Word;

			// Far return
			this.oCPU.Log.ExitBlock("'F0_VGA_0492_GetFreeMemory'");
			this.oCPU.Log = oTempLog;
		}

		public void F0_VGA_049c_SetScreenAddress(ushort screenID, ushort address)
		{
			LogWrapper oTempLog = this.oCPU.Log;
			this.oCPU.Log.WriteLine($"// Calling 'F0_VGA_049c_SetScreenAddress'({screenID}, 0x{address:x4})");
			this.oCPU.Log = this.oParent.VGADriverLog;
			this.oCPU.Log.EnterBlock($"'F0_VGA_049c_SetScreenAddress'({screenID}, 0x{address:x4})");
			this.oCPU.CS.Word = this.usSegment; // set this function segment

			// function body
			//this.oCPU.WriteWord(this.oCPU.CS.Word, (ushort)(0x1970 + (screenID << 1)), address);
			//this.Var_1970[screenID] = address;

			// Far return
			this.oCPU.Log.ExitBlock("'F0_VGA_049c_SetScreenAddress'");
			this.oCPU.Log = oTempLog;
		}

		public void F0_VGA_04ae_AllocateScreen(ushort screenID)
		{
			LogWrapper oTempLog = this.oCPU.Log;
			this.oCPU.Log.WriteLine($"// Calling 'F0_VGA_04ae_AllocateScreen'({screenID})");
			this.oCPU.Log = this.oParent.VGADriverLog;
			this.oCPU.Log.EnterBlock($"'F0_VGA_04ae_AllocateScreen'({screenID})");
			//this.oCPU.CS.Word = this.usSegment; // set this function segment

			// function body
			if (!this.aScreens.ContainsKey(screenID))
			{
				lock (this.VGALock)
				{
					this.aScreens.Add(screenID, new VGABitmap());
				}
				this.oVGAForm.OnScreenCountChange();
			}

			/*this.oCPU.PushWord(this.oCPU.BP.Word);
			this.oCPU.BP.Word = this.oCPU.SP.Word;
			this.oCPU.CMPWord(screenID, 0x0);
			if (this.oCPU.Flags.NE) goto L04bd;
			//this.oCPU.AX.Word = this.oCPU.ReadWord(this.oCPU.CS.Word, 0x1970);
			this.oCPU.AX.Word = this.Var_1970[0];
			this.oCPU.BP.Word = this.oCPU.PopWord();*/

			this.oCPU.AX.Word = 0xa000; // return something to make underlying code happy

			// Far return
			this.oCPU.Log.ExitBlock("'F0_VGA_04ae_AllocateScreen'");
			this.oCPU.Log = oTempLog;
			return;

			/*L04bd:
				this.oCPU.AX.High = 0x48;
				this.oCPU.BX.Word = 0xfa0;
				this.oCPU.INT(0x21);
				if (this.oCPU.Flags.AE) goto L04c8;
				this.oCPU.AX.Word = 0x0;

			L04c8:
				this.oCPU.BP.Word = this.oCPU.PopWord();
				// Far return
				this.oCPU.Log.ExitBlock("'F0_VGA_04ae_AllocateScreen'");
				this.oCPU.Log = oTempLog;*/
		}

		public void F0_VGA_04e8_InitVGA()
		{
			LogWrapper oTempLog = this.oCPU.Log;
			this.oCPU.Log.WriteLine($"// Calling 'F0_VGA_04e8_InitVGA'");
			this.oCPU.Log = this.oParent.VGADriverLog;
			this.oCPU.Log.EnterBlock("'F0_VGA_04e8_InitVGA'");

			// function body
			/*this.oCPU.PushWord(this.oCPU.BP.Word);
			this.oCPU.BP.Word = this.oCPU.SP.Word;
			this.oCPU.AX.Word = this.oCPU.ReadWord(this.oCPU.SS.Word, (ushort)(this.oCPU.BP.Word + 0x6));
			this.oCPU.AX.Word = this.oCPU.ANDWord(this.oCPU.AX.Word, 0x80);
			this.oCPU.AX.Word = this.oCPU.ORWord(this.oCPU.AX.Word, 0x13);
			this.oCPU.BX.Low = this.oCPU.AX.Low;
			this.oCPU.INT(0x10);
			this.oCPU.AX.High = 0xf;
			this.oCPU.INT(0x10);
			this.oCPU.CMPByte(this.oCPU.AX.Low, this.oCPU.BX.Low);
			if (this.oCPU.Flags.NE)
			{
				throw new Exception("Can't initialize VGA");
			}

			// Set default palette
			//F0_VGA_01a1_SetColorBlock(this.usSegment, 0x1410, 0, 0x80);

			this.oCPU.BP.Word = this.oCPU.PopWord();*/

			// Far return
			this.oCPU.Log.ExitBlock("'F0_VGA_04e8_InitVGA'");
			this.oCPU.Log = oTempLog;
			return;
		}

		public void F0_VGA_0550()
		{
			LogWrapper oTempLog = this.oCPU.Log;
			this.oCPU.Log.WriteLine($"// Calling 'F0_VGA_0550'");
			this.oCPU.Log = this.oParent.VGADriverLog;
			this.oCPU.Log.EnterBlock("'F0_VGA_0550'");
			this.oCPU.CS.Word = this.usSegment; // set this function segment

			// function body
			this.oCPU.PushWord(this.oCPU.DS.Word);
			this.oCPU.PushWord(this.oCPU.ES.Word);
			this.oCPU.PushWord(this.oCPU.DI.Word);
			//this.oCPU.DS.Word = this.oCPU.ReadWord(this.oCPU.CS.Word, 0x1988);
			this.oCPU.ES.Word = this.Var_1970[this.Var_1980_ActiveScreenID];
			this.oCPU.AX.Word = this.oCPU.ADDWord(this.oCPU.AX.Word, this.Var_1982_XOffset);
			this.oCPU.BX.Word = this.oCPU.ADDWord(this.oCPU.BX.Word, this.Var_1984_YOffset);
			this.Var_19c2 = this.oCPU.AX.Word;
			this.Var_19c4 = this.oCPU.BX.Word;

			this.oCPU.DI.Word = this.Var_19c4;
			//this.oCPU.DI.Word <<= 1;
			//this.oCPU.DI.Word = this.oCPU.ReadWord(this.oCPU.DS.Word, (ushort)(this.oCPU.DI.Word + 0x416));
			this.oCPU.DI.Word = (ushort)(VGADriver.ScreenWidth * this.oCPU.DI.Word);
			this.oCPU.DI.Word = this.oCPU.ADDWord(this.oCPU.DI.Word, this.Var_19c2);

			// 0x88 - MOV, 0x20 - AND, 0x8 - OR, 0x30 - XOR
			switch (this.Var_198b_PixelMode)
			{
				case PixelWriteModeEnum.Normal:
					// MOV
					// Instruction address cs:0x575, referenced at cs:0x576
					this.oCPU.WriteByte(this.oCPU.ES.Word, this.oCPU.DI.Word, this.Var_198a_FrontColor);
					break;

				case PixelWriteModeEnum.And:
					// AND
					// Instruction address cs:0x575, referenced at cs:0x576
					this.oCPU.WriteByte(this.oCPU.ES.Word, this.oCPU.DI.Word, (byte)(this.oCPU.ReadByte(this.oCPU.ES.Word, this.oCPU.DI.Word) & this.Var_198a_FrontColor));
					break;

				case PixelWriteModeEnum.Or:
					// OR
					// Instruction address cs:0x575, referenced at cs:0x576
					this.oCPU.WriteByte(this.oCPU.ES.Word, this.oCPU.DI.Word, (byte)(this.oCPU.ReadByte(this.oCPU.ES.Word, this.oCPU.DI.Word) | this.Var_198a_FrontColor));
					break;

				case PixelWriteModeEnum.Xor:
					// XOR
					// Instruction address cs:0x575, referenced at cs:0x576
					this.oCPU.WriteByte(this.oCPU.ES.Word, this.oCPU.DI.Word, (byte)(this.oCPU.ReadByte(this.oCPU.ES.Word, this.oCPU.DI.Word) ^ this.Var_198a_FrontColor));
					break;

				default:
					throw new Exception("Undefined instruction");
			}

			this.oCPU.DI.Word = this.oCPU.PopWord();
			this.oCPU.ES.Word = this.oCPU.PopWord();
			this.oCPU.DS.Word = this.oCPU.PopWord();
			// Far return
			this.oCPU.Log.ExitBlock("'F0_VGA_0550'");
			this.oCPU.Log = oTempLog;
		}

		public void F0_VGA_0599()
		{
			LogWrapper oTempLog = this.oCPU.Log;
			this.oCPU.Log.WriteLine($"// Calling 'F0_VGA_0599'");
			this.oCPU.Log = this.oParent.VGADriverLog;
			this.oCPU.Log.EnterBlock("'F0_VGA_0599'");
			this.oCPU.CS.Word = this.usSegment; // set this function segment

			// function body
			goto L0599;

		L056d:
			this.oCPU.DI.Word = this.Var_19c4;
			//this.oCPU.DI.Word <<= 1;
			//this.oCPU.DI.Word = this.oCPU.ReadWord(this.oCPU.DS.Word, (ushort)(this.oCPU.DI.Word + 0x416));
			this.oCPU.DI.Word = (ushort)(VGADriver.ScreenWidth * this.oCPU.DI.Word);
			this.oCPU.DI.Word = this.oCPU.ADDWord(this.oCPU.DI.Word, this.Var_19c2);

			// 0x88 - MOV, 0x20 - AND, 0x8 - OR, 0x30 - XOR
			switch (this.Var_198b_PixelMode)
			{
				case PixelWriteModeEnum.Normal:
					// MOV
					// Instruction at cs:0x575 referenced by reference to cs:0x576
					this.oCPU.WriteByte(this.oCPU.ES.Word, this.oCPU.DI.Word, this.Var_198a_FrontColor);
					break;

				case PixelWriteModeEnum.And:
					// AND
					// Instruction at cs:0x575 referenced by reference to cs:0x576
					this.oCPU.WriteByte(this.oCPU.ES.Word, this.oCPU.DI.Word, (byte)(this.oCPU.ReadByte(this.oCPU.ES.Word, this.oCPU.DI.Word) & this.Var_198a_FrontColor));
					break;

				case PixelWriteModeEnum.Or:
					// OR
					// Instruction at cs:0x575 referenced by reference to cs:0x576
					this.oCPU.WriteByte(this.oCPU.ES.Word, this.oCPU.DI.Word, (byte)(this.oCPU.ReadByte(this.oCPU.ES.Word, this.oCPU.DI.Word) | this.Var_198a_FrontColor));
					break;

				case PixelWriteModeEnum.Xor:
					// XOR
					// Instruction at cs:0x575 referenced by reference to cs:0x576
					this.oCPU.WriteByte(this.oCPU.ES.Word, this.oCPU.DI.Word, (byte)(this.oCPU.ReadByte(this.oCPU.ES.Word, this.oCPU.DI.Word) ^ this.Var_198a_FrontColor));
					break;

				default:
					throw new Exception("Undefined instruction");
			}

			this.oCPU.DI.Word = this.oCPU.PopWord();
			this.oCPU.SI.Word = this.oCPU.PopWord();
			this.oCPU.BP.Word = this.oCPU.PopWord();
			this.oCPU.ES.Word = this.oCPU.PopWord();
			this.oCPU.DS.Word = this.oCPU.PopWord();
			// Far return
			this.oCPU.Log.ExitBlock("'F0_VGA_0599'");
			this.oCPU.Log = oTempLog;
			return;

		L0599:
			this.oCPU.PushWord(this.oCPU.DS.Word);
			this.oCPU.PushWord(this.oCPU.ES.Word);
			this.oCPU.PushWord(this.oCPU.BP.Word);
			this.oCPU.PushWord(this.oCPU.SI.Word);
			this.oCPU.PushWord(this.oCPU.DI.Word);
			//this.oCPU.DS.Word = this.oCPU.ReadWord(this.oCPU.CS.Word, 0x1988);
			this.oCPU.ES.Word = this.Var_1970[this.Var_1980_ActiveScreenID];
			this.oCPU.DI.Word = this.Var_1982_XOffset;
			this.oCPU.AX.Word = this.oCPU.ADDWord(this.oCPU.AX.Word, this.oCPU.DI.Word);
			this.oCPU.CX.Word = this.oCPU.ADDWord(this.oCPU.CX.Word, this.oCPU.DI.Word);
			this.oCPU.DI.Word = this.Var_1984_YOffset;
			this.oCPU.BX.Word = this.oCPU.ADDWord(this.oCPU.BX.Word, this.oCPU.DI.Word);
			this.oCPU.DX.Word = this.oCPU.ADDWord(this.oCPU.DX.Word, this.oCPU.DI.Word);
			this.oCPU.CMPWord(this.oCPU.BX.Word, this.oCPU.DX.Word);
			if (this.oCPU.Flags.BE) goto L05be;
			this.oCPU.Temp.Word = this.oCPU.AX.Word;
			this.oCPU.AX.Word = this.oCPU.CX.Word;
			this.oCPU.CX.Word = this.oCPU.Temp.Word;
			this.oCPU.Temp.Word = this.oCPU.DX.Word;
			this.oCPU.DX.Word = this.oCPU.BX.Word;
			this.oCPU.BX.Word = this.oCPU.Temp.Word;

		L05be:
			this.Var_19c2 = this.oCPU.AX.Word;
			this.Var_19c4 = this.oCPU.BX.Word;
			this.Var_19c6 = this.oCPU.CX.Word;
			this.Var_19c8 = this.oCPU.DX.Word;
			if (this.oCPU.Flags.NE) goto L05d3;
			this.oCPU.CMPWord(this.oCPU.AX.Word, this.oCPU.CX.Word);
			if (this.oCPU.Flags.E) goto L056d;

			L05d3:
			this.oCPU.SI.Word = 0x1;
			this.oCPU.BP.Word = 0x140;
			this.oCPU.DX.Word = this.oCPU.SUBWord(this.oCPU.DX.Word, this.oCPU.BX.Word);
			this.oCPU.CX.Word = this.oCPU.SUBWord(this.oCPU.CX.Word, this.oCPU.AX.Word);
			if (this.oCPU.Flags.NS) goto L05e3;
			this.oCPU.CX.Word = this.oCPU.NEGWord(this.oCPU.CX.Word);
			this.oCPU.SI.Word = this.oCPU.NEGWord(this.oCPU.SI.Word);

		L05e3:
			this.oCPU.BX.Word = this.oCPU.SI.Word;
			this.oCPU.BX.Word = this.oCPU.ADDWord(this.oCPU.BX.Word, this.oCPU.BP.Word);
			this.oCPU.CMPWord(this.oCPU.CX.Word, this.oCPU.DX.Word);
			if (this.oCPU.Flags.AE) goto L05ef;
			this.oCPU.Temp.Word = this.oCPU.BP.Word;
			this.oCPU.BP.Word = this.oCPU.SI.Word;
			this.oCPU.SI.Word = this.oCPU.Temp.Word;
			this.oCPU.Temp.Word = this.oCPU.DX.Word;
			this.oCPU.DX.Word = this.oCPU.CX.Word;
			this.oCPU.CX.Word = this.oCPU.Temp.Word;

		L05ef:
			if (this.oCPU.Flags.E) goto L0626;
			this.oCPU.CX.Word = this.oCPU.ORWord(this.oCPU.CX.Word, this.oCPU.CX.Word);
			this.oCPU.BX.Word = this.oCPU.BP.Word;
			if (this.oCPU.Flags.E) goto L0626;
			this.oCPU.DX.Word = this.oCPU.ORWord(this.oCPU.DX.Word, this.oCPU.DX.Word);
			this.oCPU.BX.Word = this.oCPU.SI.Word;
			if (this.oCPU.Flags.E) goto L0626;

			this.oCPU.DI.Word = this.Var_19c4;
			//this.oCPU.DI.Word <<= 1;
			//this.oCPU.DI.Word = this.oCPU.ReadWord(this.oCPU.DS.Word, (ushort)(this.oCPU.DI.Word + 0x416));
			this.oCPU.DI.Word = (ushort)(VGADriver.ScreenWidth * this.oCPU.DI.Word);
			this.oCPU.DI.Word = this.oCPU.ADDWord(this.oCPU.DI.Word, this.Var_19c2);

			this.Var_19ca = this.oCPU.BP.Word;
			this.oCPU.BP.Word = this.oCPU.CX.Word;
			this.oCPU.BP.Word = this.oCPU.INCWord(this.oCPU.BP.Word);
			this.oCPU.BP.Word = this.oCPU.SHRWord(this.oCPU.BP.Word, 0x1);
			this.oCPU.BP.Word = this.oCPU.NEGWord(this.oCPU.BP.Word);
			this.oCPU.BX.Word = this.oCPU.CX.Word;

		L0612:
			// 0x88 - MOV, 0x20 - AND, 0x8 - OR, 0x30 - XOR
			switch (this.Var_198b_PixelMode)
			{
				case PixelWriteModeEnum.Normal:
					// MOV
					// Instruction at cs:0x612 referenced by reference to cs:0x613
					this.oCPU.WriteByte(this.oCPU.ES.Word, this.oCPU.DI.Word, this.Var_198a_FrontColor);
					break;

				case PixelWriteModeEnum.And:
					// AND
					// Instruction at cs:0x612 referenced by reference to cs:0x613
					this.oCPU.WriteByte(this.oCPU.ES.Word, this.oCPU.DI.Word, (byte)(this.oCPU.ReadByte(this.oCPU.ES.Word, this.oCPU.DI.Word) & this.Var_198a_FrontColor));
					break;

				case PixelWriteModeEnum.Or:
					// OR
					// Instruction at cs:0x612 referenced by reference to cs:0x613
					this.oCPU.WriteByte(this.oCPU.ES.Word, this.oCPU.DI.Word, (byte)(this.oCPU.ReadByte(this.oCPU.ES.Word, this.oCPU.DI.Word) | this.Var_198a_FrontColor));
					break;

				case PixelWriteModeEnum.Xor:
					// XOR
					// Instruction at cs:0x612 referenced by reference to cs:0x613
					this.oCPU.WriteByte(this.oCPU.ES.Word, this.oCPU.DI.Word, (byte)(this.oCPU.ReadByte(this.oCPU.ES.Word, this.oCPU.DI.Word) ^ this.Var_198a_FrontColor));
					break;

				default:
					throw new Exception("Undefined instruction");
			}

			this.oCPU.CX.Word = this.oCPU.DECWord(this.oCPU.CX.Word);
			if (this.oCPU.Flags.S) goto L0638;
			this.oCPU.DI.Word = this.oCPU.ADDWord(this.oCPU.DI.Word, this.oCPU.SI.Word);
			this.oCPU.BP.Word = this.oCPU.ADDWord(this.oCPU.BP.Word, this.oCPU.DX.Word);
			if (this.oCPU.Flags.S) goto L0612;
			this.oCPU.BP.Word = this.oCPU.SUBWord(this.oCPU.BP.Word, this.oCPU.BX.Word);
			this.oCPU.DI.Word = this.oCPU.ADDWord(this.oCPU.DI.Word, this.Var_19ca);
			goto L0612;

		L0626:
			this.oCPU.DI.Word = this.Var_19c4;
			//this.oCPU.DI.Word <<= 1;
			//this.oCPU.DI.Word = this.oCPU.ReadWord(this.oCPU.DS.Word, (ushort)(this.oCPU.DI.Word + 0x416));
			this.oCPU.DI.Word = (ushort)(VGADriver.ScreenWidth * this.oCPU.DI.Word);
			this.oCPU.DI.Word = this.oCPU.ADDWord(this.oCPU.DI.Word, this.Var_19c2);

			this.oCPU.CX.Word = this.oCPU.ORWord(this.oCPU.CX.Word, this.oCPU.DX.Word);
			this.oCPU.CX.Word = this.oCPU.INCWord(this.oCPU.CX.Word);

		L0631:
			// 0x88 - MOV, 0x20 - AND, 0x8 - OR, 0x30 - XOR
			switch (this.Var_198b_PixelMode)
			{
				case PixelWriteModeEnum.Normal:
					// MOV
					// Instruction at cs:0x631 referenced by reference to cs:0x632
					this.oCPU.WriteByte(this.oCPU.ES.Word, this.oCPU.DI.Word, this.Var_198a_FrontColor);
					break;

				case PixelWriteModeEnum.And:
					// AND
					// Instruction at cs:0x631 referenced by reference to cs:0x632
					this.oCPU.WriteByte(this.oCPU.ES.Word, this.oCPU.DI.Word, (byte)(this.oCPU.ReadByte(this.oCPU.ES.Word, this.oCPU.DI.Word) & this.Var_198a_FrontColor));
					break;

				case PixelWriteModeEnum.Or:
					// OR
					// Instruction at cs:0x631 referenced by reference to cs:0x632
					this.oCPU.WriteByte(this.oCPU.ES.Word, this.oCPU.DI.Word, (byte)(this.oCPU.ReadByte(this.oCPU.ES.Word, this.oCPU.DI.Word) | this.Var_198a_FrontColor));
					break;

				case PixelWriteModeEnum.Xor:
					// XOR
					// Instruction at cs:0x631 referenced by reference to cs:0x632
					this.oCPU.WriteByte(this.oCPU.ES.Word, this.oCPU.DI.Word, (byte)(this.oCPU.ReadByte(this.oCPU.ES.Word, this.oCPU.DI.Word) ^ this.Var_198a_FrontColor));
					break;

				default:
					throw new Exception("Undefined instruction");
			}

			this.oCPU.DI.Word = this.oCPU.ADDWord(this.oCPU.DI.Word, this.oCPU.BX.Word);
			if (this.oCPU.Loop(this.oCPU.CX)) goto L0631;

			L0638:
			this.oCPU.DI.Word = this.oCPU.PopWord();
			this.oCPU.SI.Word = this.oCPU.PopWord();
			this.oCPU.BP.Word = this.oCPU.PopWord();
			this.oCPU.ES.Word = this.oCPU.PopWord();
			this.oCPU.DS.Word = this.oCPU.PopWord();
			// Far return
			this.oCPU.Log.ExitBlock("'F0_VGA_0599'");
			this.oCPU.Log = oTempLog;
		}

		public void F0_VGA_063c()
		{
			LogWrapper oTempLog = this.oCPU.Log;
			this.oCPU.Log.WriteLine($"// Calling 'F0_VGA_063c'");
			this.oCPU.Log = this.oParent.VGADriverLog;
			this.oCPU.Log.EnterBlock("'F0_VGA_063c'");
			this.oCPU.CS.Word = this.usSegment; // set this function segment

			// function body
			this.oCPU.PushWord(this.oCPU.BP.Word);
			this.oCPU.BP.Word = this.oCPU.SP.Word;
			this.oCPU.PushWord(this.oCPU.SI.Word);
			this.oCPU.PushWord(this.oCPU.DI.Word);
			this.oCPU.PushWord(this.oCPU.DS.Word);
			this.oCPU.SI.Word = this.oCPU.ReadWord(this.oCPU.SS.Word, (ushort)(this.oCPU.BP.Word + 0x6));
			this.oCPU.SI.Word = this.oCPU.ORWord(this.oCPU.SI.Word, this.oCPU.SI.Word);
			if (this.oCPU.Flags.E) goto L0665;

			this.oCPU.PushWord(this.oCPU.CS.Word); // stack management - push return segment
			this.oCPU.PushWord(0x0650); // stack management - push return offset
			// Instruction address 0x0000:0x064d, size: 3
			F0_VGA_030e_FillBuffer(this.oCPU.SI.Word);
			this.oCPU.PopDWord(); // stack management - pop return offset and segment
			this.oCPU.CS.Word = this.usSegment; // restore this function segment
												//this.oCPU.SI.Word <<= 1;
												//this.oCPU.DS.Word = this.oCPU.ReadWord(this.oCPU.CS.Word, (ushort)(this.oCPU.SI.Word + 0x1970));
			this.oCPU.DS.Word = this.Var_1970[this.oCPU.SI.Word];

			//this.oCPU.ES.Word = this.oCPU.ReadWord(this.oCPU.CS.Word, 0x1970);
			this.oCPU.ES.Word = this.Var_1970[0];

			this.oCPU.SI.Word = 0x0;
			this.oCPU.DI.Word = 0x0;
			this.oCPU.CX.Word = 0x7d00;
			this.oCPU.REPEMOVSWord(this.oCPU.DS, this.oCPU.SI, this.oCPU.ES, this.oCPU.DI, this.oCPU.CX);

		L0665:
			this.oCPU.DS.Word = this.oCPU.PopWord();
			this.oCPU.DI.Word = this.oCPU.PopWord();
			this.oCPU.SI.Word = this.oCPU.PopWord();
			this.oCPU.BP.Word = this.oCPU.PopWord();
			// Far return
			this.oCPU.Log.ExitBlock("'F0_VGA_063c'");
			this.oCPU.Log = oTempLog;
		}

		public void F0_VGA_06b7(ushort screenID, ushort param1)
		{
			LogWrapper oTempLog = this.oCPU.Log;
			this.oCPU.Log.WriteLine($"// Calling 'F0_VGA_06b7'({screenID}, {param1})");
			this.oCPU.Log = this.oParent.VGADriverLog;
			this.oCPU.Log.EnterBlock($"'F0_VGA_06b7'({screenID}, {param1})");

			// this is either random fade in image, or a scrolling from right to left
			if (screenID != 0)
			{
				if (this.aScreens.ContainsKey(screenID))
				{
					VGABitmap mainScreen = this.aScreens.GetValueByKey(0);

					mainScreen.DrawImage(this.aScreens.GetValueByKey(screenID));
				}
				else
				{
					throw new Exception($"The page {screenID} is not allocated");
				}
			}

			/*this.oCPU.CS.Word = this.usSegment; // set this function segment

			// function body
			this.oCPU.PushWord(this.oCPU.BP.Word);
			this.oCPU.BP.Word = this.oCPU.SP.Word;
			this.oCPU.PushWord(this.oCPU.SI.Word);
			this.oCPU.PushWord(this.oCPU.DI.Word);
			this.oCPU.PushWord(this.oCPU.DS.Word);

			this.oCPU.SI.Word = screenID;
			if (this.oCPU.SI.Word == 0) goto L0733;
			this.oCPU.DS.Word = this.Var_1970[this.oCPU.SI.Word];

			this.oCPU.ES.Word = this.Var_1970[0];

			this.oCPU.CMPWord(this.Var_6b3, 0x0);
			if (this.oCPU.Flags.NE) goto L06ea;

			this.oCPU.BX.Word = 0x1;
			this.oCPU.SI.Word = 0x1;

		L07b7:
			this.oCPU.SI.Word = this.oCPU.SHRWord(this.oCPU.SI.Word, 0x1);
			if (this.oCPU.Flags.AE) goto L07bf;
			this.oCPU.SI.Word = this.oCPU.XORWord(this.oCPU.SI.Word, 0xb400);

		L07bf:
			this.oCPU.CMPWord(this.oCPU.SI.Word, 0xfa00);
			if (this.oCPU.Flags.A) goto L07b7;

			this.oCPU.SI.Word = this.oCPU.DECWord(this.oCPU.SI.Word);
			this.oCPU.DI.Word = 0xffff;
			this.oCPU.MOVSByte(this.oCPU.DS, this.oCPU.SI, this.oCPU.ES, this.oCPU.DI);
			this.oCPU.AX.Word = this.oCPU.BX.Word;
			this.oCPU.CX.Word = 0x13eb;

			this.Var_6b3 = this.oCPU.CX.Word;

			this.oCPU.BX.Word = 0x11;

			this.oCPU.SI.Word = 0x1;

		L07b7_1:
			this.oCPU.SI.Word = this.oCPU.SHRWord(this.oCPU.SI.Word, 0x1);
			if (this.oCPU.Flags.AE) goto L07bf_1;
			this.oCPU.SI.Word = this.oCPU.XORWord(this.oCPU.SI.Word, 0xb400);

		L07bf_1:
			this.oCPU.CMPWord(this.oCPU.SI.Word, 0xfa00);
			if (this.oCPU.Flags.A) goto L07b7_1;

			this.oCPU.SI.Word = this.oCPU.DECWord(this.oCPU.SI.Word);
			this.oCPU.DI.Word = 0xffff;
			this.oCPU.MOVSByte(this.oCPU.DS, this.oCPU.SI, this.oCPU.ES, this.oCPU.DI);
			this.oCPU.AX.Word = this.oCPU.BX.Word;

			this.oCPU.CX.Word = 0x13eb / 0x11;

			this.oCPU.AX.Low = 0x0;
			this.oCPU.AX.High = this.oCPU.CX.Low;
			this.oCPU.DX.Low = this.oCPU.CX.High;
			this.oCPU.DX.High = 0x0;
			this.oCPU.BX.Word = this.Var_6b3;
			this.oCPU.BX.Word = this.oCPU.SUBWord(this.oCPU.BX.Word, this.oCPU.CX.Word);
			this.oCPU.DIVWord(this.oCPU.AX, this.oCPU.DX, this.oCPU.BX.Word);
			this.oCPU.BX.Word = this.oCPU.SHRWord(this.oCPU.BX.Word, 0x1);
			this.oCPU.CMPWord(this.oCPU.BX.Word, this.oCPU.DX.Word);
			this.oCPU.AX.Word = this.oCPU.ADCWord(this.oCPU.AX.Word, 0x0);
			this.Var_6b5 = this.oCPU.AX.Word;

		L06ea:
			this.oCPU.CX.Word = param1;
			if (this.oCPU.CX.Word == 0) goto L0738;
			this.oCPU.AX.Word = 0x2260;
			this.oCPU.DX.Word = 0x0;
			this.oCPU.DIVWord(this.oCPU.AX, this.oCPU.DX, this.oCPU.CX.Word);
			this.oCPU.BX.Word = this.oCPU.AX.Word;
			this.oCPU.BX.Word = this.oCPU.ORWord(this.oCPU.BX.Word, this.oCPU.BX.Word);
			if (this.oCPU.Flags.NE) goto L0700;
			this.oCPU.BX.Word = 0x1;

		L0700:
			this.oCPU.AX.Word = this.Var_6b3;
			this.oCPU.AX.Word = this.oCPU.SUBWord(this.oCPU.AX.Word, this.oCPU.BX.Word);
			if (this.oCPU.Flags.BE) goto L0738;
			this.oCPU.MULWord(this.oCPU.DX, this.oCPU.AX, this.Var_6b5);
			this.oCPU.CX.Low = 0x4;

		L070f:
			this.oCPU.CMPWord(this.oCPU.DX.Word, this.oCPU.BX.Word);
			if (this.oCPU.Flags.B) goto L071b;
			this.oCPU.DX.Word = this.oCPU.SHRWord(this.oCPU.DX.Word, 0x1);
			this.oCPU.AX.Word = this.oCPU.RCRWord(this.oCPU.AX.Word, 0x1);
			this.oCPU.CX.Low = this.oCPU.DECByte(this.oCPU.CX.Low);
			goto L070f;

		L071b:
			this.oCPU.DIVWord(this.oCPU.AX, this.oCPU.DX, this.oCPU.BX.Word);
			this.oCPU.BX.Word = this.oCPU.AX.Word;
			this.oCPU.CX.Low = this.oCPU.ORByte(this.oCPU.CX.Low, this.oCPU.CX.Low);
			if (this.oCPU.Flags.S) goto L072b;
			this.oCPU.BX.Word = this.oCPU.SHRWord(this.oCPU.BX.Word, this.oCPU.CX.Low);
			this.oCPU.BX.Word = this.oCPU.ADCWord(this.oCPU.BX.Word, 0x1);
			goto L073a;

		L072b:
			this.oCPU.BX.Word = this.oCPU.SHLWord(this.oCPU.BX.Word, this.oCPU.CX.Low);
			this.oCPU.BX.Word = this.oCPU.ADDWord(this.oCPU.BX.Word, 0x1);
			goto L073a;

		L0738:
			this.oCPU.BX.Word = 0x0;

		L073a:
			this.oCPU.SI.Word = 0x1;
			this.oCPU.CX.Word = 0xfa00;
			this.oCPU.CMPWord(this.oCPU.BX.Word, 0x1);
			if (this.oCPU.Flags.A) goto L075b;

			L0745:
			this.oCPU.SI.Word = this.oCPU.SHRWord(this.oCPU.SI.Word, 0x1);
			if (this.oCPU.Flags.AE) goto L074d;
			this.oCPU.SI.Word = this.oCPU.XORWord(this.oCPU.SI.Word, 0xb400);

		L074d:
			this.oCPU.CMPWord(this.oCPU.SI.Word, 0xfa00);
			if (this.oCPU.Flags.A) goto L0745;
			this.oCPU.SI.Word = this.oCPU.DECWord(this.oCPU.SI.Word);
			this.oCPU.DI.Word = this.oCPU.SI.Word;
			this.oCPU.MOVSByte(this.oCPU.DS, this.oCPU.SI, this.oCPU.ES, this.oCPU.DI);
			if (this.oCPU.Loop(this.oCPU.CX)) goto L0745;
			goto L0733;

		L075b:
			this.oCPU.SI.Word = this.oCPU.SHRWord(this.oCPU.SI.Word, 0x1);
			if (this.oCPU.Flags.AE) goto L0763;
			this.oCPU.SI.Word = this.oCPU.XORWord(this.oCPU.SI.Word, 0xb400);

		L0763:
			this.oCPU.CMPWord(this.oCPU.SI.Word, 0xfa00);
			if (this.oCPU.Flags.A) goto L075b;
			this.oCPU.SI.Word = this.oCPU.DECWord(this.oCPU.SI.Word);
			this.oCPU.DI.Word = this.oCPU.SI.Word;
			this.oCPU.MOVSByte(this.oCPU.DS, this.oCPU.SI, this.oCPU.ES, this.oCPU.DI);
			this.oCPU.AX.Word = this.oCPU.BX.Word;

			if (this.oCPU.Loop(this.oCPU.CX)) goto L075b;
			goto L0733;*/

		/*L0733:
			this.oCPU.DS.Word = this.oCPU.PopWord();
			this.oCPU.DI.Word = this.oCPU.PopWord();
			this.oCPU.SI.Word = this.oCPU.PopWord();
			this.oCPU.BP.Word = this.oCPU.PopWord();*/
			// Far return
			this.oCPU.Log.ExitBlock("'F0_VGA_06b7'");
			this.oCPU.Log = oTempLog;
			return;
		}

		public void F0_VGA_07d8()
		{
			LogWrapper oTempLog = this.oCPU.Log;
			this.oCPU.Log.WriteLine($"// Calling 'F0_VGA_07d8'");
			this.oCPU.Log = this.oParent.VGADriverLog;
			this.oCPU.Log.EnterBlock("'F0_VGA_07d8'");
			this.oCPU.CS.Word = this.usSegment; // set this function segment

			// function body
			this.oCPU.PushWord(this.oCPU.BP.Word);
			this.oCPU.BP.Word = this.oCPU.SP.Word;
			this.oCPU.PushWord(this.oCPU.SI.Word);
			this.oCPU.PushWord(this.oCPU.DI.Word);
			this.oCPU.PushWord(this.oCPU.DS.Word);
			this.oCPU.SI.Word = this.oCPU.ReadWord(this.oCPU.SS.Word, (ushort)(this.oCPU.BP.Word + 0x6));
			this.oCPU.DI.Word = this.oCPU.ReadWord(this.oCPU.SS.Word, (ushort)(this.oCPU.BP.Word + 0x10));
			this.oCPU.AX.Word = this.oCPU.ReadWord(this.oCPU.DS.Word, (ushort)(this.oCPU.SI.Word + 0x2));
			this.oCPU.BX.Word = this.oCPU.ReadWord(this.oCPU.DS.Word, (ushort)(this.oCPU.SI.Word + 0x4));
			this.oCPU.CX.Word = this.oCPU.ReadWord(this.oCPU.DS.Word, (ushort)(this.oCPU.DI.Word + 0x2));
			this.oCPU.DX.Word = this.oCPU.ReadWord(this.oCPU.DS.Word, (ushort)(this.oCPU.DI.Word + 0x4));
			this.oCPU.AX.Word = this.oCPU.ADDWord(this.oCPU.AX.Word, this.oCPU.ReadWord(this.oCPU.SS.Word, (ushort)(this.oCPU.BP.Word + 0x8)));
			this.oCPU.BX.Word = this.oCPU.ADDWord(this.oCPU.BX.Word, this.oCPU.ReadWord(this.oCPU.SS.Word, (ushort)(this.oCPU.BP.Word + 0xa)));
			this.oCPU.CX.Word = this.oCPU.ADDWord(this.oCPU.CX.Word, this.oCPU.ReadWord(this.oCPU.SS.Word, (ushort)(this.oCPU.BP.Word + 0x12)));
			this.oCPU.DX.Word = this.oCPU.ADDWord(this.oCPU.DX.Word, this.oCPU.ReadWord(this.oCPU.SS.Word, (ushort)(this.oCPU.BP.Word + 0x14)));
			this.oCPU.SI.Word = this.oCPU.ReadWord(this.oCPU.DS.Word, this.oCPU.SI.Word);
			this.oCPU.DI.Word = this.oCPU.ReadWord(this.oCPU.DS.Word, this.oCPU.DI.Word);
			//this.oCPU.SI.Word <<= 1;
			//this.oCPU.DI.Word <<= 1;
			//this.oCPU.DS.Word = this.oCPU.ReadWord(this.oCPU.CS.Word, (ushort)(this.oCPU.SI.Word + 0x1970));
			this.oCPU.DS.Word = this.Var_1970[this.oCPU.SI.Word];

			//this.oCPU.ES.Word = this.oCPU.ReadWord(this.oCPU.CS.Word, (ushort)(this.oCPU.DI.Word + 0x1970));
			this.oCPU.ES.Word = this.Var_1970[this.oCPU.DI.Word];

			//this.oCPU.BX.Word = this.oCPU.SHLWord(this.oCPU.BX.Word, 0x1);
			//this.oCPU.SI.Word = this.oCPU.ReadWord(this.oCPU.CS.Word, (ushort)(this.oCPU.BX.Word + 0x17d6));
			this.oCPU.SI.Word = (ushort)(VGADriver.ScreenWidth * this.oCPU.BX.Word);
			this.oCPU.SI.Word = this.oCPU.ADDWord(this.oCPU.SI.Word, this.oCPU.AX.Word);
			this.oCPU.BX.Word = this.oCPU.DX.Word;
			//this.oCPU.BX.Word = this.oCPU.SHLWord(this.oCPU.BX.Word, 0x1);
			//this.oCPU.DI.Word = this.oCPU.ReadWord(this.oCPU.CS.Word, (ushort)(this.oCPU.BX.Word + 0x17d6));
			this.oCPU.DI.Word = (ushort)(VGADriver.ScreenWidth * this.oCPU.BX.Word);
			this.oCPU.DI.Word = this.oCPU.ADDWord(this.oCPU.DI.Word, this.oCPU.CX.Word);
			this.oCPU.AX.Word = this.oCPU.ReadWord(this.oCPU.SS.Word, (ushort)(this.oCPU.BP.Word + 0xc));
			this.oCPU.BX.Word = this.oCPU.ReadWord(this.oCPU.SS.Word, (ushort)(this.oCPU.BP.Word + 0xe));
			this.oCPU.AX.Word = this.oCPU.ORWord(this.oCPU.AX.Word, this.oCPU.AX.Word);
			if (this.oCPU.Flags.E) goto L0846;
			this.oCPU.BX.Word = this.oCPU.ORWord(this.oCPU.BX.Word, this.oCPU.BX.Word);
			if (this.oCPU.Flags.E) goto L0846;
			this.oCPU.DX.Word = 0x140;
			this.oCPU.DX.Word = this.oCPU.SUBWord(this.oCPU.DX.Word, this.oCPU.AX.Word);

		L0835:
			this.oCPU.CX.Word = this.oCPU.AX.Word;
			this.oCPU.CX.Word = this.oCPU.SHRWord(this.oCPU.CX.Word, 0x1);
			this.oCPU.REPEMOVSWord(this.oCPU.DS, this.oCPU.SI, this.oCPU.ES, this.oCPU.DI, this.oCPU.CX);
			this.oCPU.CX.Word = this.oCPU.ADCWord(this.oCPU.CX.Word, this.oCPU.CX.Word);
			this.oCPU.REPEMOVSByte(this.oCPU.DS, this.oCPU.SI, this.oCPU.ES, this.oCPU.DI, this.oCPU.CX);
			this.oCPU.SI.Word = this.oCPU.ADDWord(this.oCPU.SI.Word, this.oCPU.DX.Word);
			this.oCPU.DI.Word = this.oCPU.ADDWord(this.oCPU.DI.Word, this.oCPU.DX.Word);
			this.oCPU.BX.Word = this.oCPU.DECWord(this.oCPU.BX.Word);
			if (this.oCPU.Flags.NE) goto L0835;

			L0846:
			this.oCPU.DS.Word = this.oCPU.PopWord();
			this.oCPU.DI.Word = this.oCPU.PopWord();
			this.oCPU.SI.Word = this.oCPU.PopWord();
			this.oCPU.BP.Word = this.oCPU.PopWord();
			// Far return
			this.oCPU.Log.ExitBlock("'F0_VGA_07d8'");
			this.oCPU.Log = oTempLog;
		}

		public void F0_VGA_0a1e_AllocateMemory()
		{
			LogWrapper oTempLog = this.oCPU.Log;
			this.oCPU.Log.WriteLine($"// Calling 'F0_VGA_0a1e_AllocateMemory'");
			this.oCPU.Log = this.oParent.VGADriverLog;
			this.oCPU.Log.EnterBlock("'F0_VGA_0a1e_AllocateMemory'");
			this.oCPU.CS.Word = this.usSegment; // set this function segment

			// function body
			this.oCPU.PushWord(this.oCPU.CS.Word); // stack management - push return segment
			this.oCPU.PushWord(0x0a23); // stack management - push return offset
										// Instruction address 0x0000:0x0a20, size: 3
			F0_VGA_0492_GetFreeMemory();
			this.oCPU.PopDWord(); // stack management - pop return offset and segment
			this.oCPU.CS.Word = this.usSegment; // restore this function segment
			this.oCPU.BX.Word = this.oCPU.AX.Word;
			this.oCPU.BX.Word = this.oCPU.ORWord(this.oCPU.BX.Word, this.oCPU.BX.Word);
			if (this.oCPU.Flags.E) goto L0a2f;
			this.oCPU.AX.High = 0x48;
			this.oCPU.INT(0x21);
			if (this.oCPU.Flags.AE) goto L0a33;

		L0a2f:
			this.oCPU.AX.Word = 0x0;
			this.oCPU.BX.Word = 0x0;

		L0a33:
			this.oCPU.BX.Word = this.oCPU.ADDWord(this.oCPU.BX.Word, this.oCPU.AX.Word);
			this.Var_89e = 0;
			this.Var_8a0 = this.oCPU.AX.Word;
			this.Var_8a2 = this.oCPU.AX.Word;
			this.Var_8a4 = this.oCPU.BX.Word;

			// Far return
			this.oCPU.Log.ExitBlock("'F0_VGA_0a1e_AllocateMemory'");
			this.oCPU.Log = oTempLog;
		}

		public void F0_VGA_0a4a_FreeMemory()
		{
			LogWrapper oTempLog = this.oCPU.Log;
			this.oCPU.Log.WriteLine($"// Calling 'F0_VGA_0a4a_FreeMemory'");
			this.oCPU.Log = this.oParent.VGADriverLog;
			this.oCPU.Log.EnterBlock("'F0_VGA_0a4a_FreeMemory'");
			this.oCPU.CS.Word = this.usSegment; // set this function segment

			// function body
			this.oCPU.AX.Word = this.Var_8a2;
			this.oCPU.BX.Word = this.Var_8a0;
			this.oCPU.BX.Word = this.oCPU.SUBWord(this.oCPU.BX.Word, this.oCPU.AX.Word);
			if (this.oCPU.Flags.B) goto L0a63;
			this.oCPU.ES.Word = this.oCPU.AX.Word;
			this.oCPU.AX.High = 0x49;
			if (this.oCPU.Flags.E) goto L0a5f;
			this.oCPU.AX.High = 0x4a;

		L0a5f:
			this.oCPU.INT(0x21);
			if (this.oCPU.Flags.AE) goto L0a67;

			L0a63:
			this.oCPU.AX.Word = 0x0;
			this.oCPU.ES.Word = this.oCPU.AX.Word;

		L0a67:
			this.oCPU.AX.Word = 0x0;
			this.Var_8a0 = this.oCPU.AX.Word;
			this.Var_8a4 = this.oCPU.AX.Word;
			this.Var_8a2 = this.oCPU.AX.Word;
			this.oCPU.AX.Word = this.oCPU.ES.Word;

			// Far return
			this.oCPU.Log.ExitBlock("'F0_VGA_0a4a_FreeMemory'");
			this.oCPU.Log = oTempLog;
		}

		public void F0_VGA_0a78()
		{
			LogWrapper oTempLog = this.oCPU.Log;
			this.oCPU.Log.WriteLine($"// Calling 'F0_VGA_0a78'");
			this.oCPU.Log = this.oParent.VGADriverLog;
			this.oCPU.Log.EnterBlock("'F0_VGA_0a78'");
			this.oCPU.CS.Word = this.usSegment; // set this function segment

			// function body
			this.oCPU.PushWord(this.oCPU.BP.Word);
			this.oCPU.BP.Word = this.oCPU.SP.Word;
			this.oCPU.AX.Word = this.Var_8a4;
			this.oCPU.AX.Word = this.oCPU.SUBWord(this.oCPU.AX.Word, this.Var_8a0);
			if (this.oCPU.Flags.BE) goto L0aba;
			this.oCPU.CMPWord(this.oCPU.AX.Word, 0x1000);
			if (this.oCPU.Flags.B) goto L0a8e;
			this.oCPU.AX.Word = 0xfff;

		L0a8e:
			this.oCPU.AX.Word = this.oCPU.SHLWord(this.oCPU.AX.Word, 0x1);
			this.oCPU.AX.Word = this.oCPU.SHLWord(this.oCPU.AX.Word, 0x1);
			this.oCPU.AX.Word = this.oCPU.SHLWord(this.oCPU.AX.Word, 0x1);
			this.oCPU.AX.Word = this.oCPU.SHLWord(this.oCPU.AX.Word, 0x1);
			this.Var_8a6 = this.oCPU.AX.Word;
			this.oCPU.PushWord(this.oCPU.DI.Word);
			// LES
			this.oCPU.DI.Word = this.Var_89e;
			this.oCPU.ES.Word = this.Var_8a0;
			this.oCPU.AX.Word = this.oCPU.ReadWord(this.oCPU.SS.Word, (ushort)(this.oCPU.BP.Word + 0x6));
			this.oCPU.STOSWord();
			this.Var_8b0 = this.oCPU.AX.Word;
			this.oCPU.AX.Word = this.oCPU.ReadWord(this.oCPU.SS.Word, (ushort)(this.oCPU.BP.Word + 0x8));
			this.oCPU.STOSWord();
			this.Var_8ae = this.oCPU.AX.Word;
			this.Var_89e = this.oCPU.DI.Word;
			this.oCPU.AX.Word = this.oCPU.ES.Word;
			this.oCPU.DI.Word = this.oCPU.PopWord();
			this.oCPU.BP.Word = this.oCPU.PopWord();
			// Far return
			this.oCPU.Log.ExitBlock("'F0_VGA_0a78'");
			this.oCPU.Log = oTempLog;
			return;

		L0aba:
			this.oCPU.AX.Word = 0x0;
			this.Var_89e = this.oCPU.AX.Word;
			this.Var_8a0 = this.oCPU.AX.Word;
			this.oCPU.BP.Word = this.oCPU.PopWord();
			// Far return
			this.oCPU.Log.ExitBlock("'F0_VGA_0a78'");
			this.oCPU.Log = oTempLog;
		}

		public void F0_VGA_0ac6()
		{
			LogWrapper oTempLog = this.oCPU.Log;
			this.oCPU.Log.WriteLine($"// Calling 'F0_VGA_0ac6'");
			this.oCPU.Log = this.oParent.VGADriverLog;
			this.oCPU.Log.EnterBlock("'F0_VGA_0ac6'");
			this.oCPU.CS.Word = this.usSegment; // set this function segment

			// function body
			this.oCPU.AX.Word = 0x0;
			this.oCPU.Temp.Word = this.Var_89e;
			this.Var_89e = this.oCPU.AX.Word;
			this.oCPU.AX.Word = this.oCPU.Temp.Word;
			this.oCPU.AX.Word = this.oCPU.ADDWord(this.oCPU.AX.Word, 0xf);
			this.oCPU.AX.Word = this.oCPU.SHRWord(this.oCPU.AX.Word, 0x1);
			this.oCPU.AX.Word = this.oCPU.SHRWord(this.oCPU.AX.Word, 0x1);
			this.oCPU.AX.Word = this.oCPU.SHRWord(this.oCPU.AX.Word, 0x1);
			this.oCPU.AX.Word = this.oCPU.SHRWord(this.oCPU.AX.Word, 0x1);
			this.oCPU.AX.Word = this.oCPU.ADDWord(this.oCPU.AX.Word, this.Var_8a0);
			this.oCPU.Temp.Word = this.Var_8a0;
			this.Var_8a0 = this.oCPU.AX.Word;
			this.oCPU.AX.Word = this.oCPU.Temp.Word;
			// Far return
			this.oCPU.Log.ExitBlock("'F0_VGA_0ac6'");
			this.oCPU.Log = oTempLog;
		}

		public void F0_VGA_0ae3()
		{
			LogWrapper oTempLog = this.oCPU.Log;
			this.oCPU.Log.WriteLine($"// Calling 'F0_VGA_0ae3'");
			this.oCPU.Log = this.oParent.VGADriverLog;
			this.oCPU.Log.EnterBlock("'F0_VGA_0ae3'");
			this.oCPU.CS.Word = this.usSegment; // set this function segment

			// function body
			this.oCPU.PushWord(this.oCPU.BP.Word);
			this.oCPU.BP.Word = this.oCPU.SP.Word;
			this.oCPU.PushWord(this.oCPU.SI.Word);
			this.oCPU.PushWord(this.oCPU.DI.Word);
			this.oCPU.SI.Word = this.oCPU.ReadWord(this.oCPU.SS.Word, (ushort)(this.oCPU.BP.Word + 0x6));
			// LES
			this.oCPU.DI.Word = this.Var_89e;
			this.oCPU.ES.Word = this.Var_8a0;
			this.oCPU.AX.Word = this.oCPU.ES.Word;
			this.oCPU.AX.Word = this.oCPU.ORWord(this.oCPU.AX.Word, this.oCPU.AX.Word);
			if (this.oCPU.Flags.NE) goto L0af9;
			goto L0b81;

		L0af9:
			this.oCPU.AX.Word = this.Var_8b0;
			this.oCPU.AX.Word = this.oCPU.ADDWord(this.oCPU.AX.Word, 0x4);
			this.oCPU.AX.Word = this.oCPU.ADDWord(this.oCPU.AX.Word, this.oCPU.DI.Word);
			this.oCPU.CMPWord(this.oCPU.AX.Word, this.Var_8a6);
			if (this.oCPU.Flags.BE) goto L0b17;
			this.oCPU.WriteWord(this.oCPU.ES.Word, 0x2, this.oCPU.DECWord(this.oCPU.ReadWord(this.oCPU.ES.Word, 0x2)));
			this.oCPU.AX.Word = 0x0;
			this.Var_8a4 = this.oCPU.AX.Word;
			goto L0b81;

		L0b17:
			this.oCPU.AX.Word = 0x0;
			this.Var_8a8 = this.oCPU.AX.Word;
			this.Var_8aa = this.oCPU.AX.Word;
			this.Var_8ac = this.oCPU.AX.Word;
			this.oCPU.BP.Word = this.oCPU.DI.Word;
			this.oCPU.STOSWord();
			this.oCPU.STOSWord();
			this.oCPU.CX.Word = this.Var_8b0;

		L0b2e:
			this.oCPU.LODSByte();
			this.oCPU.AX.Low = this.oCPU.ORByte(this.oCPU.AX.Low, this.oCPU.AX.Low);
			if (this.oCPU.Flags.E) goto L0b3d;
			this.Var_8aa = 0;
			goto L0b54;

		L0b3d:
			this.oCPU.CMPWord(this.Var_8ac, 0x0);
			if (this.oCPU.Flags.NE) goto L0b4f;
			this.Var_8a8++;
			if (this.oCPU.Loop(this.oCPU.CX)) goto L0b2e;
			goto L0b5c;

		L0b4f:
			this.Var_8aa++;

		L0b54:
			this.Var_8ac++;
			this.oCPU.STOSByte();
			if (this.oCPU.Loop(this.oCPU.CX)) goto L0b2e;

			L0b5c:
			this.oCPU.AX.Word = this.Var_8ac;
			this.oCPU.BX.Word = this.Var_8a8;
			this.oCPU.CX.Word = this.Var_8aa;
			this.oCPU.CX.Word = this.oCPU.ORWord(this.oCPU.CX.Word, this.oCPU.CX.Word);
			if (this.oCPU.Flags.E) goto L0b72;
			this.oCPU.AX.Word = this.oCPU.SUBWord(this.oCPU.AX.Word, this.oCPU.CX.Word);
			this.oCPU.DI.Word = this.oCPU.SUBWord(this.oCPU.DI.Word, this.oCPU.CX.Word);

		L0b72:
			this.oCPU.WriteWord(this.oCPU.ES.Word, (ushort)(this.oCPU.BP.Word + 0x0), this.oCPU.AX.Word);
			this.oCPU.WriteWord(this.oCPU.ES.Word, (ushort)(this.oCPU.BP.Word + 0x2), this.oCPU.BX.Word);
			this.Var_89e = this.oCPU.DI.Word;
			this.oCPU.AX.Word = this.oCPU.ES.Word;

		L0b81:
			this.oCPU.DI.Word = this.oCPU.PopWord();
			this.oCPU.SI.Word = this.oCPU.PopWord();
			this.oCPU.BP.Word = this.oCPU.PopWord();
			// Far return
			this.oCPU.Log.ExitBlock("'F0_VGA_0ae3'");
			this.oCPU.Log = oTempLog;
		}

		public void F0_VGA_0b85()
		{
			LogWrapper oTempLog = this.oCPU.Log;
			this.oCPU.Log.WriteLine($"// Calling 'F0_VGA_0b85'");
			this.oCPU.Log = this.oParent.VGADriverLog;
			this.oCPU.Log.EnterBlock("'F0_VGA_0b85'");
			this.oCPU.CS.Word = this.usSegment; // set this function segment

			// function body
			this.oCPU.PushWord(this.oCPU.BP.Word);
			this.oCPU.BP.Word = this.oCPU.SP.Word;
			this.oCPU.PushWord(this.oCPU.SI.Word);
			this.oCPU.PushWord(this.oCPU.DS.Word);
			this.oCPU.PushWord(this.oCPU.ReadWord(this.oCPU.SS.Word, (ushort)(this.oCPU.BP.Word + 0xe)));
			this.oCPU.PushWord(this.oCPU.ReadWord(this.oCPU.SS.Word, (ushort)(this.oCPU.BP.Word + 0xc)));
			this.oCPU.PushWord(this.oCPU.CS.Word); // stack management - push return segment
			this.oCPU.PushWord(0x0b95); // stack management - push return offset
										// Instruction address 0x0000:0x0b92, size: 3
			F0_VGA_0a78();
			this.oCPU.PopDWord(); // stack management - pop return offset and segment
			this.oCPU.CS.Word = this.usSegment; // restore this function segment
			this.oCPU.SP.Word = this.oCPU.ADDWord(this.oCPU.SP.Word, 0x4);
			this.oCPU.AX.Word = this.oCPU.ORWord(this.oCPU.AX.Word, this.oCPU.AX.Word);
			if (this.oCPU.Flags.E) goto L0be0;
			this.oCPU.CMPWord(this.Var_8ae, 0x0);
			if (this.oCPU.Flags.E) goto L0be0;
			this.oCPU.CMPWord(this.Var_8b0, 0x0);
			if (this.oCPU.Flags.E) goto L0be0;
			this.oCPU.SI.Word = this.oCPU.ReadWord(this.oCPU.SS.Word, (ushort)(this.oCPU.BP.Word + 0xa));
			//this.oCPU.SI.Word = this.oCPU.SHLWord(this.oCPU.SI.Word, 0x1);
			//this.oCPU.SI.Word = this.oCPU.ReadWord(this.oCPU.CS.Word, (ushort)(this.oCPU.SI.Word + 0x17d6));
			this.oCPU.SI.Word = (ushort)(VGADriver.ScreenWidth * this.oCPU.SI.Word);
			this.oCPU.SI.Word = this.oCPU.ADDWord(this.oCPU.SI.Word, this.oCPU.ReadWord(this.oCPU.SS.Word, (ushort)(this.oCPU.BP.Word + 0x8)));
			this.oCPU.AX.Word = this.oCPU.ReadWord(this.oCPU.SS.Word, (ushort)(this.oCPU.BP.Word + 0x6));
			this.oCPU.CWD(this.oCPU.AX, this.oCPU.DX);
			this.oCPU.AX.Word = this.oCPU.XORWord(this.oCPU.AX.Word, this.oCPU.DX.Word);
			this.oCPU.AX.Word = this.oCPU.SUBWord(this.oCPU.AX.Word, this.oCPU.DX.Word);
			this.oCPU.BP.Word = this.oCPU.DX.Word;
			this.oCPU.BX.Word = this.oCPU.AX.Word;
			//this.oCPU.BX.Word <<= 1;
			//this.oCPU.DS.Word = this.oCPU.ReadWord(this.oCPU.CS.Word, (ushort)(this.oCPU.BX.Word + 0x1970));
			this.oCPU.DS.Word = this.Var_1970[this.oCPU.BX.Word];

		L0bcc:
			this.oCPU.PushWord(this.oCPU.SI.Word);
			this.oCPU.PushWord(this.oCPU.CS.Word); // stack management - push return segment
			this.oCPU.PushWord(0x0bd2); // stack management - push return offset
										// Instruction address 0x0000:0x0bcf, size: 3
			F0_VGA_0ae3();
			this.oCPU.PopDWord(); // stack management - pop return offset and segment
			this.oCPU.CS.Word = this.usSegment; // restore this function segment
			this.oCPU.SP.Word = this.oCPU.ADDWord(this.oCPU.SP.Word, 0x2);
			this.oCPU.SI.Word = this.oCPU.ADDWord(this.oCPU.SI.Word, 0x140);
			this.Var_8ae--;
			if (this.oCPU.Flags.NE) goto L0bcc;

			L0be0:
			this.oCPU.PushWord(this.oCPU.CS.Word); // stack management - push return segment
			this.oCPU.PushWord(0x0be5); // stack management - push return offset
										// Instruction address 0x0000:0x0be2, size: 3
			F0_VGA_0ac6();
			this.oCPU.PopDWord(); // stack management - pop return offset and segment
			this.oCPU.CS.Word = this.usSegment; // restore this function segment
			this.oCPU.DS.Word = this.oCPU.PopWord();
			this.oCPU.SI.Word = this.oCPU.PopWord();
			this.oCPU.BP.Word = this.oCPU.PopWord();
			// Far return
			this.oCPU.Log.ExitBlock("'F0_VGA_0b85'");
			this.oCPU.Log = oTempLog;
		}

		public void F0_VGA_0c3e()
		{
			LogWrapper oTempLog = this.oCPU.Log;
			this.oCPU.Log.WriteLine($"// Calling 'F0_VGA_0c3e'");
			this.oCPU.Log = this.oParent.VGADriverLog;
			this.oCPU.Log.EnterBlock("'F0_VGA_0c3e'");
			this.oCPU.CS.Word = this.usSegment; // set this function segment

			// function body
			this.oCPU.PushWord(this.oCPU.BP.Word);
			this.oCPU.BP.Word = this.oCPU.SP.Word;
			this.oCPU.PushWord(this.oCPU.SI.Word);
			this.oCPU.PushWord(this.oCPU.DI.Word);
			this.oCPU.PushWord(this.oCPU.DS.Word);
			this.oCPU.DX.Word = this.oCPU.ReadWord(this.oCPU.SS.Word, (ushort)(this.oCPU.BP.Word + 0x8));
			this.oCPU.DI.Word = this.oCPU.ReadWord(this.oCPU.SS.Word, (ushort)(this.oCPU.BP.Word + 0xa));
			this.oCPU.DS.Word = this.oCPU.ReadWord(this.oCPU.SS.Word, (ushort)(this.oCPU.BP.Word + 0xc));
			this.oCPU.SI.Word = 0x0;
			this.oCPU.BP.Word = this.oCPU.ReadWord(this.oCPU.SS.Word, (ushort)(this.oCPU.BP.Word + 0x6));
			this.oCPU.AX.Word = this.oCPU.ReadWord(this.oCPU.DS.Word, this.oCPU.SI.Word);
			this.Var_8ba = this.oCPU.AX.Word;
			this.oCPU.AX.Word = this.oCPU.ReadWord(this.oCPU.DS.Word, (ushort)(this.oCPU.SI.Word + 0x2));
			this.Var_8bc = this.oCPU.AX.Word;
			this.oCPU.PushWord(0x0c62); // stack management - push return offset
										// Instruction address 0x0000:0x0c5f, size: 3
			F0_VGA_0d12();
			this.oCPU.PopWord(); // stack management - pop return offset
			if (this.oCPU.Flags.E) goto L0c6c;
			this.oCPU.PushWord(0x0c67); // stack management - push return offset
										// Instruction address 0x0000:0x0c64, size: 3
			F0_VGA_0c77();
			this.oCPU.PopWord(); // stack management - pop return offset
			if (this.oCPU.Flags.B) goto L0c6c;
			this.oCPU.PushWord(0x0c6c); // stack management - push return offset
										// Instruction address 0x0000:0x0c69, size: 3
			F0_VGA_0d68();
			this.oCPU.PopWord(); // stack management - pop return offset

		L0c6c:
			// LEA
			this.oCPU.AX.Word = 0x8c2; // is it a reference to Var_8c2 ???
			this.oCPU.DX.Word = this.oCPU.CS.Word;
			this.oCPU.DS.Word = this.oCPU.PopWord();
			this.oCPU.DI.Word = this.oCPU.PopWord();
			this.oCPU.SI.Word = this.oCPU.PopWord();
			this.oCPU.BP.Word = this.oCPU.PopWord();
			// Far return
			this.oCPU.Log.ExitBlock("'F0_VGA_0c3e'");
			this.oCPU.Log = oTempLog;
		}

		public void F0_VGA_0c77()
		{
			LogWrapper oTempLog = this.oCPU.Log;
			this.oCPU.Log = this.oParent.VGADriverLog;
			this.oCPU.Log.EnterBlock("'F0_VGA_0c77'");
			this.oCPU.CS.Word = this.usSegment; // set this function segment

			// function body
			this.oCPU.DI.Word = this.oCPU.ORWord(this.oCPU.DI.Word, this.oCPU.DI.Word);
			if (this.oCPU.Flags.NS) goto L0c8a;
			this.oCPU.AX.Word = this.oCPU.DI.Word;
			this.oCPU.AX.Word = this.oCPU.NEGWord(this.oCPU.AX.Word);
			this.oCPU.CMPWord(this.oCPU.AX.Word, this.Var_8bc);
			if (this.oCPU.Flags.AE) goto L0cd6;
			this.Var_8ca = this.oCPU.AX.Word;

		L0c8a:
			this.oCPU.AX.Word = this.oCPU.DI.Word;
			this.oCPU.AX.Word = this.oCPU.ADDWord(this.oCPU.AX.Word, this.Var_8bc);
			this.oCPU.AX.Word = this.oCPU.DECWord(this.oCPU.AX.Word);
			this.oCPU.BX.Word = this.oCPU.ReadWord(this.oCPU.SS.Word, (ushort)(this.oCPU.BP.Word + 0x8));
			this.oCPU.BX.Word = this.oCPU.ORWord(this.oCPU.BX.Word, this.oCPU.BX.Word);
			if (this.oCPU.Flags.S) goto L0cd6;
			this.oCPU.CMPWord(this.oCPU.DI.Word, this.oCPU.BX.Word);
			if (this.oCPU.Flags.G) goto L0cd6;
			this.oCPU.AX.Word = this.oCPU.SUBWord(this.oCPU.AX.Word, this.oCPU.BX.Word);
			if (this.oCPU.Flags.LE) goto L0ca5;
			this.Var_8ce = this.oCPU.AX.Word;

		L0ca5:
			this.oCPU.DX.Word = this.oCPU.ORWord(this.oCPU.DX.Word, this.oCPU.DX.Word);
			if (this.oCPU.Flags.NS) goto L0cb8;
			this.oCPU.AX.Word = this.oCPU.DX.Word;
			this.oCPU.AX.Word = this.oCPU.NEGWord(this.oCPU.AX.Word);
			this.oCPU.CMPWord(this.oCPU.AX.Word, this.Var_8ba);
			if (this.oCPU.Flags.AE) goto L0cd6;
			this.Var_8cc = this.oCPU.AX.Word;

		L0cb8:
			this.oCPU.AX.Word = this.oCPU.DX.Word;
			this.oCPU.AX.Word = this.oCPU.ADDWord(this.oCPU.AX.Word, this.Var_8ba);
			this.oCPU.AX.Word = this.oCPU.DECWord(this.oCPU.AX.Word);
			this.oCPU.BX.Word = this.oCPU.ReadWord(this.oCPU.SS.Word, (ushort)(this.oCPU.BP.Word + 0x6));
			this.oCPU.BX.Word = this.oCPU.ORWord(this.oCPU.BX.Word, this.oCPU.BX.Word);
			if (this.oCPU.Flags.S) goto L0cd6;
			this.oCPU.CMPWord(this.oCPU.DX.Word, this.oCPU.BX.Word);
			if (this.oCPU.Flags.G) goto L0cd6;
			this.oCPU.AX.Word = this.oCPU.SUBWord(this.oCPU.AX.Word, this.oCPU.BX.Word);
			if (this.oCPU.Flags.LE) goto L0cd8;
			this.Var_8d0 = this.oCPU.AX.Word;
			goto L0cd8;

		L0cd6:
			this.oCPU.Flags.C = true;
			// Near return
			this.oCPU.Log.ExitBlock("'F0_VGA_0c77'");
			this.oCPU.Log = oTempLog;
			return;

		L0cd8:
			this.oCPU.AX.Word = this.Var_8cc;
			this.oCPU.AX.Word = this.oCPU.ADDWord(this.oCPU.AX.Word, this.oCPU.DX.Word);
			this.Var_8c2 = this.oCPU.AX.Word;
			this.oCPU.AX.Word = this.Var_8ca;
			this.oCPU.AX.Word = this.oCPU.ADDWord(this.oCPU.AX.Word, this.oCPU.DI.Word);
			this.Var_8c4 = this.oCPU.AX.Word;
			this.oCPU.AX.Word = this.Var_8ba;
			this.oCPU.AX.Word = this.oCPU.SUBWord(this.oCPU.AX.Word, this.Var_8cc);
			this.oCPU.AX.Word = this.oCPU.SUBWord(this.oCPU.AX.Word, this.Var_8d0);
			this.Var_8c6 = this.oCPU.AX.Word;
			this.oCPU.AX.Word = this.Var_8bc;
			this.oCPU.AX.Word = this.oCPU.SUBWord(this.oCPU.AX.Word, this.Var_8ca);
			this.oCPU.AX.Word = this.oCPU.SUBWord(this.oCPU.AX.Word, this.Var_8ce);
			this.Var_8c8 = this.oCPU.AX.Word;
			this.oCPU.Flags.C = false;
			// Near return
			this.oCPU.Log.ExitBlock("'F0_VGA_0c77'");
			this.oCPU.Log = oTempLog;
		}

		public void F0_VGA_0d12()
		{
			LogWrapper oTempLog = this.oCPU.Log;
			this.oCPU.Log = this.oParent.VGADriverLog;
			this.oCPU.Log.EnterBlock("'F0_VGA_0d12'");
			this.oCPU.CS.Word = this.usSegment; // set this function segment

			// function body
			this.Var_8ca = 0;
			this.Var_8cc = 0;
			this.Var_8ce = 0;
			this.Var_8d0 = 0;
			this.Var_8c2 = 0;
			this.Var_8c4 = 0;
			this.Var_8c6 = 0;
			this.Var_8c8 = 0;
			this.oCPU.AX.Word = this.oCPU.DS.Word;
			this.oCPU.AX.Word = this.oCPU.ORWord(this.oCPU.AX.Word, this.oCPU.AX.Word);
			if (this.oCPU.Flags.E) goto L0d46;
			this.oCPU.AX.Word = this.oCPU.ReadWord(this.oCPU.DS.Word, 0x0);
			this.oCPU.AX.Word = this.oCPU.ORWord(this.oCPU.AX.Word, this.oCPU.AX.Word);
			if (this.oCPU.Flags.E) goto L0d46;
			this.oCPU.AX.Word = this.oCPU.ReadWord(this.oCPU.DS.Word, 0x2);
			this.oCPU.AX.Word = this.oCPU.ORWord(this.oCPU.AX.Word, this.oCPU.AX.Word);

		L0d46:
			// Near return
			this.oCPU.Log.ExitBlock("'F0_VGA_0d12'");
			this.oCPU.Log = oTempLog;
		}

		public void F0_VGA_0d47()
		{
			LogWrapper oTempLog = this.oCPU.Log;
			this.oCPU.Log.WriteLine($"// Calling 'F0_VGA_0d47'");
			this.oCPU.Log = this.oParent.VGADriverLog;
			this.oCPU.Log.EnterBlock("'F0_VGA_0d47'");
			this.oCPU.CS.Word = this.usSegment; // set this function segment

			// function body
			this.oCPU.PushWord(this.oCPU.BP.Word);
			this.oCPU.BP.Word = this.oCPU.SP.Word;
			this.oCPU.PushWord(this.oCPU.SI.Word);
			this.oCPU.PushWord(this.oCPU.DI.Word);
			this.oCPU.PushWord(this.oCPU.DS.Word);
			this.oCPU.DX.Word = this.oCPU.ReadWord(this.oCPU.SS.Word, (ushort)(this.oCPU.BP.Word + 0x8));
			this.oCPU.DI.Word = this.oCPU.ReadWord(this.oCPU.SS.Word, (ushort)(this.oCPU.BP.Word + 0xa));
			this.oCPU.DS.Word = this.oCPU.ReadWord(this.oCPU.SS.Word, (ushort)(this.oCPU.BP.Word + 0xc));
			this.oCPU.SI.Word = 0x0;
			this.oCPU.BP.Word = this.oCPU.ReadWord(this.oCPU.SS.Word, (ushort)(this.oCPU.BP.Word + 0x6));
			this.oCPU.PushWord(0x0d5e); // stack management - push return offset
										// Instruction address 0x0000:0x0d5b, size: 3
			F0_VGA_0d12();
			this.oCPU.PopWord(); // stack management - pop return offset
			if (this.oCPU.Flags.E) goto L0d63;
			this.oCPU.PushWord(0x0d63); // stack management - push return offset
										// Instruction address 0x0000:0x0d60, size: 3
			F0_VGA_0d68();
			this.oCPU.PopWord(); // stack management - pop return offset

		L0d63:
			this.oCPU.DS.Word = this.oCPU.PopWord();
			this.oCPU.DI.Word = this.oCPU.PopWord();
			this.oCPU.SI.Word = this.oCPU.PopWord();
			this.oCPU.BP.Word = this.oCPU.PopWord();
			// Far return
			this.oCPU.Log.ExitBlock("'F0_VGA_0d47'");
			this.oCPU.Log = oTempLog;
		}

		public void F0_VGA_0d68()
		{
			LogWrapper oTempLog = this.oCPU.Log;
			this.oCPU.Log = this.oParent.VGADriverLog;
			this.oCPU.Log.EnterBlock("'F0_VGA_0d68'");
			this.oCPU.CS.Word = this.usSegment; // set this function segment

			// function body
			this.oCPU.PushWord(this.oCPU.BP.Word);
			this.oCPU.PushWord(this.oCPU.ES.Word);
			this.oCPU.BX.Word = this.oCPU.ReadWord(this.oCPU.SS.Word, (ushort)(this.oCPU.BP.Word + 0x0));
			//this.oCPU.BX.Word <<= 1;
			//this.oCPU.ES.Word = this.oCPU.ReadWord(this.oCPU.CS.Word, (ushort)(this.oCPU.BX.Word + 0x1970));
			this.oCPU.ES.Word = this.Var_1970[this.oCPU.BX.Word];

			this.oCPU.DX.Word = this.oCPU.ADDWord(this.oCPU.DX.Word, this.oCPU.ReadWord(this.oCPU.SS.Word, (ushort)(this.oCPU.BP.Word + 0x2)));
			this.oCPU.DI.Word = this.oCPU.ADDWord(this.oCPU.DI.Word, this.oCPU.ReadWord(this.oCPU.SS.Word, (ushort)(this.oCPU.BP.Word + 0x4)));
			this.oCPU.DI.Word = this.oCPU.ADDWord(this.oCPU.DI.Word, this.Var_8ca);
			//this.oCPU.DI.Word = this.oCPU.SHLWord(this.oCPU.DI.Word, 0x1);
			//this.oCPU.BP.Word = this.oCPU.ReadWord(this.oCPU.CS.Word, (ushort)(this.oCPU.DI.Word + 0x17d6));
			this.oCPU.BP.Word = (ushort)(VGADriver.ScreenWidth * this.oCPU.DI.Word);
			this.oCPU.BP.Word = this.oCPU.ADDWord(this.oCPU.BP.Word, this.oCPU.DX.Word);
			this.oCPU.LODSWord();
			this.oCPU.AX.Word = this.oCPU.SUBWord(this.oCPU.AX.Word, this.Var_8d0);
			if (this.oCPU.Flags.LE) goto L0df5;
			this.Var_8b4 = this.oCPU.AX.Word;
			this.oCPU.LODSWord();
			this.oCPU.AX.Word = this.oCPU.SUBWord(this.oCPU.AX.Word, this.Var_8ca);
			this.oCPU.AX.Word = this.oCPU.SUBWord(this.oCPU.AX.Word, this.Var_8ce);
			if (this.oCPU.Flags.LE) goto L0df5;
			this.Var_8b2 = this.oCPU.AX.Word;
			this.oCPU.CX.Word = this.Var_8ca;
			if (this.oCPU.CX.Word == 0) goto L0db3;

			L0dac:
			this.oCPU.SI.Word = this.oCPU.ADDWord(this.oCPU.SI.Word, this.oCPU.ReadWord(this.oCPU.DS.Word, this.oCPU.SI.Word));
			this.oCPU.SI.Word = this.oCPU.ADDWord(this.oCPU.SI.Word, 0x4);
			if (this.oCPU.Loop(this.oCPU.CX)) goto L0dac;

			L0db3:
			this.oCPU.LODSWord();
			this.oCPU.CX.Word = this.oCPU.AX.Word;
			this.oCPU.DX.Word = this.oCPU.AX.Word;
			this.oCPU.LODSWord();
			if (this.oCPU.CX.Word == 0) goto L0de8;
			this.oCPU.BX.Word = this.oCPU.AX.Word;
			this.oCPU.CX.Word = this.oCPU.ADDWord(this.oCPU.CX.Word, this.oCPU.AX.Word);
			this.oCPU.AX.Word = this.oCPU.SUBWord(this.oCPU.AX.Word, this.Var_8cc);
			if (this.oCPU.Flags.A) goto L0dcc;
			this.oCPU.SI.Word = this.oCPU.SUBWord(this.oCPU.SI.Word, this.oCPU.AX.Word);
			this.oCPU.BX.Word = this.oCPU.SUBWord(this.oCPU.BX.Word, this.oCPU.AX.Word);
			this.oCPU.DX.Word = this.oCPU.ADDWord(this.oCPU.DX.Word, this.oCPU.AX.Word);

		L0dcc:
			this.oCPU.AX.Word = this.Var_8b4;
			this.oCPU.CMPWord(this.oCPU.AX.Word, this.oCPU.CX.Word);
			if (this.oCPU.Flags.A) goto L0dd6;
			this.oCPU.CX.Word = this.oCPU.AX.Word;

		L0dd6:
			this.oCPU.CX.Word = this.oCPU.SUBWord(this.oCPU.CX.Word, this.oCPU.BX.Word);
			if (this.oCPU.Flags.BE) goto L0de8;
			this.oCPU.DI.Word = this.oCPU.BP.Word;
			this.oCPU.DI.Word = this.oCPU.ADDWord(this.oCPU.DI.Word, this.oCPU.BX.Word);
			this.oCPU.DX.Word = this.oCPU.SUBWord(this.oCPU.DX.Word, this.oCPU.CX.Word);

		L0de0:
			this.oCPU.LODSByte();
			this.oCPU.AX.Low = this.oCPU.ORByte(this.oCPU.AX.Low, this.oCPU.AX.Low);
			if (this.oCPU.Flags.E) goto L0df8;
			this.oCPU.STOSByte();
			if (this.oCPU.Loop(this.oCPU.CX)) goto L0de0;

			L0de8:
			this.oCPU.BP.Word = this.oCPU.ADDWord(this.oCPU.BP.Word, 0x140);
			this.oCPU.SI.Word = this.oCPU.ADDWord(this.oCPU.SI.Word, this.oCPU.DX.Word);
			this.Var_8b2--;
			if (this.Var_8b2 != 0) goto L0db3;

			L0df5:
			this.oCPU.ES.Word = this.oCPU.PopWord();
			this.oCPU.BP.Word = this.oCPU.PopWord();
			// Near return
			this.oCPU.Log.ExitBlock("'F0_VGA_0d68'");
			this.oCPU.Log = oTempLog;
			return;

		L0df8:
			this.oCPU.DI.Word = this.oCPU.INCWord(this.oCPU.DI.Word);
			if (this.oCPU.Loop(this.oCPU.CX)) goto L0de0;
			goto L0de8;
		}

		public void F0_VGA_10bb_ScrollLeft()
		{
			LogWrapper oTempLog = this.oCPU.Log;
			this.oCPU.Log.WriteLine($"// Calling 'F0_VGA_10bb_ScrollLeft'");
			this.oCPU.Log = this.oParent.VGADriverLog;
			this.oCPU.Log.EnterBlock("'F0_VGA_10bb_ScrollLeft'");
			this.oCPU.CS.Word = this.usSegment; // set this function segment

			// function body
			this.oCPU.AX.Word = this.Var_10ac;
			this.oCPU.AX.Word <<= 2;
			this.oCPU.AX.Word += this.Var_10ac;
			this.oCPU.AX.Word++;
			this.Var_10ac = this.oCPU.AX.Word;

			if (this.Var_10ae != 0x0)
			{
				this.oCPU.AX.High = this.oCPU.ANDByte(this.oCPU.AX.High, 0x3);
				this.Var_10ae--;
				if (this.Var_10ae != 0) goto L10e1;
				this.oCPU.AX.High = 0x0;

			L10e1:
				this.oCPU.DX.Word = 0x3d4;
				this.oCPU.AX.Low = 0xd;
				this.oCPU.OUTWord(this.oCPU.DX.Word, 0xd); // Set GPU start address low
			}

			// Far return
			this.oCPU.Log.ExitBlock("'F0_VGA_10bb_ScrollLeft'");
			this.oCPU.Log = oTempLog;
		}

		#region Fonts
		private ushort FontTableReadWord(int tablePtr)
		{
			return (ushort)((ushort)this.Var_19f0_FontTable[tablePtr] | ((ushort)this.Var_19f0_FontTable[tablePtr + 1] << 8));
		}

		public void F0_VGA_115d_GetCharWidth(ushort fontID, byte ch)
		{
			LogWrapper oTempLog = this.oCPU.Log;
			this.oCPU.Log.WriteLine($"// Calling 'F0_VGA_115d'({fontID}, '{(char)ch}')");
			this.oCPU.Log = this.oParent.VGADriverLog;
			this.oCPU.Log.EnterBlock($"'F0_VGA_115d'({fontID}, '{(char)ch}')");

			// function body
			ushort usBaseWidth = 0;
			ushort usCharWidth = 0;

			if (fontID > 0 && fontID <= FontTableReadWord(0) && ch < 128)
			{
				ushort usFontPtr = FontTableReadWord(fontID << 1);

				if (ch >= this.Var_19f0_FontTable[usFontPtr - 8] && ch <= this.Var_19f0_FontTable[usFontPtr - 7])
				{
					usBaseWidth = this.Var_19f0_FontTable[usFontPtr - 3];
					usCharWidth = this.Var_19f0_FontTable[usFontPtr - 5];

					if (usCharWidth == 0)
					{
						usCharWidth = this.Var_19f0_FontTable[usFontPtr - 9 - (this.Var_19f0_FontTable[usFontPtr - 7] - ch)];
					}
				}
			}

			this.oCPU.AX.Word = (ushort)(usBaseWidth + usCharWidth);

			// Far return
			this.oCPU.Log.ExitBlock("'F0_VGA_115d'");
			this.oCPU.Log = oTempLog;
		}

		public Size GetDrawStringSize(int fontID, string text)
		{
			int iWidth = 0;
			int iHeight = 0;

			if (fontID > 0 && fontID <= FontTableReadWord(0) && text.Length > 0)
			{
				// get a pointer to font
				int iFontPtr = FontTableReadWord(fontID << 1);

				// get basic font properties
				int iCharHeight = this.Var_19f0_FontTable[iFontPtr - 4];

				char cFirstCharCode = (char)this.Var_19f0_FontTable[iFontPtr - 8];
				char cLastCharCode = (char)this.Var_19f0_FontTable[iFontPtr - 7];
				int iCharCodeRange = (int)(cLastCharCode - cFirstCharCode);

				int iFontWidthTablePtr = 0;
				int iCharWidth = this.Var_19f0_FontTable[iFontPtr - 5];
				if (iCharWidth != 0)
				{
					iCharWidth += this.Var_19f0_FontTable[iFontPtr - 3];
				}
				else
				{
					iCharWidth = this.Var_19f0_FontTable[iFontPtr - 3];
					iFontWidthTablePtr = (ushort)(iFontPtr - 9 - iCharCodeRange);
				}

				iHeight = iCharHeight;

				for (int i = 0; i < text.Length; i++)
				{
					char ch = text[i];
					if (ch < cFirstCharCode || ch > cLastCharCode)
					{
						continue;
					}

					int iCurrentCharWidth = iCharWidth;
					if (iFontWidthTablePtr != 0)
					{
						iCurrentCharWidth += this.Var_19f0_FontTable[iFontWidthTablePtr + (ch - cFirstCharCode)];
					}

					iWidth += iCurrentCharWidth;
				}

			}

			return new Size(iWidth, iHeight);
		}

		public void F0_VGA_11ae_GetTextHeight(ushort fontID)
		{
			LogWrapper oTempLog = this.oCPU.Log;
			this.oCPU.Log.WriteLine($"// Calling 'F0_VGA_11ae_GetTextHeight'");
			this.oCPU.Log = this.oParent.VGADriverLog;
			this.oCPU.Log.EnterBlock("'F0_VGA_11ae_GetTextHeight'");

			// function body
			this.oCPU.AX.Word = 0x0;
			if (fontID > 0 && fontID <= FontTableReadWord(0))
			{
				ushort usFontPtr = FontTableReadWord(fontID << 1);
				this.oCPU.AX.Word = (ushort)(this.Var_19f0_FontTable[usFontPtr - 0x4] + this.Var_19f0_FontTable[usFontPtr - 0x2]);
			}

			// Far return
			this.oCPU.Log.ExitBlock("'F0_VGA_11ae_GetTextHeight'");
			this.oCPU.Log = oTempLog;
		}

		public void F0_VGA_11d7_DrawText(ushort structPtr, int xPos, int yPos, ushort stringPtr)
		{
			LogWrapper oTempLog = this.oCPU.Log;
			this.oCPU.Log.WriteLine($"// Calling 'F0_VGA_11d7_DrawText'");
			this.oCPU.Log = this.oParent.VGADriverLog;
			this.oCPU.Log.EnterBlock("'F0_VGA_11d7_DrawText'");

			this.oCPU.Log.WriteLine("// Parameters: ({" +
				$"ScreenID: {this.oCPU.ReadWord(this.oCPU.DS.Word, (ushort)(structPtr))}, " +
				$"X: {this.oCPU.ReadWord(this.oCPU.DS.Word, (ushort)(structPtr + 0x2))}, " +
				$"Y: {this.oCPU.ReadWord(this.oCPU.DS.Word, (ushort)(structPtr + 0x4))}, " +
				$"Width: {this.oCPU.ReadWord(this.oCPU.DS.Word, (ushort)(structPtr + 0x6))}, " +
				$"Height: {this.oCPU.ReadWord(this.oCPU.DS.Word, (ushort)(structPtr + 0x8))}, " +
				$"Flags: 0x{this.oCPU.ReadWord(this.oCPU.DS.Word, (ushort)(structPtr + 0xa)):x4}, " +
				$"Back color: {this.oCPU.ReadByte(this.oCPU.DS.Word, (ushort)(structPtr + 0xc))}, " +
				$"Pixel mode: {this.oCPU.ReadByte(this.oCPU.DS.Word, (ushort)(structPtr + 0xd))}, " +
				$"Front color: {this.oCPU.ReadByte(this.oCPU.DS.Word, (ushort)(structPtr + 0xe))}, " +
				$"Undefined 1: {this.oCPU.ReadByte(this.oCPU.DS.Word, (ushort)(structPtr + 0xf))}, " +
				$"Font ID: {this.oCPU.ReadWord(this.oCPU.DS.Word, (ushort)(structPtr + 0x10))}" +
				"}, " +
				$"{xPos}, {yPos}, '{this.oCPU.ReadString(CPUMemory.ToLinearAddress(this.oCPU.DS.Word, stringPtr))}'" +
				")");

			// function body

			int iScreenID = this.oCPU.ReadWord(this.oCPU.DS.Word, structPtr);
			int iX = this.oCPU.ReadWord(this.oCPU.DS.Word, (ushort)(structPtr + 2));
			int iY = this.oCPU.ReadWord(this.oCPU.DS.Word, (ushort)(structPtr + 4));
			int iWidth = this.oCPU.ReadWord(this.oCPU.DS.Word, (ushort)(structPtr + 6));
			int iHeight = this.oCPU.ReadWord(this.oCPU.DS.Word, (ushort)(structPtr + 8));
			int iFlags = this.oCPU.ReadWord(this.oCPU.DS.Word, (ushort)(structPtr + 0xa));
			byte ubFrontColor = this.oCPU.ReadByte(this.oCPU.DS.Word, (ushort)(structPtr + 0xc));
			byte ubPixelMode = this.oCPU.ReadByte(this.oCPU.DS.Word, (ushort)(structPtr + 0xd));
			byte ubBackColor = this.oCPU.ReadByte(this.oCPU.DS.Word, (ushort)(structPtr + 0xe));
			int iFontID = this.oCPU.ReadWord(this.oCPU.DS.Word, (ushort)(structPtr + 0x10));

			string sText = this.oCPU.ReadString(CPUMemory.ToLinearAddress(this.oCPU.DS.Word, stringPtr));

			ushort usLineCount = 0;

			if (iFontID > 0 && iFontID <= FontTableReadWord(0) && sText.Length > 0)
			{
				// get a pointer to font
				int iFontPtr = FontTableReadWord(iFontID << 1);

				// get basic font properties
				int iCharHeight = this.Var_19f0_FontTable[iFontPtr - 4];
				/*if ((iFlags & 1) != 0)
				{
					// multiline?
					iCharHeight += this.Var_19f0_FontTable[iFontPtr - 2];
				}*/

				char cFirstCharCode = (char)this.Var_19f0_FontTable[iFontPtr - 8];
				char cLastCharCode = (char)this.Var_19f0_FontTable[iFontPtr - 7];
				int iCharCodeRange = (int)(cLastCharCode - cFirstCharCode);

				int iFontWidthTablePtr = 0;
				int iCharBaseWidth = this.Var_19f0_FontTable[iFontPtr - 3];
				int iCharWidth = this.Var_19f0_FontTable[iFontPtr - 5];
				if (iCharWidth == 0)
				{
					iFontWidthTablePtr = (ushort)(iFontPtr - 9 - iCharCodeRange);
				}

				// font table navigation
				int iCharWordCount = (byte)(this.Var_19f0_FontTable[iFontPtr - 6] - 1);
				int iCharTableRowWitdh = (ushort)((iCharCodeRange + 1) << iCharWordCount);

				// check string, remove undefined characters
				for (int i = 0; i < sText.Length; i++)
				{
					char ch = sText[i];
					if (ch < cFirstCharCode || ch > cLastCharCode)
					{
						sText = sText.Substring(0, i) + sText.Substring(i + 1);
						i--;
					}
				}

				if (sText.Length > 0)
				{
					int iRectWidth = (iWidth - iX) + 1;
					int iRectHeight = (iHeight - iY) + 1;
					int iRectX = iX + xPos;
					int iRectY = iY + yPos;

					if (iRectX < 0)
					{
						iRectWidth += iRectX;
						iRectX = 0;
					}

					if (iRectY < 0)
					{
						iRectHeight += iRectY;
						iRectY = 0;
					}

					if (iRectX + iRectWidth > VGADriver.ScreenWidth)
					{
						iRectWidth = VGADriver.ScreenWidth - iRectX;
					}

					if (iRectY + iRectHeight > VGADriver.ScreenHeight)
					{
						iRectHeight = VGADriver.ScreenHeight - iRectY;
					}

					if (iRectX < VGADriver.ScreenWidth && iRectY < VGADriver.ScreenHeight && iRectWidth > 0 && iRectHeight > 0)
					{
						// F0_VGA_0fac_DrawTextToScreen

						ushort usImageSegment = this.Var_1970[iScreenID];
						ushort usImageOffset = (ushort)((VGADriver.ScreenWidth * iRectY) + iRectX);
						int iCurrentFontPtr = iFontPtr;

						for (int i = 0; i < iCharHeight && i < iRectHeight; i++)
						{
							int iCurrentX = 0;
							ushort usImagePosition = (ushort)(usImageOffset + (VGADriver.ScreenWidth * i));

							for (int j = 0; j < sText.Length && iCurrentX < iRectWidth; j++)
							{
								char ch = sText[j];

								int iCurrentCharWidth = iCharWidth;
								if (iCurrentCharWidth == 0)
								{
									iCurrentCharWidth = this.Var_19f0_FontTable[iFontWidthTablePtr + (ch - cFirstCharCode)];
								}

								int iCharPtr = iCurrentFontPtr + ((ch - cFirstCharCode) << iCharWordCount);

								int iBitCount = 0;
								if (iCharPtr < this.Var_19f0_FontTable.Length)
								{
									byte ubCharBits = this.Var_19f0_FontTable[iCharPtr];

									for (int k = 0; k < iCharBaseWidth + iCurrentCharWidth && (iCurrentX + k) < iRectWidth; k++)
									{
										bool bBackColor = true;
										byte ubColor = ubBackColor;

										if (k >= iCharBaseWidth)
										{
											if (iBitCount >= 8)
											{
												iBitCount = 0;
												iCharPtr++;
												ubCharBits = this.Var_19f0_FontTable[iCharPtr];
											}

											if ((ubCharBits & 0x80) != 0)
											{
												ubColor = ubFrontColor;
												bBackColor = false;
											}
											ubCharBits <<= 1;
											iBitCount++;
										}

										if (!bBackColor)
										{
											// 0x88 - MOV, 0x20 - AND, 0x8 - OR, 0x30 - XOR
											switch (ubPixelMode)
											{
												case 0:
													// MOV
													this.oCPU.WriteByte(usImageSegment, usImagePosition, ubColor);
													break;

												case 1:
													// AND
													this.oCPU.WriteByte(usImageSegment, usImagePosition, (byte)(this.oCPU.ReadByte(usImageSegment, usImagePosition) & ubColor));
													break;

												case 2:
													// OR
													this.oCPU.WriteByte(usImageSegment, usImagePosition, (byte)(this.oCPU.ReadByte(usImageSegment, usImagePosition) | ubColor));
													break;

												case 3:
													// XOR
													this.oCPU.WriteByte(usImageSegment, usImagePosition, (byte)(this.oCPU.ReadByte(usImageSegment, usImagePosition) ^ ubColor));
													break;

												default:
													throw new Exception("Undefined pixel mode");
											}
										}
										usImagePosition++;
									}
								}

								iCurrentX += iCharBaseWidth + iCurrentCharWidth;
							}
							iCurrentFontPtr += iCharTableRowWitdh;
							usLineCount++;
						}

						// end F0_VGA_0fac_DrawTextToScreen
					}
				}
			}

			this.oCPU.AX.Word = usLineCount;

			// Far return
			this.oCPU.Log.ExitBlock("'F0_VGA_11d7_DrawText'");
			this.oCPU.Log = oTempLog;
		}
		#endregion
	}
}
