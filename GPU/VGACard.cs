using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Drawing;
using System.Drawing.Imaging;
using System.Windows.Forms;

namespace Disassembler
{
	public class VGACard
	{
		public enum ModeEnum
		{
			Text80x25Color = 3,
			Graphics320x200x16 = 0xd,
			Graphics320x200x256 = 0x13
		}

		#region Font data
		byte[] abFont08 = new byte[256 * 8]{
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x7e, 0x81, 0xa5, 0x81, 0xbd, 0x99, 0x81, 0x7e,
			0x7e, 0xff, 0xdb, 0xff, 0xc3, 0xe7, 0xff, 0x7e,
			0x6c, 0xfe, 0xfe, 0xfe, 0x7c, 0x38, 0x10, 0x00,
			0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x38, 0x10, 0x00,
			0x38, 0x7c, 0x38, 0xfe, 0xfe, 0x7c, 0x38, 0x7c,
			0x10, 0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x38, 0x7c,
			0x00, 0x00, 0x18, 0x3c, 0x3c, 0x18, 0x00, 0x00,
			0xff, 0xff, 0xe7, 0xc3, 0xc3, 0xe7, 0xff, 0xff,
			0x00, 0x3c, 0x66, 0x42, 0x42, 0x66, 0x3c, 0x00,
			0xff, 0xc3, 0x99, 0xbd, 0xbd, 0x99, 0xc3, 0xff,
			0x0f, 0x07, 0x0f, 0x7d, 0xcc, 0xcc, 0xcc, 0x78,
			0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x18,
			0x3f, 0x33, 0x3f, 0x30, 0x30, 0x70, 0xf0, 0xe0,
			0x7f, 0x63, 0x7f, 0x63, 0x63, 0x67, 0xe6, 0xc0,
			0x99, 0x5a, 0x3c, 0xe7, 0xe7, 0x3c, 0x5a, 0x99,
			0x80, 0xe0, 0xf8, 0xfe, 0xf8, 0xe0, 0x80, 0x00,
			0x02, 0x0e, 0x3e, 0xfe, 0x3e, 0x0e, 0x02, 0x00,
			0x18, 0x3c, 0x7e, 0x18, 0x18, 0x7e, 0x3c, 0x18,
			0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x66, 0x00,
			0x7f, 0xdb, 0xdb, 0x7b, 0x1b, 0x1b, 0x1b, 0x00,
			0x3e, 0x63, 0x38, 0x6c, 0x6c, 0x38, 0xcc, 0x78,
			0x00, 0x00, 0x00, 0x00, 0x7e, 0x7e, 0x7e, 0x00,
			0x18, 0x3c, 0x7e, 0x18, 0x7e, 0x3c, 0x18, 0xff,
			0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x00,
			0x18, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00,
			0x00, 0x18, 0x0c, 0xfe, 0x0c, 0x18, 0x00, 0x00,
			0x00, 0x30, 0x60, 0xfe, 0x60, 0x30, 0x00, 0x00,
			0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xfe, 0x00, 0x00,
			0x00, 0x24, 0x66, 0xff, 0x66, 0x24, 0x00, 0x00,
			0x00, 0x18, 0x3c, 0x7e, 0xff, 0xff, 0x00, 0x00,
			0x00, 0xff, 0xff, 0x7e, 0x3c, 0x18, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x30, 0x78, 0x78, 0x30, 0x30, 0x00, 0x30, 0x00,
			0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x6c, 0x6c, 0xfe, 0x6c, 0xfe, 0x6c, 0x6c, 0x00,
			0x30, 0x7c, 0xc0, 0x78, 0x0c, 0xf8, 0x30, 0x00,
			0x00, 0xc6, 0xcc, 0x18, 0x30, 0x66, 0xc6, 0x00,
			0x38, 0x6c, 0x38, 0x76, 0xdc, 0xcc, 0x76, 0x00,
			0x60, 0x60, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x18, 0x30, 0x60, 0x60, 0x60, 0x30, 0x18, 0x00,
			0x60, 0x30, 0x18, 0x18, 0x18, 0x30, 0x60, 0x00,
			0x00, 0x66, 0x3c, 0xff, 0x3c, 0x66, 0x00, 0x00,
			0x00, 0x30, 0x30, 0xfc, 0x30, 0x30, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x60,
			0x00, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x00,
			0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0x80, 0x00,
			0x7c, 0xc6, 0xce, 0xde, 0xf6, 0xe6, 0x7c, 0x00,
			0x30, 0x70, 0x30, 0x30, 0x30, 0x30, 0xfc, 0x00,
			0x78, 0xcc, 0x0c, 0x38, 0x60, 0xcc, 0xfc, 0x00,
			0x78, 0xcc, 0x0c, 0x38, 0x0c, 0xcc, 0x78, 0x00,
			0x1c, 0x3c, 0x6c, 0xcc, 0xfe, 0x0c, 0x1e, 0x00,
			0xfc, 0xc0, 0xf8, 0x0c, 0x0c, 0xcc, 0x78, 0x00,
			0x38, 0x60, 0xc0, 0xf8, 0xcc, 0xcc, 0x78, 0x00,
			0xfc, 0xcc, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x00,
			0x78, 0xcc, 0xcc, 0x78, 0xcc, 0xcc, 0x78, 0x00,
			0x78, 0xcc, 0xcc, 0x7c, 0x0c, 0x18, 0x70, 0x00,
			0x00, 0x30, 0x30, 0x00, 0x00, 0x30, 0x30, 0x00,
			0x00, 0x30, 0x30, 0x00, 0x00, 0x30, 0x30, 0x60,
			0x18, 0x30, 0x60, 0xc0, 0x60, 0x30, 0x18, 0x00,
			0x00, 0x00, 0xfc, 0x00, 0x00, 0xfc, 0x00, 0x00,
			0x60, 0x30, 0x18, 0x0c, 0x18, 0x30, 0x60, 0x00,
			0x78, 0xcc, 0x0c, 0x18, 0x30, 0x00, 0x30, 0x00,
			0x7c, 0xc6, 0xde, 0xde, 0xde, 0xc0, 0x78, 0x00,
			0x30, 0x78, 0xcc, 0xcc, 0xfc, 0xcc, 0xcc, 0x00,
			0xfc, 0x66, 0x66, 0x7c, 0x66, 0x66, 0xfc, 0x00,
			0x3c, 0x66, 0xc0, 0xc0, 0xc0, 0x66, 0x3c, 0x00,
			0xf8, 0x6c, 0x66, 0x66, 0x66, 0x6c, 0xf8, 0x00,
			0xfe, 0x62, 0x68, 0x78, 0x68, 0x62, 0xfe, 0x00,
			0xfe, 0x62, 0x68, 0x78, 0x68, 0x60, 0xf0, 0x00,
			0x3c, 0x66, 0xc0, 0xc0, 0xce, 0x66, 0x3e, 0x00,
			0xcc, 0xcc, 0xcc, 0xfc, 0xcc, 0xcc, 0xcc, 0x00,
			0x78, 0x30, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00,
			0x1e, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0x78, 0x00,
			0xe6, 0x66, 0x6c, 0x78, 0x6c, 0x66, 0xe6, 0x00,
			0xf0, 0x60, 0x60, 0x60, 0x62, 0x66, 0xfe, 0x00,
			0xc6, 0xee, 0xfe, 0xfe, 0xd6, 0xc6, 0xc6, 0x00,
			0xc6, 0xe6, 0xf6, 0xde, 0xce, 0xc6, 0xc6, 0x00,
			0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x00,
			0xfc, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xf0, 0x00,
			0x78, 0xcc, 0xcc, 0xcc, 0xdc, 0x78, 0x1c, 0x00,
			0xfc, 0x66, 0x66, 0x7c, 0x6c, 0x66, 0xe6, 0x00,
			0x78, 0xcc, 0xe0, 0x70, 0x1c, 0xcc, 0x78, 0x00,
			0xfc, 0xb4, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00,
			0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xfc, 0x00,
			0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x78, 0x30, 0x00,
			0xc6, 0xc6, 0xc6, 0xd6, 0xfe, 0xee, 0xc6, 0x00,
			0xc6, 0xc6, 0x6c, 0x38, 0x38, 0x6c, 0xc6, 0x00,
			0xcc, 0xcc, 0xcc, 0x78, 0x30, 0x30, 0x78, 0x00,
			0xfe, 0xc6, 0x8c, 0x18, 0x32, 0x66, 0xfe, 0x00,
			0x78, 0x60, 0x60, 0x60, 0x60, 0x60, 0x78, 0x00,
			0xc0, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x02, 0x00,
			0x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0x78, 0x00,
			0x10, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
			0x30, 0x30, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0x76, 0x00,
			0xe0, 0x60, 0x60, 0x7c, 0x66, 0x66, 0xdc, 0x00,
			0x00, 0x00, 0x78, 0xcc, 0xc0, 0xcc, 0x78, 0x00,
			0x1c, 0x0c, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00,
			0x00, 0x00, 0x78, 0xcc, 0xfc, 0xc0, 0x78, 0x00,
			0x38, 0x6c, 0x60, 0xf0, 0x60, 0x60, 0xf0, 0x00,
			0x00, 0x00, 0x76, 0xcc, 0xcc, 0x7c, 0x0c, 0xf8,
			0xe0, 0x60, 0x6c, 0x76, 0x66, 0x66, 0xe6, 0x00,
			0x30, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00,
			0x0c, 0x00, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0x78,
			0xe0, 0x60, 0x66, 0x6c, 0x78, 0x6c, 0xe6, 0x00,
			0x70, 0x30, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00,
			0x00, 0x00, 0xcc, 0xfe, 0xfe, 0xd6, 0xc6, 0x00,
			0x00, 0x00, 0xf8, 0xcc, 0xcc, 0xcc, 0xcc, 0x00,
			0x00, 0x00, 0x78, 0xcc, 0xcc, 0xcc, 0x78, 0x00,
			0x00, 0x00, 0xdc, 0x66, 0x66, 0x7c, 0x60, 0xf0,
			0x00, 0x00, 0x76, 0xcc, 0xcc, 0x7c, 0x0c, 0x1e,
			0x00, 0x00, 0xdc, 0x76, 0x66, 0x60, 0xf0, 0x00,
			0x00, 0x00, 0x7c, 0xc0, 0x78, 0x0c, 0xf8, 0x00,
			0x10, 0x30, 0x7c, 0x30, 0x30, 0x34, 0x18, 0x00,
			0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00,
			0x00, 0x00, 0xcc, 0xcc, 0xcc, 0x78, 0x30, 0x00,
			0x00, 0x00, 0xc6, 0xd6, 0xfe, 0xfe, 0x6c, 0x00,
			0x00, 0x00, 0xc6, 0x6c, 0x38, 0x6c, 0xc6, 0x00,
			0x00, 0x00, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0xf8,
			0x00, 0x00, 0xfc, 0x98, 0x30, 0x64, 0xfc, 0x00,
			0x1c, 0x30, 0x30, 0xe0, 0x30, 0x30, 0x1c, 0x00,
			0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x00,
			0xe0, 0x30, 0x30, 0x1c, 0x30, 0x30, 0xe0, 0x00,
			0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0x00,
			0x78, 0xcc, 0xc0, 0xcc, 0x78, 0x18, 0x0c, 0x78,
			0x00, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0x7e, 0x00,
			0x1c, 0x00, 0x78, 0xcc, 0xfc, 0xc0, 0x78, 0x00,
			0x7e, 0xc3, 0x3c, 0x06, 0x3e, 0x66, 0x3f, 0x00,
			0xcc, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0x7e, 0x00,
			0xe0, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0x7e, 0x00,
			0x30, 0x30, 0x78, 0x0c, 0x7c, 0xcc, 0x7e, 0x00,
			0x00, 0x00, 0x78, 0xc0, 0xc0, 0x78, 0x0c, 0x38,
			0x7e, 0xc3, 0x3c, 0x66, 0x7e, 0x60, 0x3c, 0x00,
			0xcc, 0x00, 0x78, 0xcc, 0xfc, 0xc0, 0x78, 0x00,
			0xe0, 0x00, 0x78, 0xcc, 0xfc, 0xc0, 0x78, 0x00,
			0xcc, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00,
			0x7c, 0xc6, 0x38, 0x18, 0x18, 0x18, 0x3c, 0x00,
			0xe0, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00,
			0xc6, 0x38, 0x6c, 0xc6, 0xfe, 0xc6, 0xc6, 0x00,
			0x30, 0x30, 0x00, 0x78, 0xcc, 0xfc, 0xcc, 0x00,
			0x1c, 0x00, 0xfc, 0x60, 0x78, 0x60, 0xfc, 0x00,
			0x00, 0x00, 0x7f, 0x0c, 0x7f, 0xcc, 0x7f, 0x00,
			0x3e, 0x6c, 0xcc, 0xfe, 0xcc, 0xcc, 0xce, 0x00,
			0x78, 0xcc, 0x00, 0x78, 0xcc, 0xcc, 0x78, 0x00,
			0x00, 0xcc, 0x00, 0x78, 0xcc, 0xcc, 0x78, 0x00,
			0x00, 0xe0, 0x00, 0x78, 0xcc, 0xcc, 0x78, 0x00,
			0x78, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0x7e, 0x00,
			0x00, 0xe0, 0x00, 0xcc, 0xcc, 0xcc, 0x7e, 0x00,
			0x00, 0xcc, 0x00, 0xcc, 0xcc, 0x7c, 0x0c, 0xf8,
			0xc3, 0x18, 0x3c, 0x66, 0x66, 0x3c, 0x18, 0x00,
			0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0x78, 0x00,
			0x18, 0x18, 0x7e, 0xc0, 0xc0, 0x7e, 0x18, 0x18,
			0x38, 0x6c, 0x64, 0xf0, 0x60, 0xe6, 0xfc, 0x00,
			0xcc, 0xcc, 0x78, 0xfc, 0x30, 0xfc, 0x30, 0x30,
			0xf8, 0xcc, 0xcc, 0xfa, 0xc6, 0xcf, 0xc6, 0xc7,
			0x0e, 0x1b, 0x18, 0x3c, 0x18, 0x18, 0xd8, 0x70,
			0x1c, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0x7e, 0x00,
			0x38, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00,
			0x00, 0x1c, 0x00, 0x78, 0xcc, 0xcc, 0x78, 0x00,
			0x00, 0x1c, 0x00, 0xcc, 0xcc, 0xcc, 0x7e, 0x00,
			0x00, 0xf8, 0x00, 0xf8, 0xcc, 0xcc, 0xcc, 0x00,
			0xfc, 0x00, 0xcc, 0xec, 0xfc, 0xdc, 0xcc, 0x00,
			0x3c, 0x6c, 0x6c, 0x3e, 0x00, 0x7e, 0x00, 0x00,
			0x38, 0x6c, 0x6c, 0x38, 0x00, 0x7c, 0x00, 0x00,
			0x30, 0x00, 0x30, 0x60, 0xc0, 0xcc, 0x78, 0x00,
			0x00, 0x00, 0x00, 0xfc, 0xc0, 0xc0, 0x00, 0x00,
			0x00, 0x00, 0x00, 0xfc, 0x0c, 0x0c, 0x00, 0x00,
			0xc3, 0xc6, 0xcc, 0xde, 0x33, 0x66, 0xcc, 0x0f,
			0xc3, 0xc6, 0xcc, 0xdb, 0x37, 0x6f, 0xcf, 0x03,
			0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00,
			0x00, 0x33, 0x66, 0xcc, 0x66, 0x33, 0x00, 0x00,
			0x00, 0xcc, 0x66, 0x33, 0x66, 0xcc, 0x00, 0x00,
			0x22, 0x88, 0x22, 0x88, 0x22, 0x88, 0x22, 0x88,
			0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa,
			0xdb, 0x77, 0xdb, 0xee, 0xdb, 0x77, 0xdb, 0xee,
			0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
			0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0x18, 0x18,
			0x18, 0x18, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18,
			0x36, 0x36, 0x36, 0x36, 0xf6, 0x36, 0x36, 0x36,
			0x00, 0x00, 0x00, 0x00, 0xfe, 0x36, 0x36, 0x36,
			0x00, 0x00, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18,
			0x36, 0x36, 0xf6, 0x06, 0xf6, 0x36, 0x36, 0x36,
			0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
			0x00, 0x00, 0xfe, 0x06, 0xf6, 0x36, 0x36, 0x36,
			0x36, 0x36, 0xf6, 0x06, 0xfe, 0x00, 0x00, 0x00,
			0x36, 0x36, 0x36, 0x36, 0xfe, 0x00, 0x00, 0x00,
			0x18, 0x18, 0xf8, 0x18, 0xf8, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0x18, 0x18,
			0x18, 0x18, 0x18, 0x18, 0x1f, 0x00, 0x00, 0x00,
			0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0xff, 0x18, 0x18, 0x18,
			0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x18, 0x18,
			0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00,
			0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0x18, 0x18,
			0x18, 0x18, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18,
			0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x36, 0x36,
			0x36, 0x36, 0x37, 0x30, 0x3f, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x3f, 0x30, 0x37, 0x36, 0x36, 0x36,
			0x36, 0x36, 0xf7, 0x00, 0xff, 0x00, 0x00, 0x00,
			0x00, 0x00, 0xff, 0x00, 0xf7, 0x36, 0x36, 0x36,
			0x36, 0x36, 0x37, 0x30, 0x37, 0x36, 0x36, 0x36,
			0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00,
			0x36, 0x36, 0xf7, 0x00, 0xf7, 0x36, 0x36, 0x36,
			0x18, 0x18, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00,
			0x36, 0x36, 0x36, 0x36, 0xff, 0x00, 0x00, 0x00,
			0x00, 0x00, 0xff, 0x00, 0xff, 0x18, 0x18, 0x18,
			0x00, 0x00, 0x00, 0x00, 0xff, 0x36, 0x36, 0x36,
			0x36, 0x36, 0x36, 0x36, 0x3f, 0x00, 0x00, 0x00,
			0x18, 0x18, 0x1f, 0x18, 0x1f, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18,
			0x00, 0x00, 0x00, 0x00, 0x3f, 0x36, 0x36, 0x36,
			0x36, 0x36, 0x36, 0x36, 0xff, 0x36, 0x36, 0x36,
			0x18, 0x18, 0xff, 0x18, 0xff, 0x18, 0x18, 0x18,
			0x18, 0x18, 0x18, 0x18, 0xf8, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x18, 0x18,
			0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
			0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
			0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
			0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
			0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x76, 0xdc, 0xc8, 0xdc, 0x76, 0x00,
			0x00, 0x78, 0xcc, 0xf8, 0xcc, 0xf8, 0xc0, 0xc0,
			0x00, 0xfc, 0xcc, 0xc0, 0xc0, 0xc0, 0xc0, 0x00,
			0x00, 0xfe, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00,
			0xfc, 0xcc, 0x60, 0x30, 0x60, 0xcc, 0xfc, 0x00,
			0x00, 0x00, 0x7e, 0xd8, 0xd8, 0xd8, 0x70, 0x00,
			0x00, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x60, 0xc0,
			0x00, 0x76, 0xdc, 0x18, 0x18, 0x18, 0x18, 0x00,
			0xfc, 0x30, 0x78, 0xcc, 0xcc, 0x78, 0x30, 0xfc,
			0x38, 0x6c, 0xc6, 0xfe, 0xc6, 0x6c, 0x38, 0x00,
			0x38, 0x6c, 0xc6, 0xc6, 0x6c, 0x6c, 0xee, 0x00,
			0x1c, 0x30, 0x18, 0x7c, 0xcc, 0xcc, 0x78, 0x00,
			0x00, 0x00, 0x7e, 0xdb, 0xdb, 0x7e, 0x00, 0x00,
			0x06, 0x0c, 0x7e, 0xdb, 0xdb, 0x7e, 0x60, 0xc0,
			0x38, 0x60, 0xc0, 0xf8, 0xc0, 0x60, 0x38, 0x00,
			0x78, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x00,
			0x00, 0xfc, 0x00, 0xfc, 0x00, 0xfc, 0x00, 0x00,
			0x30, 0x30, 0xfc, 0x30, 0x30, 0x00, 0xfc, 0x00,
			0x60, 0x30, 0x18, 0x30, 0x60, 0x00, 0xfc, 0x00,
			0x18, 0x30, 0x60, 0x30, 0x18, 0x00, 0xfc, 0x00,
			0x0e, 0x1b, 0x1b, 0x18, 0x18, 0x18, 0x18, 0x18,
			0x18, 0x18, 0x18, 0x18, 0x18, 0xd8, 0xd8, 0x70,
			0x30, 0x30, 0x00, 0xfc, 0x00, 0x30, 0x30, 0x00,
			0x00, 0x76, 0xdc, 0x00, 0x76, 0xdc, 0x00, 0x00,
			0x38, 0x6c, 0x6c, 0x38, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00,
			0x0f, 0x0c, 0x0c, 0x0c, 0xec, 0x6c, 0x3c, 0x1c,
			0x78, 0x6c, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00,
			0x70, 0x18, 0x30, 0x60, 0x78, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x3c, 0x3c, 0x3c, 0x3c, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
			};
		#endregion

		#region Palette
		private Color[] aColorPalette = new Color[16] {
			Color.FromArgb(0x00, 0x00, 0x00),	// 0
			Color.FromArgb(0x00, 0x00, 0xaa),	// 1
			Color.FromArgb(0x00, 0xaa, 0x00),	// 2
			Color.FromArgb(0x00, 0xaa, 0xaa),	// 3
			Color.FromArgb(0xaa, 0x00, 0x00),	// 4
			Color.FromArgb(0xaa, 0x00, 0xaa),	// 5
			Color.FromArgb(0xaa, 0x55, 0x00),	// 6
			Color.FromArgb(0xaa, 0xaa, 0xaa),	// 7
			Color.FromArgb(0x55, 0x55, 0x55),	// 8
			Color.FromArgb(0x55, 0x55, 0xff),	// 9
			Color.FromArgb(0x55, 0xff, 0x55),	// 10
			Color.FromArgb(0x55, 0xff, 0xff),	// 11
			Color.FromArgb(0xff, 0x55, 0x55),	// 12
			Color.FromArgb(0xff, 0x55, 0xff),	// 13
			Color.FromArgb(0xff, 0xff, 0x55),	// 14
			Color.FromArgb(0xff, 0xff, 0xff)	// 15
		};

		private Color[] aMonoPalette = new Color[16] {
			Color.FromArgb(0x00, 0x00, 0x00),	// 0
			Color.FromArgb(0x10, 0x10, 0x10),	// 1
			Color.FromArgb(0x20, 0x20, 0x20),	// 2
			Color.FromArgb(0x30, 0x30, 0x30),	// 3
			Color.FromArgb(0x40, 0x40, 0x40),	// 4
			Color.FromArgb(0x50, 0x50, 0x50),	// 5
			Color.FromArgb(0x60, 0x60, 0x60),	// 6
			Color.FromArgb(0x70, 0x70, 0x70),	// 7
			Color.FromArgb(0x80, 0x80, 0x80),	// 8
			Color.FromArgb(0x90, 0x90, 0x90),	// 9
			Color.FromArgb(0xa0, 0xa0, 0xa0),	// 10
			Color.FromArgb(0xb0, 0xb0, 0xb0),	// 11
			Color.FromArgb(0xc0, 0xc0, 0xc0),	// 12
			Color.FromArgb(0xd0, 0xd0, 0xd0),	// 13
			Color.FromArgb(0xe0, 0xe0, 0xe0),	// 14
			Color.FromArgb(0xff, 0xff, 0xff)	// 15
		};

		private Color[] aColorPalette256 = new Color[] {
			Color.FromArgb(0x00, 0x00, 0x00),
			Color.FromArgb(0x00, 0x00, 0xaa),
			Color.FromArgb(0x00, 0xaa, 0x00),
			Color.FromArgb(0x00, 0xaa, 0xaa),
			Color.FromArgb(0xaa, 0x00, 0x00),
			Color.FromArgb(0xaa, 0x00, 0xaa),
			Color.FromArgb(0xaa, 0x55, 0x00),
			Color.FromArgb(0xaa, 0xaa, 0xaa),
			Color.FromArgb(0x55, 0x55, 0x55),
			Color.FromArgb(0x55, 0x55, 0xff),
			Color.FromArgb(0x55, 0xff, 0x55),
			Color.FromArgb(0x55, 0xff, 0xff),
			Color.FromArgb(0xff, 0x55, 0x55),
			Color.FromArgb(0xff, 0x55, 0xff),
			Color.FromArgb(0xff, 0xff, 0x55),
			Color.FromArgb(0xff, 0xff, 0xff),
			Color.FromArgb(0x00, 0x00, 0x00),
			Color.FromArgb(0x14, 0x14, 0x14),
			Color.FromArgb(0x20, 0x20, 0x20),
			Color.FromArgb(0x2c, 0x2c, 0x2c),
			Color.FromArgb(0x38, 0x38, 0x38),
			Color.FromArgb(0x45, 0x45, 0x45),
			Color.FromArgb(0x51, 0x51, 0x51),
			Color.FromArgb(0x61, 0x61, 0x61),
			Color.FromArgb(0x71, 0x71, 0x71),
			Color.FromArgb(0x82, 0x82, 0x82),
			Color.FromArgb(0x92, 0x92, 0x92),
			Color.FromArgb(0xa2, 0xa2, 0xa2),
			Color.FromArgb(0xb6, 0xb6, 0xb6),
			Color.FromArgb(0xcb, 0xcb, 0xcb),
			Color.FromArgb(0xe3, 0xe3, 0xe3),
			Color.FromArgb(0xff, 0xff, 0xff),
			Color.FromArgb(0x00, 0x00, 0xff),
			Color.FromArgb(0x41, 0x00, 0xff),
			Color.FromArgb(0x7d, 0x00, 0xff),
			Color.FromArgb(0xbe, 0x00, 0xff),
			Color.FromArgb(0xff, 0x00, 0xff),
			Color.FromArgb(0xff, 0x00, 0xbe),
			Color.FromArgb(0xff, 0x00, 0x7d),
			Color.FromArgb(0xff, 0x00, 0x41),
			Color.FromArgb(0xff, 0x00, 0x00),
			Color.FromArgb(0xff, 0x41, 0x00),
			Color.FromArgb(0xff, 0x7d, 0x00),
			Color.FromArgb(0xff, 0xbe, 0x00),
			Color.FromArgb(0xff, 0xff, 0x00),
			Color.FromArgb(0xbe, 0xff, 0x00),
			Color.FromArgb(0x7d, 0xff, 0x00),
			Color.FromArgb(0x41, 0xff, 0x00),
			Color.FromArgb(0x00, 0xff, 0x00),
			Color.FromArgb(0x00, 0xff, 0x41),
			Color.FromArgb(0x00, 0xff, 0x7d),
			Color.FromArgb(0x00, 0xff, 0xbe),
			Color.FromArgb(0x00, 0xff, 0xff),
			Color.FromArgb(0x00, 0xbe, 0xff),
			Color.FromArgb(0x00, 0x7d, 0xff),
			Color.FromArgb(0x00, 0x41, 0xff),
			Color.FromArgb(0x7d, 0x7d, 0xff),
			Color.FromArgb(0x9e, 0x7d, 0xff),
			Color.FromArgb(0xbe, 0x7d, 0xff),
			Color.FromArgb(0xdf, 0x7d, 0xff),
			Color.FromArgb(0xff, 0x7d, 0xff),
			Color.FromArgb(0xff, 0x7d, 0xdf),
			Color.FromArgb(0xff, 0x7d, 0xbe),
			Color.FromArgb(0xff, 0x7d, 0x9e),
			Color.FromArgb(0xff, 0x7d, 0x7d),
			Color.FromArgb(0xff, 0x9e, 0x7d),
			Color.FromArgb(0xff, 0xbe, 0x7d),
			Color.FromArgb(0xff, 0xdf, 0x7d),
			Color.FromArgb(0xff, 0xff, 0x7d),
			Color.FromArgb(0xdf, 0xff, 0x7d),
			Color.FromArgb(0xbe, 0xff, 0x7d),
			Color.FromArgb(0x9e, 0xff, 0x7d),
			Color.FromArgb(0x7d, 0xff, 0x7d),
			Color.FromArgb(0x7d, 0xff, 0x9e),
			Color.FromArgb(0x7d, 0xff, 0xbe),
			Color.FromArgb(0x7d, 0xff, 0xdf),
			Color.FromArgb(0x7d, 0xff, 0xff),
			Color.FromArgb(0x7d, 0xdf, 0xff),
			Color.FromArgb(0x7d, 0xbe, 0xff),
			Color.FromArgb(0x7d, 0x9e, 0xff),
			Color.FromArgb(0xb6, 0xb6, 0xff),
			Color.FromArgb(0xc7, 0xb6, 0xff),
			Color.FromArgb(0xdb, 0xb6, 0xff),
			Color.FromArgb(0xeb, 0xb6, 0xff),
			Color.FromArgb(0xff, 0xb6, 0xff),
			Color.FromArgb(0xff, 0xb6, 0xeb),
			Color.FromArgb(0xff, 0xb6, 0xdb),
			Color.FromArgb(0xff, 0xb6, 0xc7),
			Color.FromArgb(0xff, 0xb6, 0xb6),
			Color.FromArgb(0xff, 0xc7, 0xb6),
			Color.FromArgb(0xff, 0xdb, 0xb6),
			Color.FromArgb(0xff, 0xeb, 0xb6),
			Color.FromArgb(0xff, 0xff, 0xb6),
			Color.FromArgb(0xeb, 0xff, 0xb6),
			Color.FromArgb(0xdb, 0xff, 0xb6),
			Color.FromArgb(0xc7, 0xff, 0xb6),
			Color.FromArgb(0xb6, 0xff, 0xb6),
			Color.FromArgb(0xb6, 0xff, 0xc7),
			Color.FromArgb(0xb6, 0xff, 0xdb),
			Color.FromArgb(0xb6, 0xff, 0xeb),
			Color.FromArgb(0xb6, 0xff, 0xff),
			Color.FromArgb(0xb6, 0xeb, 0xff),
			Color.FromArgb(0xb6, 0xdb, 0xff),
			Color.FromArgb(0xb6, 0xc7, 0xff),
			Color.FromArgb(0x00, 0x00, 0x71),
			Color.FromArgb(0x1c, 0x00, 0x71),
			Color.FromArgb(0x38, 0x00, 0x71),
			Color.FromArgb(0x55, 0x00, 0x71),
			Color.FromArgb(0x71, 0x00, 0x71),
			Color.FromArgb(0x71, 0x00, 0x55),
			Color.FromArgb(0x71, 0x00, 0x38),
			Color.FromArgb(0x71, 0x00, 0x1c),
			Color.FromArgb(0x71, 0x00, 0x00),
			Color.FromArgb(0x71, 0x1c, 0x00),
			Color.FromArgb(0x71, 0x38, 0x00),
			Color.FromArgb(0x71, 0x55, 0x00),
			Color.FromArgb(0x71, 0x71, 0x00),
			Color.FromArgb(0x55, 0x71, 0x00),
			Color.FromArgb(0x38, 0x71, 0x00),
			Color.FromArgb(0x1c, 0x71, 0x00),
			Color.FromArgb(0x00, 0x71, 0x00),
			Color.FromArgb(0x00, 0x71, 0x1c),
			Color.FromArgb(0x00, 0x71, 0x38),
			Color.FromArgb(0x00, 0x71, 0x55),
			Color.FromArgb(0x00, 0x71, 0x71),
			Color.FromArgb(0x00, 0x55, 0x71),
			Color.FromArgb(0x00, 0x38, 0x71),
			Color.FromArgb(0x00, 0x1c, 0x71),
			Color.FromArgb(0x38, 0x38, 0x71),
			Color.FromArgb(0x45, 0x38, 0x71),
			Color.FromArgb(0x55, 0x38, 0x71),
			Color.FromArgb(0x61, 0x38, 0x71),
			Color.FromArgb(0x71, 0x38, 0x71),
			Color.FromArgb(0x71, 0x38, 0x61),
			Color.FromArgb(0x71, 0x38, 0x55),
			Color.FromArgb(0x71, 0x38, 0x45),
			Color.FromArgb(0x71, 0x38, 0x38),
			Color.FromArgb(0x71, 0x45, 0x38),
			Color.FromArgb(0x71, 0x55, 0x38),
			Color.FromArgb(0x71, 0x61, 0x38),
			Color.FromArgb(0x71, 0x71, 0x38),
			Color.FromArgb(0x61, 0x71, 0x38),
			Color.FromArgb(0x55, 0x71, 0x38),
			Color.FromArgb(0x45, 0x71, 0x38),
			Color.FromArgb(0x38, 0x71, 0x38),
			Color.FromArgb(0x38, 0x71, 0x45),
			Color.FromArgb(0x38, 0x71, 0x55),
			Color.FromArgb(0x38, 0x71, 0x61),
			Color.FromArgb(0x38, 0x71, 0x71),
			Color.FromArgb(0x38, 0x61, 0x71),
			Color.FromArgb(0x38, 0x55, 0x71),
			Color.FromArgb(0x38, 0x45, 0x71),
			Color.FromArgb(0x51, 0x51, 0x71),
			Color.FromArgb(0x59, 0x51, 0x71),
			Color.FromArgb(0x61, 0x51, 0x71),
			Color.FromArgb(0x69, 0x51, 0x71),
			Color.FromArgb(0x71, 0x51, 0x71),
			Color.FromArgb(0x71, 0x51, 0x69),
			Color.FromArgb(0x71, 0x51, 0x61),
			Color.FromArgb(0x71, 0x51, 0x59),
			Color.FromArgb(0x71, 0x51, 0x51),
			Color.FromArgb(0x71, 0x59, 0x51),
			Color.FromArgb(0x71, 0x61, 0x51),
			Color.FromArgb(0x71, 0x69, 0x51),
			Color.FromArgb(0x71, 0x71, 0x51),
			Color.FromArgb(0x69, 0x71, 0x51),
			Color.FromArgb(0x61, 0x71, 0x51),
			Color.FromArgb(0x59, 0x71, 0x51),
			Color.FromArgb(0x51, 0x71, 0x51),
			Color.FromArgb(0x51, 0x71, 0x59),
			Color.FromArgb(0x51, 0x71, 0x61),
			Color.FromArgb(0x51, 0x71, 0x69),
			Color.FromArgb(0x51, 0x71, 0x71),
			Color.FromArgb(0x51, 0x69, 0x71),
			Color.FromArgb(0x51, 0x61, 0x71),
			Color.FromArgb(0x51, 0x59, 0x71),
			Color.FromArgb(0x00, 0x00, 0x41),
			Color.FromArgb(0x10, 0x00, 0x41),
			Color.FromArgb(0x20, 0x00, 0x41),
			Color.FromArgb(0x30, 0x00, 0x41),
			Color.FromArgb(0x41, 0x00, 0x41),
			Color.FromArgb(0x41, 0x00, 0x30),
			Color.FromArgb(0x41, 0x00, 0x20),
			Color.FromArgb(0x41, 0x00, 0x10),
			Color.FromArgb(0x41, 0x00, 0x00),
			Color.FromArgb(0x41, 0x10, 0x00),
			Color.FromArgb(0x41, 0x20, 0x00),
			Color.FromArgb(0x41, 0x30, 0x00),
			Color.FromArgb(0x41, 0x41, 0x00),
			Color.FromArgb(0x30, 0x41, 0x00),
			Color.FromArgb(0x20, 0x41, 0x00),
			Color.FromArgb(0x10, 0x41, 0x00),
			Color.FromArgb(0x00, 0x41, 0x00),
			Color.FromArgb(0x00, 0x41, 0x10),
			Color.FromArgb(0x00, 0x41, 0x20),
			Color.FromArgb(0x00, 0x41, 0x30),
			Color.FromArgb(0x00, 0x41, 0x41),
			Color.FromArgb(0x00, 0x30, 0x41),
			Color.FromArgb(0x00, 0x20, 0x41),
			Color.FromArgb(0x00, 0x10, 0x41),
			Color.FromArgb(0x20, 0x20, 0x41),
			Color.FromArgb(0x28, 0x20, 0x41),
			Color.FromArgb(0x30, 0x20, 0x41),
			Color.FromArgb(0x38, 0x20, 0x41),
			Color.FromArgb(0x41, 0x20, 0x41),
			Color.FromArgb(0x41, 0x20, 0x38),
			Color.FromArgb(0x41, 0x20, 0x30),
			Color.FromArgb(0x41, 0x20, 0x28),
			Color.FromArgb(0x41, 0x20, 0x20),
			Color.FromArgb(0x41, 0x28, 0x20),
			Color.FromArgb(0x41, 0x30, 0x20),
			Color.FromArgb(0x41, 0x38, 0x20),
			Color.FromArgb(0x41, 0x41, 0x20),
			Color.FromArgb(0x38, 0x41, 0x20),
			Color.FromArgb(0x30, 0x41, 0x20),
			Color.FromArgb(0x28, 0x41, 0x20),
			Color.FromArgb(0x20, 0x41, 0x20),
			Color.FromArgb(0x20, 0x41, 0x28),
			Color.FromArgb(0x20, 0x41, 0x30),
			Color.FromArgb(0x20, 0x41, 0x38),
			Color.FromArgb(0x20, 0x41, 0x41),
			Color.FromArgb(0x20, 0x38, 0x41),
			Color.FromArgb(0x20, 0x30, 0x41),
			Color.FromArgb(0x20, 0x28, 0x41),
			Color.FromArgb(0x2c, 0x2c, 0x41),
			Color.FromArgb(0x30, 0x2c, 0x41),
			Color.FromArgb(0x34, 0x2c, 0x41),
			Color.FromArgb(0x3c, 0x2c, 0x41),
			Color.FromArgb(0x41, 0x2c, 0x41),
			Color.FromArgb(0x41, 0x2c, 0x3c),
			Color.FromArgb(0x41, 0x2c, 0x34),
			Color.FromArgb(0x41, 0x2c, 0x30),
			Color.FromArgb(0x41, 0x2c, 0x2c),
			Color.FromArgb(0x41, 0x30, 0x2c),
			Color.FromArgb(0x41, 0x34, 0x2c),
			Color.FromArgb(0x41, 0x3c, 0x2c),
			Color.FromArgb(0x41, 0x41, 0x2c),
			Color.FromArgb(0x3c, 0x41, 0x2c),
			Color.FromArgb(0x34, 0x41, 0x2c),
			Color.FromArgb(0x30, 0x41, 0x2c),
			Color.FromArgb(0x2c, 0x41, 0x2c),
			Color.FromArgb(0x2c, 0x41, 0x30),
			Color.FromArgb(0x2c, 0x41, 0x34),
			Color.FromArgb(0x2c, 0x41, 0x3c),
			Color.FromArgb(0x2c, 0x41, 0x41),
			Color.FromArgb(0x2c, 0x3c, 0x41),
			Color.FromArgb(0x2c, 0x34, 0x41),
			Color.FromArgb(0x2c, 0x30, 0x41),
			Color.FromArgb(0x00, 0x00, 0x00),
			Color.FromArgb(0x00, 0x00, 0x00),
			Color.FromArgb(0x00, 0x00, 0x00),
			Color.FromArgb(0x00, 0x00, 0x00),
			Color.FromArgb(0x00, 0x00, 0x00),
			Color.FromArgb(0x00, 0x00, 0x00),
			Color.FromArgb(0x00, 0x00, 0x00),
			Color.FromArgb(0x00, 0x00, 0x00)
		};

		private Color[] aCustomColorPalette256 = new Color[256];
		#endregion

		private object oLock = new object();
		private Bitmap oBitmap;
		private ModeEnum eMode = ModeEnum.Text80x25Color;
		private byte[] abMemory = new byte[0x10000]; // FA0 = 80x25*2 (text mode), 0xfa00 = 320*200 (256 color)
		private VGACardForm oForm;

		// printing
		int iXPosition = 0;
		int iYPosition = 0;
		int iTextWidth = 80;
		int iTextHeight = 25;
		int iFontWidth = 8;
		int iFontHeight = 8;
		int iTextForeColor = 15;
		int iTextBackColor = 0;

		public VGACard()
		{
			this.oForm = new VGACardForm(this);

			// assume default 80x25 text mode
			this.oBitmap = new Bitmap(640, 200, PixelFormat.Format32bppArgb);
			this.oForm.ClientSize = new Size(640, 200);
			this.oForm.Show();

			ClearInternal();

			Application.DoEvents();
		}

		public byte Mode
		{
			get
			{
				return (byte)this.eMode;
			}
			set
			{
				lock (this.oLock)
				{
					switch (value)
					{
						case 3:
							this.eMode = ModeEnum.Text80x25Color;
							this.oBitmap = new Bitmap(640, 200, PixelFormat.Format32bppArgb);
							this.oForm.ClientSize = new Size(640, 200);
							this.iXPosition = 0;
							this.iYPosition = 0;
							this.iTextWidth = 80;
							this.iTextHeight = 25;
							this.iTextForeColor = 15;
							this.iTextBackColor = 0;
							break;

						case 0xd:
							this.eMode = ModeEnum.Graphics320x200x16;
							this.oBitmap = new Bitmap(320, 200, PixelFormat.Format32bppArgb);
							this.oForm.ClientSize = new Size(640, 400);
							this.iXPosition = 0;
							this.iYPosition = 0;
							this.iTextWidth = 40;
							this.iTextHeight = 25;
							this.iTextForeColor = 15;
							this.iTextBackColor = 0;
							break;

						case 0x13:
							ResetCustomPalette();
							this.eMode = ModeEnum.Graphics320x200x256;
							this.oBitmap = new Bitmap(320, 200, PixelFormat.Format32bppArgb);
							this.oForm.ClientSize = new Size(640, 400);
							this.iXPosition = 0;
							this.iYPosition = 0;
							this.iTextWidth = 40;
							this.iTextHeight = 25;
							this.iTextForeColor = 15;
							this.iTextBackColor = 0;
							break;

						default:
							throw new Exception("Unknown graphic mode");
					}
				}
				Clear();
			}
		}

		public int Width
		{
			get
			{
				return this.oBitmap.Width;
			}
		}

		public int Height
		{
			get
			{
				return this.oBitmap.Height;
			}
		}

		public VGACardForm Form
		{
			get { return this.oForm; }
		}

		public Bitmap Screen
		{
			get
			{
				return this.oBitmap;
			}
		}

		public void Clear()
		{
			ClearInternal();

			RefreshScreen();
		}

		private void ClearInternal()
		{
			lock (this.oLock)
			{
				Graphics g = Graphics.FromImage(this.oBitmap);
				g.Clear(Color.Black);
				g.Flush();
				g.Dispose();
				for (int i = 0; i < this.abMemory.Length; i++)
				{
					this.abMemory[i] = 0;
				}
			}
		}

		public byte ReadByte(uint address)
		{
			if (address < 0 || address >= this.abMemory.Length)
			{
				throw new Exception("Video address outside bounds");
			}

			return this.abMemory[address];
		}

		public ushort ReadWord(uint address)
		{
			if (address < 0 || address + 2 >= this.abMemory.Length)
			{
				throw new Exception("Video address outside bounds");
			}

			return (ushort)((ushort)this.abMemory[address] | (ushort)((ushort)this.abMemory[address + 1] << 8));
		}

		public uint ReadDWord(uint address)
		{
			if (address < 0 || address + 4 >= this.abMemory.Length)
			{
				throw new Exception("Video address outside bounds");
			}

			return (uint)((uint)this.abMemory[address] |
				(uint)((uint)this.abMemory[address + 1] << 8) |
				(uint)((uint)this.abMemory[address + 2] << 16) |
				(uint)((uint)this.abMemory[address + 3] << 24));
		}

		public void WriteByte(uint address, byte value)
		{
			if (address < 0 || address >= this.abMemory.Length)
			{
				throw new Exception("Video address outside bounds");
			}

			lock (this.oLock)
			{
				this.abMemory[address] = value;
				RenderAddress(address, 1);
			}
			RefreshScreen();
		}

		public void WriteWord(uint address, ushort value)
		{
			if (address < 0 || address + 2 >= this.abMemory.Length)
			{
				throw new Exception("Video address outside bounds");
			}

			lock (this.oLock)
			{
				this.abMemory[address] = (byte)(value & 0xff);
				this.abMemory[address + 1] = (byte)((value & 0xff00) >> 8);
				RenderAddress(address, 2);
			}
			RefreshScreen();
		}

		public void WriteDWord(uint address, uint value)
		{
			if (address < 0 || address + 4 >= this.abMemory.Length)
			{
				throw new Exception("Video address outside bounds");
			}

			lock (this.oLock)
			{
				this.abMemory[address] = (byte)(value & 0xff);
				this.abMemory[address + 1] = (byte)((value & 0xff00) >> 8);
				this.abMemory[address + 2] = (byte)((value & 0xff0000) >> 16);
				this.abMemory[address + 3] = (byte)((value & 0xff000000) >> 24);
				RenderAddress(address, 4);
			}
			RefreshScreen();
		}

		public int XPosition
		{
			get
			{
				return this.iXPosition;
			}
			set
			{
				this.iXPosition = Math.Abs(value);
				this.iXPosition %= this.iTextWidth;
			}
		}

		public int YPosition
		{
			get
			{
				return this.iYPosition;
			}
			set
			{
				this.iYPosition = Math.Abs(value);
				this.iYPosition %= this.iTextHeight;
			}
		}

		public int TextForeColor
		{
			get
			{
				return this.iTextForeColor;
			}
			set
			{
				this.iTextForeColor = value;
				switch (this.eMode)
				{
					case ModeEnum.Text80x25Color:
					case ModeEnum.Graphics320x200x16:
						this.iTextForeColor &= 0xf;
						break;
					case ModeEnum.Graphics320x200x256:
						this.iTextForeColor &= 0xff;
						break;
				}
			}
		}

		public int TextBackColor
		{
			get
			{
				return this.iTextBackColor;
			}
			set
			{
				this.iTextBackColor = value;
				switch (this.eMode)
				{
					case ModeEnum.Text80x25Color:
					case ModeEnum.Graphics320x200x16:
						this.iTextBackColor &= 0xf;
						break;
					case ModeEnum.Graphics320x200x256:
						this.iTextBackColor &= 0xff;
						break;
				}
			}
		}

		private Color ForeColor
		{
			get
			{
				switch (this.eMode)
				{
					case ModeEnum.Text80x25Color:
					case ModeEnum.Graphics320x200x16:
						return this.aColorPalette[this.iTextForeColor];
					case ModeEnum.Graphics320x200x256:
						return this.aColorPalette256[this.iTextForeColor & 0xff];
				}
				return this.aColorPalette[this.iTextForeColor];
			}
		}

		private Color BackColor
		{
			get
			{
				switch (this.eMode)
				{
					case ModeEnum.Text80x25Color:
					case ModeEnum.Graphics320x200x16:
						return this.aColorPalette[this.iTextBackColor];
					case ModeEnum.Graphics320x200x256:
						return this.aColorPalette256[this.iTextBackColor & 0xff];
				}
				return this.aColorPalette[this.iTextBackColor];
			}
		}

		private byte ToForeColor(byte attribute)
		{
			return (byte)(attribute & 0xf);
		}

		private byte ToBackColor(byte attribute)
		{
			return (byte)((attribute & 0xf0) >> 4);
		}

		private byte ToAttribute(int foreColor, int backColor)
		{
			return (byte)((foreColor & 0xf) | ((backColor & 0xf) << 4));
		}

		private void ResetCustomPalette()
		{
			for (int i = 0; i < this.aColorPalette256.Length; i++)
			{
				this.aCustomColorPalette256[i] = this.aColorPalette256[i];
			}
		}

		private Color ToColor(int color)
		{
			switch (this.eMode)
			{
				case ModeEnum.Text80x25Color:
				case ModeEnum.Graphics320x200x16:
					return this.aColorPalette[color & 0xf];

				case ModeEnum.Graphics320x200x256:
					return this.aCustomColorPalette256[color & 0xff];
			}

			return Color.Black;
		}

		public void PrintStdOut(string text)
		{
			lock (this.oLock)
			{
				for (int i = 0; i < text.Length; i++)
				{
					PrintStdOutInternal(text[i]);
				}
			}
			RefreshScreen();
		}

		public void PrintStdOut(string text, byte attribute)
		{
			lock (this.oLock)
			{
				for (int i = 0; i < text.Length; i++)
				{
					PrintStdOutInternal(text[i], attribute);
				}
			}
			RefreshScreen();
		}

		public void PrintStdOut(char ch)
		{
			lock (this.oLock)
			{
				PrintStdOutInternal(ch);
			}
			RefreshScreen();
		}

		public void PrintStdOut(char ch, byte attribute)
		{
			lock (this.oLock)
			{
				PrintStdOutInternal(ch, attribute);
			}
			RefreshScreen();
		}

		private void PrintStdOutInternal(char ch)
		{
			switch (ch)
			{
				case '\0':
					// ignore zero character
					break;
				case '\a':  // 0x7 - bell
					System.Media.SystemSounds.Beep.Play();
					break;
				case '\b':  // 0x8 - backspace
					this.iXPosition--;
					if (this.iXPosition < 0)
					{
						this.iXPosition = this.iTextWidth - 1;
						this.iYPosition--;
						if (this.iYPosition < 0)
						{
							this.iYPosition = 0;
							ScrollWindowInternal(0, 0, this.iTextWidth, this.iTextHeight, 1);
						}
					}
					break;
				case '\t':  // 0x9 - tab
					PrintStdOutInternal(' ');
					break;
				case '\r':  // 0xd - carriage return
					this.iXPosition = 0;
					break;
				case '\n':  // 0xa - new line
					this.iYPosition++;
					if (this.iYPosition >= this.iTextHeight)
					{
						this.iYPosition--;
						ScrollWindowInternal(0, 0, this.iTextWidth, this.iTextHeight, -1);
					}
					break;
				default:
					PrintChar(ch);
					// next cursor position
					this.iXPosition++;
					if (this.iXPosition >= this.iTextWidth)
					{
						this.iXPosition = 0;
						this.iYPosition++;
						if (this.iYPosition >= this.iTextHeight)
						{
							this.iYPosition--;
							ScrollWindowInternal(0, 0, this.iTextWidth, this.iTextHeight, -1);
						}
					}
					break;
			}
		}

		private void PrintStdOutInternal(char ch, byte attribute)
		{
			switch (ch)
			{
				case '\0':
					// ignore zero character
					break;
				case '\a':  // 0x7 - bell
					System.Media.SystemSounds.Beep.Play();
					break;
				case '\b':  // 0x8 - backspace
					this.iXPosition--;
					if (this.iXPosition < 0)
					{
						this.iXPosition = this.iTextWidth - 1;
						this.iYPosition--;
						if (this.iYPosition < 0)
						{
							this.iYPosition = 0;
							ScrollWindowInternal(0, 0, this.iTextWidth, this.iTextHeight, 1);
						}
					}
					break;
				case '\t':  // 0x9 - tab
					PrintStdOut("   ", attribute);
					break;
				case '\r':  // 0xd - carriage return
					this.iXPosition = 0;
					break;
				case '\n':  // 0xa - new line
					this.iYPosition++;
					if (this.iYPosition >= this.iTextHeight)
					{
						this.iYPosition--;
						ScrollWindowInternal(0, 0, this.iTextWidth, this.iTextHeight, -1);
					}
					break;
				default:
					PrintChar(ch, attribute);
					// next cursor position
					this.iXPosition++;
					if (this.iXPosition >= this.iTextWidth)
					{
						this.iXPosition = 0;
						this.iYPosition++;
						if (this.iYPosition >= this.iTextHeight)
						{
							this.iYPosition--;
							ScrollWindowInternal(0, 0, this.iTextWidth, this.iTextHeight, -1);
						}
					}
					break;
			}
		}

		private void RenderAddress(uint address, int size)
		{
			switch (this.eMode)
			{
				case ModeEnum.Text80x25Color:
					if (address <= (this.iTextWidth * this.iTextHeight * 2))
					{
						for (uint i = address & 0xfffe; i < address + size; i += 2)
						{
							int iY = (int)(i / (this.iTextWidth * 2));
							int iX = (int)((i - (iY * (this.iTextWidth * 2))) / 2);
							int ch = this.abMemory[i];
							int attr = this.abMemory[i + 1];
							/*if (ch != 0 && ch != 0x20)
							{
								ch = ch;
							}*/
							if (iX < this.iTextWidth && iY < this.iTextHeight)
							{
								RenderCharacter(iX, iY, ch, attr & 0xf, (attr & 0xf0) >> 4);
							}
						}
					}
					break;

				case ModeEnum.Graphics320x200x16:
					for (uint i = address; i < address + size; i++)
					{
						uint uiWidth = (uint)(this.oBitmap.Width >> 1);
						int iYPos = (int)((i & 0xffff) / uiWidth);
						int iXPos = (int)((i & 0xffff) - (iYPos * uiWidth));

						if (iXPos < uiWidth && iYPos < this.oBitmap.Height)
						{
							uiWidth <<= 1;
							this.oBitmap.SetPixel((int)uiWidth, iYPos, this.ToColor(this.abMemory[i] & 0xf));
							this.oBitmap.SetPixel((int)uiWidth + 1, iYPos, this.ToColor((this.abMemory[i] & 0xf0) >> 4));
						}
					}
					break;

				case ModeEnum.Graphics320x200x256:
					for (uint i = address; i < address + size; i++)
					{
						int iYPos = (int)((i & 0xffff) / this.oBitmap.Width);
						int iXPos = (int)((i & 0xffff) - (iYPos * this.oBitmap.Width));

						if (iXPos < this.oBitmap.Width && iYPos < this.oBitmap.Height)
						{
							this.oBitmap.SetPixel(iXPos, iYPos, this.ToColor(this.abMemory[i]));
						}
					}
					break;
			}
		}

		private void RefreshScreen()
		{
			lock (this.oLock)
			{
				if (this.oForm.InvokeRequired)
				{
					this.oForm.Invoke(new VGACardForm.RefreshScreenDelegate(this.oForm.RefreshScreen));
				}
				else
				{
					this.oForm.RefreshScreen();
				}
			}
			Application.DoEvents();
		}

		public void ScrollWindow(int x, int y, int width, int height, int dir)
		{
			lock (this.oLock)
			{
				ScrollWindowInternal(x, y, width, height, dir);
			}
			RefreshScreen();
		}

		private void ScrollWindowInternal(int x, int y, int width, int height, int dir)
		{
			if (x >= 0 && x < this.iTextWidth && y >= 0 && y < this.iTextHeight)
			{
				if (x + width > this.iTextWidth) width = this.iTextWidth - x;
				if (y + height > this.iTextHeight) height = this.iTextHeight - y;

				if (width > 0 && height > 1)
				{
					// scroll memory data
					int iBlockSrc;
					int iBlockDst;
					int iBlockWidth;
					int iLineWidth;
					int iLineSize;
					byte attr;

					switch (this.eMode)
					{
						case ModeEnum.Text80x25Color:
							attr = this.ToAttribute(this.iTextForeColor, this.iTextBackColor);
							iBlockWidth = width * 2;
							iLineSize = this.iTextWidth * 2;
							if (dir > 0)
							{
								iBlockSrc = (y + height - 2) * (this.iTextWidth * 2) + x * 2;
								iBlockDst = (y + height - 1) * (this.iTextWidth * 2) + x * 2;
							}
							else
							{
								iBlockSrc = (y + 1) * (this.iTextWidth * 2) + x * 2;
								iBlockDst = y * (this.iTextWidth * 2) + x * 2;
							}

							for (int i = 0; i < height - 1; i++)
							{
								for (int j = 0; j < iBlockWidth; j++)
								{
									this.abMemory[iBlockDst + j] = this.abMemory[iBlockSrc + j];
								}
								iBlockSrc += (dir > 0) ? -iLineSize : iLineSize;
								iBlockDst += (dir > 0) ? -iLineSize : iLineSize;
							}

							// clear empty line
							if (dir > 0)
							{
								iBlockDst = y * (this.iTextWidth * 2) + x * 2;
							}
							else
							{
								iBlockDst = (y + height - 1) * (this.iTextWidth * 2) + x * 2;
							}

							for (int j = 0; j < iBlockWidth; j += 2)
							{
								this.abMemory[iBlockDst + j] = attr;
								this.abMemory[iBlockDst + j + 1] = 0x0;
							}
							break;

						case ModeEnum.Graphics320x200x256:
							iBlockWidth = this.iFontWidth * width;
							iLineWidth = this.iFontWidth * this.iTextWidth;
							iLineSize = iLineWidth * this.iFontHeight;

							if (dir > 0)
							{
								iBlockSrc = ((y + height - 2) * iLineSize) + (x * this.iFontWidth);
								iBlockDst = ((y + height - 1) * iLineSize) + (x * this.iFontWidth);
							}
							else
							{
								iBlockSrc = ((y + 1) * iLineSize) + (x * this.iFontWidth);
								iBlockDst = (y * iLineSize) + (x * this.iFontWidth);
							}

							for (int i = 0; i < (height - 1) * this.iFontHeight; i++)
							{
								for (int j = 0; j < iBlockWidth; j++)
								{
									this.abMemory[iBlockDst + j] = this.abMemory[iBlockSrc + j];
								}
								iBlockSrc += (dir > 0) ? -iLineWidth : iLineWidth;
								iBlockDst += (dir > 0) ? -iLineWidth : iLineWidth;
							}

							// clear empty line
							if (dir > 0)
							{
								iBlockDst = (y * iLineSize) + (x * this.iFontWidth);
							}
							else
							{
								iBlockDst = ((y + height - 1) * iLineSize) + (x * this.iFontWidth);
							}

							byte bTemp = (byte)this.iTextBackColor;
							for (int i = 0; i < this.iFontHeight; i++)
							{
								for (int j = 0; j < iBlockWidth; j++)
								{
									this.abMemory[iBlockDst + j] = bTemp;
								}
								iBlockDst += (dir > 0) ? -iLineWidth : iLineWidth;
							}
							break;
					}

					// scroll bitmap
					Rectangle rSrc;
					Rectangle rDst;
					Graphics g = Graphics.FromImage(this.oBitmap);
					if (dir > 0)
					{
						rSrc = new Rectangle(x * this.iFontWidth, y * this.iFontHeight,
							width * this.iFontWidth, (height - 1) * this.iFontHeight);
						rDst = new Rectangle(x * this.iFontWidth, (y + 1) * this.iFontHeight,
							width * this.iFontWidth, (height - 1) * this.iFontHeight);
						g.DrawImage(this.oBitmap, rDst, rSrc, GraphicsUnit.Pixel);
						rDst = new Rectangle(x * this.iFontWidth, y * this.iFontHeight,
							width * this.iFontWidth, this.iFontHeight);
						g.FillRectangle(new SolidBrush(ToColor(this.iTextBackColor)), rDst);
					}
					else
					{
						rSrc = new Rectangle(x * this.iFontWidth, (y + 1) * this.iFontHeight,
							width * this.iFontWidth, (height - 1) * this.iFontHeight);
						rDst = new Rectangle(x * this.iFontWidth, y * this.iFontHeight,
							width * this.iFontWidth, (height - 1) * this.iFontHeight);
						g.DrawImage(this.oBitmap, rDst, rSrc, GraphicsUnit.Pixel);
						rDst = new Rectangle(x * this.iFontWidth, (y + height - 1) * this.iFontHeight,
							width * this.iFontWidth, this.iFontHeight);
						g.FillRectangle(new SolidBrush(ToColor(this.iTextBackColor)), rDst);
					}
					g.Flush();
					g.Dispose();
				}
			}
		}

		public void SetPixel(int x, int y, int color)
		{
			if (this.eMode == ModeEnum.Graphics320x200x256 &&
				x >= 0 && x < this.oBitmap.Width && y >= 0 && y < this.oBitmap.Height)
			{
				lock (this.oLock)
				{
					SetPixelInternal(x, y, color);
				}

				RefreshScreen();
			}
		}

		private void SetPixelInternal(int x, int y, int color)
		{
			color &= 0xff;
			int iAddress = (y * this.oBitmap.Width) + x;
			this.abMemory[iAddress] = (byte)color;

			this.oBitmap.SetPixel(x, y, this.aCustomColorPalette256[color]);
		}

		private void PrintChar(char ch)
		{
			int iAddress;
			switch (this.eMode)
			{
				case ModeEnum.Text80x25Color:
					// render into video memory
					iAddress = (this.iYPosition * this.iTextWidth * 2) + this.iXPosition * 2;
					this.abMemory[iAddress + 1] = (byte)ch;

					// render to bitmap
					RenderCharacter(this.iXPosition, this.iYPosition, ch, ToForeColor(this.abMemory[iAddress]), ToBackColor(this.abMemory[iAddress]));
					break;

				case ModeEnum.Graphics320x200x256:
					// render to bitmap
					RenderCharacter(this.iXPosition, this.iYPosition, ch, this.iTextForeColor, this.iTextBackColor);
					break;
			}
		}

		private void PrintChar(char ch, byte colorAttribute)
		{
			int iAddress;
			switch (this.eMode)
			{
				case ModeEnum.Text80x25Color:
					// render into video memory
					iAddress = (this.iYPosition * this.iTextWidth * 2) + this.iXPosition * 2;
					this.abMemory[iAddress] = colorAttribute;
					this.abMemory[iAddress + 1] = (byte)ch;

					// render to bitmap
					RenderCharacter(this.iXPosition, this.iYPosition, ch, ToForeColor(this.abMemory[iAddress]), ToBackColor(this.abMemory[iAddress]));
					break;

				case ModeEnum.Graphics320x200x256:
					// render to bitmap
					RenderCharacter(this.iXPosition, this.iYPosition, ch, this.iTextForeColor, this.iTextBackColor);
					break;
			}
		}

		private void RenderCharacter(int x, int y, int ch, int fore, int back)
		{
			int iXPos = x * 8; // pixel x position
			int iYPos = y * 8; // pixel y position
			int iChPos = ch * 8; // character table position
			int iBitCount = 0;
			int iChMask = this.abFont08[iChPos];

			Color cFore = this.ToColor(fore);
			Color cBack = this.ToColor(back);

			for (int i = 0; i < this.iFontHeight; i++)
			{
				for (int j = 0; j < this.iFontWidth; j++)
				{
					if (this.eMode == ModeEnum.Graphics320x200x256)
						SetPixelInternal(iXPos + j, iYPos + i, ((iChMask & 0x80) != 0) ? fore : back);
					else
						this.oBitmap.SetPixel(iXPos + j, iYPos + i, ((iChMask & 0x80) != 0) ? cFore : cBack);
					iChMask <<= 1;
					iBitCount++;
					if (iBitCount > 7)
					{
						iBitCount = 0;
						iChPos++;
						iChMask = this.abFont08[iChPos];
					}
				}
			}
		}
	}
}
